<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XeThru Embedded Platform - XEP: src/hal/x4m0x_s70/libraries/libchip/include/pwmc.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">XeThru Embedded Platform - XEP
          &#160;<span id="projectnumber">3.4.7</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Embedded platform for XeThru firmware products</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_4ce6a7f885e2866a554ba9e7335035f1.xhtml">hal</a></li><li class="navelem"><a class="el" href="dir_9dc4d255e566c48428ae1788dff8c9e9.xhtml">x4m0x_s70</a></li><li class="navelem"><a class="el" href="dir_75c70effab526b28e035b6c6a3220eb7.xhtml">libraries</a></li><li class="navelem"><a class="el" href="dir_a75a6fe80fd9120ba7dd67a0b33a7bc9.xhtml">libchip</a></li><li class="navelem"><a class="el" href="dir_66d505d01f5149f3674faaa78d4997d4.xhtml">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">pwmc.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="chip_8h_source.xhtml">chip.h</a>&quot;</code><br />
<code>#include &lt;stdint.h&gt;</code><br />
</div><div class="textblock"><div class="dynheader">
Include dependency graph for pwmc.h:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="pwmc_8h__incl.svg" width="206" height="127"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div>
<p><a href="pwmc_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a471066ce23e4343fcca1727878972887"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a471066ce23e4343fcca1727878972887">PWMC_ConfigureChannel</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint8_t channel, uint32_t prescaler, uint32_t alignment, uint32_t polarity)</td></tr>
<tr class="memdesc:a471066ce23e4343fcca1727878972887"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures PWM a channel with the given parameters, basic configure function.  <a href="#a471066ce23e4343fcca1727878972887">More...</a><br /></td></tr>
<tr class="separator:a471066ce23e4343fcca1727878972887"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a340b5bbad001afb9ca0c39ae67d0429a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a340b5bbad001afb9ca0c39ae67d0429a">PWMC_ConfigureChannelExt</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint8_t channel, uint32_t prescaler, uint32_t alignment, uint32_t polarity, uint32_t countEventSelect, uint32_t DTEnable, uint32_t DTHInverte, uint32_t DTLInverte)</td></tr>
<tr class="memdesc:a340b5bbad001afb9ca0c39ae67d0429a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures PWM a channel with the given parameters, extend configure function.  <a href="#a340b5bbad001afb9ca0c39ae67d0429a">More...</a><br /></td></tr>
<tr class="separator:a340b5bbad001afb9ca0c39ae67d0429a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f4d445f4e2139f2507f70f3d8a5b689"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a1f4d445f4e2139f2507f70f3d8a5b689">PWMC_ConfigureClocks</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t clka, uint32_t clkb, uint32_t mck)</td></tr>
<tr class="memdesc:a1f4d445f4e2139f2507f70f3d8a5b689"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures PWM clocks A &amp; B to run at the given frequencies.  <a href="#a1f4d445f4e2139f2507f70f3d8a5b689">More...</a><br /></td></tr>
<tr class="separator:a1f4d445f4e2139f2507f70f3d8a5b689"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89425ddd8a81c74220d9c7786bc6e892"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a89425ddd8a81c74220d9c7786bc6e892">PWMC_SetPeriod</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint8_t channel, uint16_t period)</td></tr>
<tr class="memdesc:a89425ddd8a81c74220d9c7786bc6e892"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the period value used by a PWM channel.  <a href="#a89425ddd8a81c74220d9c7786bc6e892">More...</a><br /></td></tr>
<tr class="separator:a89425ddd8a81c74220d9c7786bc6e892"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad568ae9cc98ca77642950aded8981aab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#ad568ae9cc98ca77642950aded8981aab">PWMC_SetDutyCycle</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint8_t channel, uint16_t duty)</td></tr>
<tr class="memdesc:ad568ae9cc98ca77642950aded8981aab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the duty cycle used by a PWM channel.  <a href="#ad568ae9cc98ca77642950aded8981aab">More...</a><br /></td></tr>
<tr class="separator:ad568ae9cc98ca77642950aded8981aab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade3831bc9750aa702413f77e6689cb2a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#ade3831bc9750aa702413f77e6689cb2a">PWMC_SetDeadTime</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint8_t channel, uint16_t timeH, uint16_t timeL)</td></tr>
<tr class="memdesc:ade3831bc9750aa702413f77e6689cb2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the dead time used by a PWM channel.  <a href="#ade3831bc9750aa702413f77e6689cb2a">More...</a><br /></td></tr>
<tr class="separator:ade3831bc9750aa702413f77e6689cb2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a183898b7dd1c3332f4834e84437b43"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a0a183898b7dd1c3332f4834e84437b43">PWMC_ConfigureSyncChannel</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t channels, uint32_t updateMode, uint32_t requestMode, uint32_t requestComparisonSelect)</td></tr>
<tr class="memdesc:a0a183898b7dd1c3332f4834e84437b43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures Synchronous channel with the given parameters.  <a href="#a0a183898b7dd1c3332f4834e84437b43">More...</a><br /></td></tr>
<tr class="separator:a0a183898b7dd1c3332f4834e84437b43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac828e13f25cfb86253d8501e0c4b46e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#aac828e13f25cfb86253d8501e0c4b46e">PWMC_SetSyncChannelUpdatePeriod</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint8_t period)</td></tr>
<tr class="memdesc:aac828e13f25cfb86253d8501e0c4b46e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the update period of the synchronous channels.  <a href="#aac828e13f25cfb86253d8501e0c4b46e">More...</a><br /></td></tr>
<tr class="separator:aac828e13f25cfb86253d8501e0c4b46e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ad3fafbcf79a6db6ae9b601a194d7c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a9ad3fafbcf79a6db6ae9b601a194d7c1">PWMC_SetSyncChannelUpdateUnlock</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm)</td></tr>
<tr class="memdesc:a9ad3fafbcf79a6db6ae9b601a194d7c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets synchronous channels update unlock.  <a href="#a9ad3fafbcf79a6db6ae9b601a194d7c1">More...</a><br /></td></tr>
<tr class="separator:a9ad3fafbcf79a6db6ae9b601a194d7c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dca9f0d3c82a96556b0d8797f112153"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a6dca9f0d3c82a96556b0d8797f112153">PWMC_EnableChannel</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint8_t channel)</td></tr>
<tr class="memdesc:a6dca9f0d3c82a96556b0d8797f112153"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the given PWM channel.  <a href="#a6dca9f0d3c82a96556b0d8797f112153">More...</a><br /></td></tr>
<tr class="separator:a6dca9f0d3c82a96556b0d8797f112153"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a852c532da5b0ab6d1b00110889bc2a36"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a852c532da5b0ab6d1b00110889bc2a36">PWMC_DisableChannel</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint8_t channel)</td></tr>
<tr class="memdesc:a852c532da5b0ab6d1b00110889bc2a36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the given PWM channel.  <a href="#a852c532da5b0ab6d1b00110889bc2a36">More...</a><br /></td></tr>
<tr class="separator:a852c532da5b0ab6d1b00110889bc2a36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9af5ed9163dfdce443aa99872f00bc1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#aa9af5ed9163dfdce443aa99872f00bc1">PWMC_EnableChannelIt</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint8_t channel)</td></tr>
<tr class="memdesc:aa9af5ed9163dfdce443aa99872f00bc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the period interrupt for the given PWM channel.  <a href="#aa9af5ed9163dfdce443aa99872f00bc1">More...</a><br /></td></tr>
<tr class="separator:aa9af5ed9163dfdce443aa99872f00bc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54331cbc912b199f149be4bdd7dc6854"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a54331cbc912b199f149be4bdd7dc6854">PWMC_DisableChannelIt</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint8_t channel)</td></tr>
<tr class="memdesc:a54331cbc912b199f149be4bdd7dc6854"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the period interrupt for the given PWM channel.  <a href="#a54331cbc912b199f149be4bdd7dc6854">More...</a><br /></td></tr>
<tr class="separator:a54331cbc912b199f149be4bdd7dc6854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa953571f5e0c40a15d2edab98168ae07"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#aa953571f5e0c40a15d2edab98168ae07">PWMC_EnableIt</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t sources1, uint32_t sources2)</td></tr>
<tr class="memdesc:aa953571f5e0c40a15d2edab98168ae07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the selected interrupts sources on a PWMC peripheral.  <a href="#aa953571f5e0c40a15d2edab98168ae07">More...</a><br /></td></tr>
<tr class="separator:aa953571f5e0c40a15d2edab98168ae07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a783cd26783c232a992935c2b9e4ca2ae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a783cd26783c232a992935c2b9e4ca2ae">PWMC_DisableIt</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t sources1, uint32_t sources2)</td></tr>
<tr class="memdesc:a783cd26783c232a992935c2b9e4ca2ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the selected interrupts sources on a PWMC peripheral.  <a href="#a783cd26783c232a992935c2b9e4ca2ae">More...</a><br /></td></tr>
<tr class="separator:a783cd26783c232a992935c2b9e4ca2ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6461ab0c1697425e1f09370632403e3"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#ab6461ab0c1697425e1f09370632403e3">PWMC_WriteBuffer</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pwmc, void *buffer, uint32_t <a class="el" href="host__hid_8c.xhtml#ae809d5359ac030c60a30a8f0b2294b82">length</a>)</td></tr>
<tr class="separator:ab6461ab0c1697425e1f09370632403e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48a044fbe3858d2a1901a45e0f00c5c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a48a044fbe3858d2a1901a45e0f00c5c8">PWMC_SetOverrideValue</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t value)</td></tr>
<tr class="memdesc:a48a044fbe3858d2a1901a45e0f00c5c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set PWM output override value.  <a href="#a48a044fbe3858d2a1901a45e0f00c5c8">More...</a><br /></td></tr>
<tr class="separator:a48a044fbe3858d2a1901a45e0f00c5c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c65099e3d458c058e40df85c11b270d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a6c65099e3d458c058e40df85c11b270d">PWMC_EnableOverrideOutput</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t value, uint32_t sync)</td></tr>
<tr class="memdesc:a6c65099e3d458c058e40df85c11b270d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable override output.  <a href="#a6c65099e3d458c058e40df85c11b270d">More...</a><br /></td></tr>
<tr class="separator:a6c65099e3d458c058e40df85c11b270d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a083ba78af850299ef27c7cd3e4a61834"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a083ba78af850299ef27c7cd3e4a61834">PWMC_OutputOverrideSelection</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t value)</td></tr>
<tr class="memdesc:a083ba78af850299ef27c7cd3e4a61834"><td class="mdescLeft">&#160;</td><td class="mdescRight">Output Selection for override PWM output.  <a href="#a083ba78af850299ef27c7cd3e4a61834">More...</a><br /></td></tr>
<tr class="separator:a083ba78af850299ef27c7cd3e4a61834"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abaa1d4ad2f430cf929d04da8169c5992"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#abaa1d4ad2f430cf929d04da8169c5992">PWMC_DisableOverrideOutput</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t value, uint32_t sync)</td></tr>
<tr class="memdesc:abaa1d4ad2f430cf929d04da8169c5992"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable override output.  <a href="#abaa1d4ad2f430cf929d04da8169c5992">More...</a><br /></td></tr>
<tr class="separator:abaa1d4ad2f430cf929d04da8169c5992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab41db98ee2e0f0b7b34def3e4edc8eb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#aab41db98ee2e0f0b7b34def3e4edc8eb">PWMC_SetFaultMode</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t mode)</td></tr>
<tr class="memdesc:aab41db98ee2e0f0b7b34def3e4edc8eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set PWM fault mode.  <a href="#aab41db98ee2e0f0b7b34def3e4edc8eb">More...</a><br /></td></tr>
<tr class="separator:aab41db98ee2e0f0b7b34def3e4edc8eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92497933925995adb04ac53f5e39327a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a92497933925995adb04ac53f5e39327a">PWMC_FaultClear</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t fault)</td></tr>
<tr class="memdesc:a92497933925995adb04ac53f5e39327a"><td class="mdescLeft">&#160;</td><td class="mdescRight">PWM fault clear.  <a href="#a92497933925995adb04ac53f5e39327a">More...</a><br /></td></tr>
<tr class="separator:a92497933925995adb04ac53f5e39327a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa2af5dbdf3c5f19be594bda552a27b0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#aaa2af5dbdf3c5f19be594bda552a27b0">PWMC_SetFaultProtectionValue</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t value)</td></tr>
<tr class="memdesc:aaa2af5dbdf3c5f19be594bda552a27b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set PWM fault protection value.  <a href="#aaa2af5dbdf3c5f19be594bda552a27b0">More...</a><br /></td></tr>
<tr class="separator:aaa2af5dbdf3c5f19be594bda552a27b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae588232ae74b47dff79a3a4d6cd8b109"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#ae588232ae74b47dff79a3a4d6cd8b109">PWMC_EnableFaultProtection</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t value)</td></tr>
<tr class="memdesc:ae588232ae74b47dff79a3a4d6cd8b109"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable PWM fault protection.  <a href="#ae588232ae74b47dff79a3a4d6cd8b109">More...</a><br /></td></tr>
<tr class="separator:ae588232ae74b47dff79a3a4d6cd8b109"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2d1dc0e1253a70229e45c59b1d2dd15"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#aa2d1dc0e1253a70229e45c59b1d2dd15">PWMC_ConfigureComparisonUnit</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t x, uint32_t value, uint32_t mode)</td></tr>
<tr class="memdesc:aa2d1dc0e1253a70229e45c59b1d2dd15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure comparison unit.  <a href="#aa2d1dc0e1253a70229e45c59b1d2dd15">More...</a><br /></td></tr>
<tr class="separator:aa2d1dc0e1253a70229e45c59b1d2dd15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaeddd56bfeb1520d1d56c9bf1dc69253"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#aaeddd56bfeb1520d1d56c9bf1dc69253">PWMC_ConfigureEventLineMode</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm, uint32_t x, uint32_t mode)</td></tr>
<tr class="memdesc:aaeddd56bfeb1520d1d56c9bf1dc69253"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure event line mode.  <a href="#aaeddd56bfeb1520d1d56c9bf1dc69253">More...</a><br /></td></tr>
<tr class="separator:aaeddd56bfeb1520d1d56c9bf1dc69253"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f5798d05c9d347d74b6f17d5aa294f"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="pwmc_8h.xhtml#a38f5798d05c9d347d74b6f17d5aa294f">PWMC_GetStatus2</a> (<a class="el" href="struct_pwm.xhtml">Pwm</a> *pPwm)</td></tr>
<tr class="memdesc:a38f5798d05c9d347d74b6f17d5aa294f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return PWM Interrupt Status2 Register.  <a href="#a38f5798d05c9d347d74b6f17d5aa294f">More...</a><br /></td></tr>
<tr class="separator:a38f5798d05c9d347d74b6f17d5aa294f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><dl class="section user"><dt>Purpose</dt><dd></dd></dl>
<p>Interface for configuration the Pulse Width Modulation Controller (PWM) peripheral.</p>
<dl class="section user"><dt>Usage</dt><dd></dd></dl>
<ol type="1">
<li>Configures PWM clocks A &amp; B to run at the given frequencies using <a class="el" href="pwmc_8h.xhtml#a1f4d445f4e2139f2507f70f3d8a5b689">PWMC_ConfigureClocks()</a>.</li>
<li>Configure PWMC channel using <a class="el" href="pwmc_8h.xhtml#a471066ce23e4343fcca1727878972887">PWMC_ConfigureChannel()</a>, <a class="el" href="pwmc_8h.xhtml#a340b5bbad001afb9ca0c39ae67d0429a">PWMC_ConfigureChannelExt()</a> <a class="el" href="pwmc_8h.xhtml#a89425ddd8a81c74220d9c7786bc6e892">PWMC_SetPeriod()</a>, <a class="el" href="pwmc_8h.xhtml#ad568ae9cc98ca77642950aded8981aab">PWMC_SetDutyCycle()</a> and <a class="el" href="pwmc_8h.xhtml#ade3831bc9750aa702413f77e6689cb2a">PWMC_SetDeadTime()</a>.</li>
<li>Enable &amp; disable channel using <a class="el" href="pwmc_8h.xhtml#a6dca9f0d3c82a96556b0d8797f112153">PWMC_EnableChannel()</a> and <a class="el" href="pwmc_8h.xhtml#a852c532da5b0ab6d1b00110889bc2a36">PWMC_DisableChannel()</a>.</li>
<li>Enable &amp; disable the period interrupt for the given PWM channel using <a class="el" href="pwmc_8h.xhtml#aa9af5ed9163dfdce443aa99872f00bc1">PWMC_EnableChannelIt()</a> and <a class="el" href="pwmc_8h.xhtml#a54331cbc912b199f149be4bdd7dc6854">PWMC_DisableChannelIt()</a>.</li>
<li>Enable &amp; disable the selected interrupts sources on a PWMC peripheral using <a class="el" href="pwmc_8h.xhtml#aa953571f5e0c40a15d2edab98168ae07">PWMC_EnableIt()</a> and <a class="el" href="pwmc_8h.xhtml#a783cd26783c232a992935c2b9e4ca2ae">PWMC_DisableIt()</a>.</li>
<li>Control synchronous channel using <a class="el" href="pwmc_8h.xhtml#a0a183898b7dd1c3332f4834e84437b43">PWMC_ConfigureSyncChannel()</a>, <a class="el" href="pwmc_8h.xhtml#aac828e13f25cfb86253d8501e0c4b46e">PWMC_SetSyncChannelUpdatePeriod()</a> and <a class="el" href="pwmc_8h.xhtml#a9ad3fafbcf79a6db6ae9b601a194d7c1">PWMC_SetSyncChannelUpdateUnlock()</a>.</li>
<li>Control PWM override output using <a class="el" href="pwmc_8h.xhtml#a48a044fbe3858d2a1901a45e0f00c5c8">PWMC_SetOverrideValue()</a>, <a class="el" href="pwmc_8h.xhtml#a6c65099e3d458c058e40df85c11b270d">PWMC_EnableOverrideOutput()</a> and <a class="el" href="pwmc_8h.xhtml#abaa1d4ad2f430cf929d04da8169c5992">PWMC_DisableOverrideOutput()</a>.</li>
<li>Send data through the transmitter using <a class="el" href="pwmc_8h.xhtml#ab6461ab0c1697425e1f09370632403e3">PWMC_WriteBuffer()</a>. </li>
</ol>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="a471066ce23e4343fcca1727878972887"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a471066ce23e4343fcca1727878972887">&sect;&nbsp;</a></span>PWMC_ConfigureChannel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_ConfigureChannel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>prescaler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>alignment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>polarity</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures PWM a channel with the given parameters, basic configure function. </p>
<p>The PWM controller must have been clocked in the PMC prior to calling this function. Beware: this function disables the channel. It waits until disable is effective.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>Channel number. </td></tr>
    <tr><td class="paramname">prescaler</td><td>Channel prescaler. </td></tr>
    <tr><td class="paramname">alignment</td><td>Channel alignment. </td></tr>
    <tr><td class="paramname">polarity</td><td>Channel polarity. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a340b5bbad001afb9ca0c39ae67d0429a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a340b5bbad001afb9ca0c39ae67d0429a">&sect;&nbsp;</a></span>PWMC_ConfigureChannelExt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_ConfigureChannelExt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>prescaler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>alignment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>polarity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>countEventSelect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>DTEnable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>DTHInverte</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>DTLInverte</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures PWM a channel with the given parameters, extend configure function. </p>
<p>The PWM controller must have been clocked in the PMC prior to calling this function. Beware: this function disables the channel. It waits until disable is effective.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>Channel number. </td></tr>
    <tr><td class="paramname">prescaler</td><td>Channel prescaler. </td></tr>
    <tr><td class="paramname">alignment</td><td>Channel alignment. </td></tr>
    <tr><td class="paramname">polarity</td><td>Channel polarity. </td></tr>
    <tr><td class="paramname">countEventSelect</td><td>Channel counter event selection. </td></tr>
    <tr><td class="paramname">DTEnable</td><td>Channel dead time generator enable. </td></tr>
    <tr><td class="paramname">DTHInverte</td><td>Channel Dead-Time PWMHx output Inverted. </td></tr>
    <tr><td class="paramname">DTLInverte</td><td>Channel Dead-Time PWMHx output Inverted. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1f4d445f4e2139f2507f70f3d8a5b689"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f4d445f4e2139f2507f70f3d8a5b689">&sect;&nbsp;</a></span>PWMC_ConfigureClocks()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_ConfigureClocks </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>clka</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>clkb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures PWM clocks A &amp; B to run at the given frequencies. </p>
<p>This function finds the best MCK divisor and prescaler values automatically.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">clka</td><td>Desired clock A frequency (0 if not used). </td></tr>
    <tr><td class="paramname">clkb</td><td>Desired clock B frequency (0 if not used). </td></tr>
    <tr><td class="paramname">mck</td><td>Master clock frequency. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="pwmc_8h_a1f4d445f4e2139f2507f70f3d8a5b689_cgraph.svg" width="396" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aa2d1dc0e1253a70229e45c59b1d2dd15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2d1dc0e1253a70229e45c59b1d2dd15">&sect;&nbsp;</a></span>PWMC_ConfigureComparisonUnit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_ConfigureComparisonUnit </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure comparison unit. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>comparison x index </td></tr>
    <tr><td class="paramname">value</td><td>comparison x value. </td></tr>
    <tr><td class="paramname">mode</td><td>comparison x mode </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aaeddd56bfeb1520d1d56c9bf1dc69253"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaeddd56bfeb1520d1d56c9bf1dc69253">&sect;&nbsp;</a></span>PWMC_ConfigureEventLineMode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_ConfigureEventLineMode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure event line mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Line x </td></tr>
    <tr><td class="paramname">mode</td><td>Bitwise OR of line mode selection </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0a183898b7dd1c3332f4834e84437b43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a183898b7dd1c3332f4834e84437b43">&sect;&nbsp;</a></span>PWMC_ConfigureSyncChannel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_ConfigureSyncChannel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>updateMode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>requestMode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>requestComparisonSelect</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures Synchronous channel with the given parameters. </p>
<p>Beware: At this time, the channels should be disabled.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channels</td><td>Bitwise OR of Synchronous channels. </td></tr>
    <tr><td class="paramname">updateMode</td><td>Synchronous channel update mode. </td></tr>
    <tr><td class="paramname">requestMode</td><td>PDC transfer request mode. </td></tr>
    <tr><td class="paramname">requestComparisonSelect</td><td>PDC transfer request comparison selection. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a852c532da5b0ab6d1b00110889bc2a36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a852c532da5b0ab6d1b00110889bc2a36">&sect;&nbsp;</a></span>PWMC_DisableChannel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_DisableChannel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disables the given PWM channel. </p>
<p>Beware, channel will be effectively disabled at the end of the current period. Application can check channel is disabled using the following wait loop: while ((PWM-&gt;PWM_SR &amp; (1 &lt;&lt; channel)) != 0);</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>Channel number. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a54331cbc912b199f149be4bdd7dc6854"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54331cbc912b199f149be4bdd7dc6854">&sect;&nbsp;</a></span>PWMC_DisableChannelIt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_DisableChannelIt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disables the period interrupt for the given PWM channel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>Channel number. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a783cd26783c232a992935c2b9e4ca2ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a783cd26783c232a992935c2b9e4ca2ae">&sect;&nbsp;</a></span>PWMC_DisableIt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_DisableIt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>sources1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>sources2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disables the selected interrupts sources on a PWMC peripheral. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sources1</td><td>Bitwise OR of selected interrupt sources of PWM_IDR1. </td></tr>
    <tr><td class="paramname">sources2</td><td>Bitwise OR of selected interrupt sources of PWM_IDR2. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abaa1d4ad2f430cf929d04da8169c5992"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abaa1d4ad2f430cf929d04da8169c5992">&sect;&nbsp;</a></span>PWMC_DisableOverrideOutput()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_DisableOverrideOutput </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>sync</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable override output. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Bitwise OR of output selection. </td></tr>
    <tr><td class="paramname">sync</td><td>0: enable the output asynchronously, 1: enable it synchronously </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6dca9f0d3c82a96556b0d8797f112153"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dca9f0d3c82a96556b0d8797f112153">&sect;&nbsp;</a></span>PWMC_EnableChannel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_EnableChannel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enables the given PWM channel. </p>
<p>This does NOT enable the corresponding pin;this must be done in the user code.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>Channel number. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa9af5ed9163dfdce443aa99872f00bc1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9af5ed9163dfdce443aa99872f00bc1">&sect;&nbsp;</a></span>PWMC_EnableChannelIt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_EnableChannelIt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enables the period interrupt for the given PWM channel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>Channel number. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae588232ae74b47dff79a3a4d6cd8b109"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae588232ae74b47dff79a3a4d6cd8b109">&sect;&nbsp;</a></span>PWMC_EnableFaultProtection()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_EnableFaultProtection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable PWM fault protection. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Bitwise OR of FPEx[y]. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa953571f5e0c40a15d2edab98168ae07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa953571f5e0c40a15d2edab98168ae07">&sect;&nbsp;</a></span>PWMC_EnableIt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_EnableIt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>sources1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>sources2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enables the selected interrupts sources on a PWMC peripheral. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sources1</td><td>Bitwise OR of selected interrupt sources of PWM_IER1. </td></tr>
    <tr><td class="paramname">sources2</td><td>Bitwise OR of selected interrupt sources of PWM_IER2. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6c65099e3d458c058e40df85c11b270d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c65099e3d458c058e40df85c11b270d">&sect;&nbsp;</a></span>PWMC_EnableOverrideOutput()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_EnableOverrideOutput </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>sync</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable override output. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Bitwise OR of output selection. </td></tr>
    <tr><td class="paramname">sync</td><td>0: enable the output asynchronously, 1: enable it synchronously </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a92497933925995adb04ac53f5e39327a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92497933925995adb04ac53f5e39327a">&sect;&nbsp;</a></span>PWMC_FaultClear()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_FaultClear </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>fault</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>PWM fault clear. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">fault</td><td>Bitwise OR of fault to clear. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a38f5798d05c9d347d74b6f17d5aa294f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38f5798d05c9d347d74b6f17d5aa294f">&sect;&nbsp;</a></span>PWMC_GetStatus2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t PWMC_GetStatus2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return PWM Interrupt Status2 Register. </p>

</div>
</div>
<a id="a083ba78af850299ef27c7cd3e4a61834"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a083ba78af850299ef27c7cd3e4a61834">&sect;&nbsp;</a></span>PWMC_OutputOverrideSelection()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_OutputOverrideSelection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Output Selection for override PWM output. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Bitwise OR of output override value. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ade3831bc9750aa702413f77e6689cb2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade3831bc9750aa702413f77e6689cb2a">&sect;&nbsp;</a></span>PWMC_SetDeadTime()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_SetDeadTime </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>timeH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>timeL</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the dead time used by a PWM channel. </p>
<p>This function writes directly to the DT register if the channel is disabled; otherwise it uses the update register DTUPD. Note that the dead time must always be inferior or equal to the channel period.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>Channel number. </td></tr>
    <tr><td class="paramname">timeH</td><td>Dead time value for PWMHx output. </td></tr>
    <tr><td class="paramname">timeL</td><td>Dead time value for PWMLx output. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad568ae9cc98ca77642950aded8981aab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad568ae9cc98ca77642950aded8981aab">&sect;&nbsp;</a></span>PWMC_SetDutyCycle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_SetDutyCycle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>duty</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the duty cycle used by a PWM channel. </p>
<p>This function writes directly to the CDTY register if the channel is disabled; otherwise it uses the update register CDTYUPD. Note that the duty cycle must always be inferior or equal to the channel period.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>Channel number. </td></tr>
    <tr><td class="paramname">duty</td><td>Duty cycle value. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="pwmc_8h_ad568ae9cc98ca77642950aded8981aab_icgraph.svg" width="296" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aab41db98ee2e0f0b7b34def3e4edc8eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab41db98ee2e0f0b7b34def3e4edc8eb">&sect;&nbsp;</a></span>PWMC_SetFaultMode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_SetFaultMode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set PWM fault mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mode</td><td>Bitwise OR of fault mode. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aaa2af5dbdf3c5f19be594bda552a27b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa2af5dbdf3c5f19be594bda552a27b0">&sect;&nbsp;</a></span>PWMC_SetFaultProtectionValue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_SetFaultProtectionValue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set PWM fault protection value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Bitwise OR of fault protection value. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a48a044fbe3858d2a1901a45e0f00c5c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48a044fbe3858d2a1901a45e0f00c5c8">&sect;&nbsp;</a></span>PWMC_SetOverrideValue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_SetOverrideValue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set PWM output override value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Bitwise OR of output override value. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a89425ddd8a81c74220d9c7786bc6e892"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89425ddd8a81c74220d9c7786bc6e892">&sect;&nbsp;</a></span>PWMC_SetPeriod()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_SetPeriod </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>period</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the period value used by a PWM channel. </p>
<p>This function writes directly to the CPRD register if the channel is disabled; otherwise, it uses the update register CPRDUPD.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">channel</td><td>Channel number. </td></tr>
    <tr><td class="paramname">period</td><td>Period value. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aac828e13f25cfb86253d8501e0c4b46e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac828e13f25cfb86253d8501e0c4b46e">&sect;&nbsp;</a></span>PWMC_SetSyncChannelUpdatePeriod()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_SetSyncChannelUpdatePeriod </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>period</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the update period of the synchronous channels. </p>
<p>This function writes directly to the SCUP register if the channel #0 is disabled; otherwise it uses the update register SCUPUPD.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">period</td><td>update period. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9ad3fafbcf79a6db6ae9b601a194d7c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ad3fafbcf79a6db6ae9b601a194d7c1">&sect;&nbsp;</a></span>PWMC_SetSyncChannelUpdateUnlock()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PWMC_SetSyncChannelUpdateUnlock </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pPwm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets synchronous channels update unlock. </p>
<p>Note: If the UPDM field is set to 0, writing the UPDULOCK bit to 1 triggers the update of the period value, the duty-cycle and the dead-time values of synchronous channels at the beginning of the next PWM period. If the field UPDM is set to 1 or 2, writing the UPDULOCK bit to 1 triggers only the update of the period value and of the dead-time values of synchronous channels. This bit is automatically reset when the update is done. </p>

</div>
</div>
<a id="ab6461ab0c1697425e1f09370632403e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6461ab0c1697425e1f09370632403e3">&sect;&nbsp;</a></span>PWMC_WriteBuffer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t PWMC_WriteBuffer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_pwm.xhtml">Pwm</a> *&#160;</td>
          <td class="paramname"><em>pwmc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
