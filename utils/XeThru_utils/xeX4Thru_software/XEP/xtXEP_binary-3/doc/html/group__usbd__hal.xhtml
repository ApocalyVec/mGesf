<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XeThru Embedded Platform - XEP: Usbd_hal</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">XeThru Embedded Platform - XEP
          &#160;<span id="projectnumber">3.4.7</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Embedded platform for XeThru firmware products</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#groups">Modules</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">Usbd_hal</div>  </div>
</div><!--header-->
<div class="contents">
<div class="dynheader">
Collaboration diagram for Usbd_hal:</div>
<div class="dyncontent">
<center><table><tr><td><div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal.svg" width="274" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</td></tr></table></center>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="groups"></a>
Modules</h2></td></tr>
<tr class="memitem:group__usbd__leds"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__leds.xhtml">USB Device LEDs</a></td></tr>
<tr class="memdesc:group__usbd__leds"><td class="mdescLeft">&#160;</td><td class="mdescRight">This page lists the LEDs used in the USB device driver. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_transfer_header.xhtml">TransferHeader</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes header for UDP endpoint transfer.  <a href="struct_transfer_header.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_transfer.xhtml">Transfer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes a transfer on a UDP endpoint.  <a href="struct_transfer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_mbl_transfer.xhtml">MblTransfer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes Multi Buffer List transfer on a UDP endpoint.  <a href="struct_mbl_transfer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_endpoint.xhtml">Endpoint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes the state of an endpoint of the UDP controller.  <a href="struct_endpoint.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_udphs_dma_descriptor.xhtml">UdphsDmaDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">DMA Descriptor.  <a href="struct_udphs_dma_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga137c9e7c0bc9e12f455df0a6e41c0287"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga137c9e7c0bc9e12f455df0a6e41c0287">DMA</a></td></tr>
<tr class="separator:ga137c9e7c0bc9e12f455df0a6e41c0287"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a3966a3e34cf6f45d5c49158a47370b"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1a3966a3e34cf6f45d5c49158a47370b">SHIFT_INTERUPT</a>&#160;&#160;&#160;12</td></tr>
<tr class="memdesc:ga1a3966a3e34cf6f45d5c49158a47370b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bits that should be shifted to access interrupt bits.  <a href="#ga1a3966a3e34cf6f45d5c49158a47370b">More...</a><br /></td></tr>
<tr class="separator:ga1a3966a3e34cf6f45d5c49158a47370b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1fab52c7032d2314d73ced9188dce52f"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1fab52c7032d2314d73ced9188dce52f">UDPHS_ENDPOINT_DISABLED</a>&#160;&#160;&#160;0</td></tr>
<tr class="memdesc:ga1fab52c7032d2314d73ced9188dce52f"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is disabled.  <a href="#ga1fab52c7032d2314d73ced9188dce52f">More...</a><br /></td></tr>
<tr class="separator:ga1fab52c7032d2314d73ced9188dce52f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga54f28f8061173dba5b54970d732f3016"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga54f28f8061173dba5b54970d732f3016">UDPHS_ENDPOINT_HALTED</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:ga54f28f8061173dba5b54970d732f3016"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is halted (i.e.  <a href="#ga54f28f8061173dba5b54970d732f3016">More...</a><br /></td></tr>
<tr class="separator:ga54f28f8061173dba5b54970d732f3016"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4042f4c27fb1a59fa4e837a179f9cec1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4042f4c27fb1a59fa4e837a179f9cec1">UDPHS_ENDPOINT_IDLE</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:ga4042f4c27fb1a59fa4e837a179f9cec1"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is idle (i.e.  <a href="#ga4042f4c27fb1a59fa4e837a179f9cec1">More...</a><br /></td></tr>
<tr class="separator:ga4042f4c27fb1a59fa4e837a179f9cec1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga761fbc08534b1b3308ddd4897e1dd4bd"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga761fbc08534b1b3308ddd4897e1dd4bd">UDPHS_ENDPOINT_SENDING</a>&#160;&#160;&#160;3</td></tr>
<tr class="memdesc:ga761fbc08534b1b3308ddd4897e1dd4bd"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending data.  <a href="#ga761fbc08534b1b3308ddd4897e1dd4bd">More...</a><br /></td></tr>
<tr class="separator:ga761fbc08534b1b3308ddd4897e1dd4bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga57bdba8e2cf76761b4d9a1aebff63a54"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga57bdba8e2cf76761b4d9a1aebff63a54">UDPHS_ENDPOINT_RECEIVING</a>&#160;&#160;&#160;4</td></tr>
<tr class="memdesc:ga57bdba8e2cf76761b4d9a1aebff63a54"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving data.  <a href="#ga57bdba8e2cf76761b4d9a1aebff63a54">More...</a><br /></td></tr>
<tr class="separator:ga57bdba8e2cf76761b4d9a1aebff63a54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84adc62db8c2e90f323b2b0a802df0a4"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga84adc62db8c2e90f323b2b0a802df0a4">UDPHS_ENDPOINT_SENDINGM</a>&#160;&#160;&#160;5</td></tr>
<tr class="memdesc:ga84adc62db8c2e90f323b2b0a802df0a4"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending MBL.  <a href="#ga84adc62db8c2e90f323b2b0a802df0a4">More...</a><br /></td></tr>
<tr class="separator:ga84adc62db8c2e90f323b2b0a802df0a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga318439ae43fc0f1f83cc4c61f22b50b3"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga318439ae43fc0f1f83cc4c61f22b50b3">UDPHS_ENDPOINT_RECEIVINGM</a>&#160;&#160;&#160;6</td></tr>
<tr class="memdesc:ga318439ae43fc0f1f83cc4c61f22b50b3"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving MBL.  <a href="#ga318439ae43fc0f1f83cc4c61f22b50b3">More...</a><br /></td></tr>
<tr class="separator:ga318439ae43fc0f1f83cc4c61f22b50b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58081bc990ddb9737252e5794b703850"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga58081bc990ddb9737252e5794b703850">MBL_NbBuffer</a>(i,  o,  size)&#160;&#160;&#160;(((i)&gt;(o))?((i)-(o)):((i)+(size)-(o)))</td></tr>
<tr class="memdesc:ga58081bc990ddb9737252e5794b703850"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Number of buffer in Multi-Buffer-List.  <a href="#ga58081bc990ddb9737252e5794b703850">More...</a><br /></td></tr>
<tr class="separator:ga58081bc990ddb9737252e5794b703850"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaefb1ead0b778081953b1a3dabca312c4"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaefb1ead0b778081953b1a3dabca312c4">MBL_FULL</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:gaefb1ead0b778081953b1a3dabca312c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Buffer list is full.  <a href="#gaefb1ead0b778081953b1a3dabca312c4">More...</a><br /></td></tr>
<tr class="separator:gaefb1ead0b778081953b1a3dabca312c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fea9931b5288124d11803122002ac70"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga7fea9931b5288124d11803122002ac70">MBL_NULL</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:ga7fea9931b5288124d11803122002ac70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Buffer list is null.  <a href="#ga7fea9931b5288124d11803122002ac70">More...</a><br /></td></tr>
<tr class="separator:ga7fea9931b5288124d11803122002ac70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0d5301f4b6b7c4dc59bdd76d725c9517"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga0d5301f4b6b7c4dc59bdd76d725c9517">CHIP_USB_UDP</a></td></tr>
<tr class="memdesc:ga0d5301f4b6b7c4dc59bdd76d725c9517"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates chip has an UDP Full Speed.  <a href="#ga0d5301f4b6b7c4dc59bdd76d725c9517">More...</a><br /></td></tr>
<tr class="separator:ga0d5301f4b6b7c4dc59bdd76d725c9517"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4bcc957f1288dac54003f5a0045b2cd7"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4bcc957f1288dac54003f5a0045b2cd7">CHIP_USB_PULLUP_INTERNAL</a></td></tr>
<tr class="memdesc:ga4bcc957f1288dac54003f5a0045b2cd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates chip has an internal pull-up.  <a href="#ga4bcc957f1288dac54003f5a0045b2cd7">More...</a><br /></td></tr>
<tr class="separator:ga4bcc957f1288dac54003f5a0045b2cd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab1098bd73746d6f0b0ab28975d2a5043"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gab1098bd73746d6f0b0ab28975d2a5043">CHIP_USB_NUMENDPOINTS</a>&#160;&#160;&#160;8</td></tr>
<tr class="memdesc:gab1098bd73746d6f0b0ab28975d2a5043"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of USB endpoints.  <a href="#gab1098bd73746d6f0b0ab28975d2a5043">More...</a><br /></td></tr>
<tr class="separator:gab1098bd73746d6f0b0ab28975d2a5043"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga05ac6230a39d6e5cf5cd31ec020a80eb"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga05ac6230a39d6e5cf5cd31ec020a80eb">CHIP_USB_ENDPOINTS_MAXPACKETSIZE</a>(i)</td></tr>
<tr class="memdesc:ga05ac6230a39d6e5cf5cd31ec020a80eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Endpoints max paxcket size.  <a href="#ga05ac6230a39d6e5cf5cd31ec020a80eb">More...</a><br /></td></tr>
<tr class="separator:ga05ac6230a39d6e5cf5cd31ec020a80eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaad991f853260be887e8d336296a1ed18"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaad991f853260be887e8d336296a1ed18">CHIP_USB_ENDPOINTS_BANKS</a>(i)</td></tr>
<tr class="memdesc:gaad991f853260be887e8d336296a1ed18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Endpoints Number of Bank.  <a href="#gaad991f853260be887e8d336296a1ed18">More...</a><br /></td></tr>
<tr class="separator:gaad991f853260be887e8d336296a1ed18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c239fd97064879e5477a2ec1ab8b80e"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga9c239fd97064879e5477a2ec1ab8b80e">UDP_CSR_RXDATA_BK</a>&#160;&#160;&#160;(UDP_CSR_RX_DATA_BK0 | UDP_CSR_RX_DATA_BK1)</td></tr>
<tr class="memdesc:ga9c239fd97064879e5477a2ec1ab8b80e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bit mask for both banks of the UDP_CSR register.  <a href="#ga9c239fd97064879e5477a2ec1ab8b80e">More...</a><br /></td></tr>
<tr class="separator:ga9c239fd97064879e5477a2ec1ab8b80e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga02cc470b0850e42c28b933bd34999bb8"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga02cc470b0850e42c28b933bd34999bb8">UDP_ENDPOINT_DISABLED</a>&#160;&#160;&#160;0</td></tr>
<tr class="memdesc:ga02cc470b0850e42c28b933bd34999bb8"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is disabled.  <a href="#ga02cc470b0850e42c28b933bd34999bb8">More...</a><br /></td></tr>
<tr class="separator:ga02cc470b0850e42c28b933bd34999bb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad84f009de857253b3bc1a553c9a598f8"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gad84f009de857253b3bc1a553c9a598f8">UDP_ENDPOINT_HALTED</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:gad84f009de857253b3bc1a553c9a598f8"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is halted (i.e.  <a href="#gad84f009de857253b3bc1a553c9a598f8">More...</a><br /></td></tr>
<tr class="separator:gad84f009de857253b3bc1a553c9a598f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2a8875863be602aea2d35caf2ab6a5a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaf2a8875863be602aea2d35caf2ab6a5a">UDP_ENDPOINT_IDLE</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:gaf2a8875863be602aea2d35caf2ab6a5a"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is idle (i.e.  <a href="#gaf2a8875863be602aea2d35caf2ab6a5a">More...</a><br /></td></tr>
<tr class="separator:gaf2a8875863be602aea2d35caf2ab6a5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafbeaad990d4a3ecf3468b0028b294e5f"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gafbeaad990d4a3ecf3468b0028b294e5f">UDP_ENDPOINT_SENDING</a>&#160;&#160;&#160;3</td></tr>
<tr class="memdesc:gafbeaad990d4a3ecf3468b0028b294e5f"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending data.  <a href="#gafbeaad990d4a3ecf3468b0028b294e5f">More...</a><br /></td></tr>
<tr class="separator:gafbeaad990d4a3ecf3468b0028b294e5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace0e1ba8c4b4b45dd4b4e33bcaa5c1ff"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gace0e1ba8c4b4b45dd4b4e33bcaa5c1ff">UDP_ENDPOINT_RECEIVING</a>&#160;&#160;&#160;4</td></tr>
<tr class="memdesc:gace0e1ba8c4b4b45dd4b4e33bcaa5c1ff"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving data.  <a href="#gace0e1ba8c4b4b45dd4b4e33bcaa5c1ff">More...</a><br /></td></tr>
<tr class="separator:gace0e1ba8c4b4b45dd4b4e33bcaa5c1ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga15c8429cff9c7eeb3a870550b4d061ae"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga15c8429cff9c7eeb3a870550b4d061ae">UDP_ENDPOINT_SENDINGM</a>&#160;&#160;&#160;5</td></tr>
<tr class="memdesc:ga15c8429cff9c7eeb3a870550b4d061ae"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending MBL.  <a href="#ga15c8429cff9c7eeb3a870550b4d061ae">More...</a><br /></td></tr>
<tr class="separator:ga15c8429cff9c7eeb3a870550b4d061ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3cf34c9b039691e6bfc26273de8b9c7"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gac3cf34c9b039691e6bfc26273de8b9c7">UDP_ENDPOINT_RECEIVINGM</a>&#160;&#160;&#160;6</td></tr>
<tr class="memdesc:gac3cf34c9b039691e6bfc26273de8b9c7"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving MBL.  <a href="#gac3cf34c9b039691e6bfc26273de8b9c7">More...</a><br /></td></tr>
<tr class="separator:gac3cf34c9b039691e6bfc26273de8b9c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa6c0c722527692b35b834763a966b3f5"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaa6c0c722527692b35b834763a966b3f5">REG_NO_EFFECT_1_ALL</a></td></tr>
<tr class="memdesc:gaa6c0c722527692b35b834763a966b3f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitmap for all status bits in CSR.  <a href="#gaa6c0c722527692b35b834763a966b3f5">More...</a><br /></td></tr>
<tr class="separator:gaa6c0c722527692b35b834763a966b3f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8eb78c466adbf66f9b5c780267df7279"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga8eb78c466adbf66f9b5c780267df7279">SET_CSR</a>(endpoint,  flags)</td></tr>
<tr class="memdesc:ga8eb78c466adbf66f9b5c780267df7279"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the specified bit(s) in the UDP_CSR register.  <a href="#ga8eb78c466adbf66f9b5c780267df7279">More...</a><br /></td></tr>
<tr class="separator:ga8eb78c466adbf66f9b5c780267df7279"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac980e0ecf14ac94d338d3dc995e39eee"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gac980e0ecf14ac94d338d3dc995e39eee">CLEAR_CSR</a>(endpoint,  flags)</td></tr>
<tr class="memdesc:gac980e0ecf14ac94d338d3dc995e39eee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the specified bit(s) in the UDP_CSR register.  <a href="#gac980e0ecf14ac94d338d3dc995e39eee">More...</a><br /></td></tr>
<tr class="separator:gac980e0ecf14ac94d338d3dc995e39eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58081bc990ddb9737252e5794b703850"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga58081bc990ddb9737252e5794b703850">MBL_NbBuffer</a>(i,  o,  size)&#160;&#160;&#160;(((i)&gt;(o))?((i)-(o)):((i)+(size)-(o)))</td></tr>
<tr class="memdesc:ga58081bc990ddb9737252e5794b703850"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Number of buffer in Multi-Buffer-List.  <a href="#ga58081bc990ddb9737252e5794b703850">More...</a><br /></td></tr>
<tr class="separator:ga58081bc990ddb9737252e5794b703850"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaefb1ead0b778081953b1a3dabca312c4"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaefb1ead0b778081953b1a3dabca312c4">MBL_FULL</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:gaefb1ead0b778081953b1a3dabca312c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Buffer list is full.  <a href="#gaefb1ead0b778081953b1a3dabca312c4">More...</a><br /></td></tr>
<tr class="separator:gaefb1ead0b778081953b1a3dabca312c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fea9931b5288124d11803122002ac70"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga7fea9931b5288124d11803122002ac70">MBL_NULL</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:ga7fea9931b5288124d11803122002ac70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Buffer list is null.  <a href="#ga7fea9931b5288124d11803122002ac70">More...</a><br /></td></tr>
<tr class="separator:ga7fea9931b5288124d11803122002ac70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga137c9e7c0bc9e12f455df0a6e41c0287"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga137c9e7c0bc9e12f455df0a6e41c0287">DMA</a></td></tr>
<tr class="separator:ga137c9e7c0bc9e12f455df0a6e41c0287"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5f881a794f4e612b63750861ff9dc43"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaa5f881a794f4e612b63750861ff9dc43">NUM_IT_MAX</a>&#160;&#160;&#160;(UDPHS-&gt;UDPHS_IPFEATURES &amp; UDPHS_IPFEATURES_EPT_NBR_MAX_Msk)</td></tr>
<tr class="memdesc:gaa5f881a794f4e612b63750861ff9dc43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maximum number of endpoints interrupts.  <a href="#gaa5f881a794f4e612b63750861ff9dc43">More...</a><br /></td></tr>
<tr class="separator:gaa5f881a794f4e612b63750861ff9dc43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga892015a6ce22d51cc09ee28ecceeb368"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga892015a6ce22d51cc09ee28ecceeb368">NUM_IT_MAX_DMA</a></td></tr>
<tr class="memdesc:ga892015a6ce22d51cc09ee28ecceeb368"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maximum number of endpoint DMA interrupts.  <a href="#ga892015a6ce22d51cc09ee28ecceeb368">More...</a><br /></td></tr>
<tr class="separator:ga892015a6ce22d51cc09ee28ecceeb368"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga71f704a7c8aaf4b17965e2e55917e986"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga71f704a7c8aaf4b17965e2e55917e986">SHIFT_DMA</a>&#160;&#160;&#160;24</td></tr>
<tr class="memdesc:ga71f704a7c8aaf4b17965e2e55917e986"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bits that should be shifted to access DMA control bits.  <a href="#ga71f704a7c8aaf4b17965e2e55917e986">More...</a><br /></td></tr>
<tr class="separator:ga71f704a7c8aaf4b17965e2e55917e986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a3966a3e34cf6f45d5c49158a47370b"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1a3966a3e34cf6f45d5c49158a47370b">SHIFT_INTERUPT</a>&#160;&#160;&#160;8</td></tr>
<tr class="memdesc:ga1a3966a3e34cf6f45d5c49158a47370b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bits that should be shifted to access interrupt bits.  <a href="#ga1a3966a3e34cf6f45d5c49158a47370b">More...</a><br /></td></tr>
<tr class="separator:ga1a3966a3e34cf6f45d5c49158a47370b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74fb9f0009ae61530ac99e19744fc7f1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga74fb9f0009ae61530ac99e19744fc7f1">DMA_MAX_FIFO_SIZE</a>&#160;&#160;&#160;(65536/1)</td></tr>
<tr class="memdesc:ga74fb9f0009ae61530ac99e19744fc7f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Max size of the FMA FIFO.  <a href="#ga74fb9f0009ae61530ac99e19744fc7f1">More...</a><br /></td></tr>
<tr class="separator:ga74fb9f0009ae61530ac99e19744fc7f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19e18c1683b682fc01056cbf2b2b92f6"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga19e18c1683b682fc01056cbf2b2b92f6">EPT_VIRTUAL_SIZE</a>&#160;&#160;&#160;16384</td></tr>
<tr class="memdesc:ga19e18c1683b682fc01056cbf2b2b92f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">fifo space size in DW  <a href="#ga19e18c1683b682fc01056cbf2b2b92f6">More...</a><br /></td></tr>
<tr class="separator:ga19e18c1683b682fc01056cbf2b2b92f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1fab52c7032d2314d73ced9188dce52f"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1fab52c7032d2314d73ced9188dce52f">UDPHS_ENDPOINT_DISABLED</a>&#160;&#160;&#160;0</td></tr>
<tr class="memdesc:ga1fab52c7032d2314d73ced9188dce52f"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is disabled.  <a href="#ga1fab52c7032d2314d73ced9188dce52f">More...</a><br /></td></tr>
<tr class="separator:ga1fab52c7032d2314d73ced9188dce52f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga54f28f8061173dba5b54970d732f3016"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga54f28f8061173dba5b54970d732f3016">UDPHS_ENDPOINT_HALTED</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:ga54f28f8061173dba5b54970d732f3016"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is halted (i.e.  <a href="#ga54f28f8061173dba5b54970d732f3016">More...</a><br /></td></tr>
<tr class="separator:ga54f28f8061173dba5b54970d732f3016"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4042f4c27fb1a59fa4e837a179f9cec1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4042f4c27fb1a59fa4e837a179f9cec1">UDPHS_ENDPOINT_IDLE</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:ga4042f4c27fb1a59fa4e837a179f9cec1"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is idle (i.e.  <a href="#ga4042f4c27fb1a59fa4e837a179f9cec1">More...</a><br /></td></tr>
<tr class="separator:ga4042f4c27fb1a59fa4e837a179f9cec1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga761fbc08534b1b3308ddd4897e1dd4bd"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga761fbc08534b1b3308ddd4897e1dd4bd">UDPHS_ENDPOINT_SENDING</a>&#160;&#160;&#160;3</td></tr>
<tr class="memdesc:ga761fbc08534b1b3308ddd4897e1dd4bd"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending data.  <a href="#ga761fbc08534b1b3308ddd4897e1dd4bd">More...</a><br /></td></tr>
<tr class="separator:ga761fbc08534b1b3308ddd4897e1dd4bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga57bdba8e2cf76761b4d9a1aebff63a54"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga57bdba8e2cf76761b4d9a1aebff63a54">UDPHS_ENDPOINT_RECEIVING</a>&#160;&#160;&#160;4</td></tr>
<tr class="memdesc:ga57bdba8e2cf76761b4d9a1aebff63a54"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving data.  <a href="#ga57bdba8e2cf76761b4d9a1aebff63a54">More...</a><br /></td></tr>
<tr class="separator:ga57bdba8e2cf76761b4d9a1aebff63a54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84adc62db8c2e90f323b2b0a802df0a4"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga84adc62db8c2e90f323b2b0a802df0a4">UDPHS_ENDPOINT_SENDINGM</a>&#160;&#160;&#160;5</td></tr>
<tr class="memdesc:ga84adc62db8c2e90f323b2b0a802df0a4"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending MBL.  <a href="#ga84adc62db8c2e90f323b2b0a802df0a4">More...</a><br /></td></tr>
<tr class="separator:ga84adc62db8c2e90f323b2b0a802df0a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga318439ae43fc0f1f83cc4c61f22b50b3"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga318439ae43fc0f1f83cc4c61f22b50b3">UDPHS_ENDPOINT_RECEIVINGM</a>&#160;&#160;&#160;6</td></tr>
<tr class="memdesc:ga318439ae43fc0f1f83cc4c61f22b50b3"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving MBL.  <a href="#ga318439ae43fc0f1f83cc4c61f22b50b3">More...</a><br /></td></tr>
<tr class="separator:ga318439ae43fc0f1f83cc4c61f22b50b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58081bc990ddb9737252e5794b703850"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga58081bc990ddb9737252e5794b703850">MBL_NbBuffer</a>(i,  o,  size)&#160;&#160;&#160;(((i)&gt;(o))?((i)-(o)):((i)+(size)-(o)))</td></tr>
<tr class="memdesc:ga58081bc990ddb9737252e5794b703850"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Number of buffer in Multi-Buffer-List.  <a href="#ga58081bc990ddb9737252e5794b703850">More...</a><br /></td></tr>
<tr class="separator:ga58081bc990ddb9737252e5794b703850"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaefb1ead0b778081953b1a3dabca312c4"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaefb1ead0b778081953b1a3dabca312c4">MBL_FULL</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:gaefb1ead0b778081953b1a3dabca312c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Buffer list is full.  <a href="#gaefb1ead0b778081953b1a3dabca312c4">More...</a><br /></td></tr>
<tr class="separator:gaefb1ead0b778081953b1a3dabca312c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fea9931b5288124d11803122002ac70"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga7fea9931b5288124d11803122002ac70">MBL_NULL</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:ga7fea9931b5288124d11803122002ac70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Buffer list is null.  <a href="#ga7fea9931b5288124d11803122002ac70">More...</a><br /></td></tr>
<tr class="separator:ga7fea9931b5288124d11803122002ac70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga51c1ba9d0b7d1e090a6ae2baa275b63d"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga51c1ba9d0b7d1e090a6ae2baa275b63d">bmEP</a>(bEP)&#160;&#160;&#160;(1 &lt;&lt; (bEP))</td></tr>
<tr class="memdesc:ga51c1ba9d0b7d1e090a6ae2baa275b63d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get bitmap for an endpoint.  <a href="#ga51c1ba9d0b7d1e090a6ae2baa275b63d">More...</a><br /></td></tr>
<tr class="separator:ga51c1ba9d0b7d1e090a6ae2baa275b63d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga86958f3e3fee75490c591439e03b24af"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga86958f3e3fee75490c591439e03b24af">EndpointInt</a></td></tr>
<tr class="separator:ga86958f3e3fee75490c591439e03b24af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7ed964f770d52d677991b24842a17200"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga7ed964f770d52d677991b24842a17200">DMAEndpointInt</a></td></tr>
<tr class="separator:ga7ed964f770d52d677991b24842a17200"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga8acadaacd74f48254d2f05a2f7ee8803"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga8acadaacd74f48254d2f05a2f7ee8803">COMPILER_ALIGNED</a> (16)</td></tr>
<tr class="memdesc:ga8acadaacd74f48254d2f05a2f7ee8803"><td class="mdescLeft">&#160;</td><td class="mdescRight">DMA link list.  <a href="#ga8acadaacd74f48254d2f05a2f7ee8803">More...</a><br /></td></tr>
<tr class="separator:ga8acadaacd74f48254d2f05a2f7ee8803"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga03f1cd55f5d5ed368dec0aa6ad6ccb3f"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga03f1cd55f5d5ed368dec0aa6ad6ccb3f">UDPHS_MblUpdate</a> (<a class="el" href="struct_mbl_transfer.xhtml">MblTransfer</a> *pTransfer, <a class="el" href="group__usbd__interface.xhtml#ga63064ab8800bf35183494fd0fe2f6b32">USBDTransferBuffer</a> *pBi, uint16_t size, uint8_t forceEnd)</td></tr>
<tr class="memdesc:ga03f1cd55f5d5ed368dec0aa6ad6ccb3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update multi-buffer-transfer descriptors.  <a href="#ga03f1cd55f5d5ed368dec0aa6ad6ccb3f">More...</a><br /></td></tr>
<tr class="separator:ga03f1cd55f5d5ed368dec0aa6ad6ccb3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5295f6d8b5a54cbe6b365e4ae1bb9633"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga5295f6d8b5a54cbe6b365e4ae1bb9633">UDPHS_MblWriteFifo</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga5295f6d8b5a54cbe6b365e4ae1bb9633"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfers a data payload from the current transfer buffer to the endpoint FIFO.  <a href="#ga5295f6d8b5a54cbe6b365e4ae1bb9633">More...</a><br /></td></tr>
<tr class="separator:ga5295f6d8b5a54cbe6b365e4ae1bb9633"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga118d9d128a56e31f230bee94ac30f91e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga118d9d128a56e31f230bee94ac30f91e">UDPHS_WritePayload</a> (uint8_t bEndpoint, int32_t size)</td></tr>
<tr class="memdesc:ga118d9d128a56e31f230bee94ac30f91e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfers a data payload from the current transfer buffer to the endpoint FIFO.  <a href="#ga118d9d128a56e31f230bee94ac30f91e">More...</a><br /></td></tr>
<tr class="separator:ga118d9d128a56e31f230bee94ac30f91e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga562412b12d966ee5ea983881184d51f6"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga562412b12d966ee5ea983881184d51f6">UDPHS_ReadPayload</a> (uint8_t bEndpoint, int32_t wPacketSize)</td></tr>
<tr class="memdesc:ga562412b12d966ee5ea983881184d51f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfers a data payload from an endpoint FIFO to the current transfer buffer.  <a href="#ga562412b12d966ee5ea983881184d51f6">More...</a><br /></td></tr>
<tr class="separator:ga562412b12d966ee5ea983881184d51f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga51f483eefa9753c15806dfc1cfeb214a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga51f483eefa9753c15806dfc1cfeb214a">UDPHS_ReadRequest</a> (<a class="el" href="struct_u_s_b_generic_request.xhtml">USBGenericRequest</a> *pRequest)</td></tr>
<tr class="memdesc:ga51f483eefa9753c15806dfc1cfeb214a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Received SETUP packet from endpoint 0 FIFO.  <a href="#ga51f483eefa9753c15806dfc1cfeb214a">More...</a><br /></td></tr>
<tr class="separator:ga51f483eefa9753c15806dfc1cfeb214a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4daf62d090af26b8e55aaf9549926622"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4daf62d090af26b8e55aaf9549926622">UDPHS_EndpointHandler</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga4daf62d090af26b8e55aaf9549926622"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> interrupt handler.  <a href="#ga4daf62d090af26b8e55aaf9549926622">More...</a><br /></td></tr>
<tr class="separator:ga4daf62d090af26b8e55aaf9549926622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3050097643684759b64beda54283f1e4"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga3050097643684759b64beda54283f1e4">UDPHS_DmaSingle</a> (uint8_t bEndpoint, <a class="el" href="struct_transfer.xhtml">Transfer</a> *pXfr, uint32_t dwCfg)</td></tr>
<tr class="memdesc:ga3050097643684759b64beda54283f1e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">DMA Single transfer.  <a href="#ga3050097643684759b64beda54283f1e4">More...</a><br /></td></tr>
<tr class="separator:ga3050097643684759b64beda54283f1e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e6f054068ed99c861c50f2eeeb30216"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga5e6f054068ed99c861c50f2eeeb30216">UDPHS_DmaHandler</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga5e6f054068ed99c861c50f2eeeb30216"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> DMA interrupt handler.  <a href="#ga5e6f054068ed99c861c50f2eeeb30216">More...</a><br /></td></tr>
<tr class="separator:ga5e6f054068ed99c861c50f2eeeb30216"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga81935b1ed57f1d4e636df4565de436a5"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga81935b1ed57f1d4e636df4565de436a5">UDPHS_Write</a> (uint8_t bEndpoint, const void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:ga81935b1ed57f1d4e636df4565de436a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends data through a USB endpoint.  <a href="#ga81935b1ed57f1d4e636df4565de436a5">More...</a><br /></td></tr>
<tr class="separator:ga81935b1ed57f1d4e636df4565de436a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gada855d5452052e08f36853a81e3b016d"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gada855d5452052e08f36853a81e3b016d">UDPHS_AddWr</a> (uint8_t bEndpoint, const void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:gada855d5452052e08f36853a81e3b016d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends data through a USB endpoint.  <a href="#gada855d5452052e08f36853a81e3b016d">More...</a><br /></td></tr>
<tr class="separator:gada855d5452052e08f36853a81e3b016d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadf1deb2219e27bcf29d2598d4aa04c1d"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gadf1deb2219e27bcf29d2598d4aa04c1d">UDPHS_Read</a> (uint8_t bEndpoint, void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:gadf1deb2219e27bcf29d2598d4aa04c1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads incoming data on an USB endpoint This methods sets the transfer descriptor and activate the endpoint interrupt.  <a href="#gadf1deb2219e27bcf29d2598d4aa04c1d">More...</a><br /></td></tr>
<tr class="separator:gadf1deb2219e27bcf29d2598d4aa04c1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafcd12a00544aac7645deb694ec611e7a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gafcd12a00544aac7645deb694ec611e7a">USBHS_Handler</a> (void)</td></tr>
<tr class="memdesc:gafcd12a00544aac7645deb694ec611e7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">USBD (UDP) interrupt handler Manages device resume, suspend, end of bus reset.  <a href="#gafcd12a00544aac7645deb694ec611e7a">More...</a><br /></td></tr>
<tr class="separator:gafcd12a00544aac7645deb694ec611e7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa9aba8ccdad2272b61db48b43466043b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaa9aba8ccdad2272b61db48b43466043b">USBD_HAL_ResetEPs</a> (uint32_t bmEPs, uint8_t bStatus, uint8_t bKeepCfg)</td></tr>
<tr class="memdesc:gaa9aba8ccdad2272b61db48b43466043b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset endpoints and disable them.  <a href="#gaa9aba8ccdad2272b61db48b43466043b">More...</a><br /></td></tr>
<tr class="separator:gaa9aba8ccdad2272b61db48b43466043b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac15d66e72d7daa9d05116370a36aa91"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaac15d66e72d7daa9d05116370a36aa91">USBD_HAL_CancelIo</a> (uint32_t bmEPs)</td></tr>
<tr class="memdesc:gaac15d66e72d7daa9d05116370a36aa91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cancel pending READ/WRITE.  <a href="#gaac15d66e72d7daa9d05116370a36aa91">More...</a><br /></td></tr>
<tr class="separator:gaac15d66e72d7daa9d05116370a36aa91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf17d4fe67932fa6a5dcc05f4c6d611ff"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaf17d4fe67932fa6a5dcc05f4c6d611ff">USBD_HAL_ConfigureEP</a> (const <a class="el" href="group__usb__descriptor.xhtml#ga5396acbd7f05624071e6752fdb38cca5">USBEndpointDescriptor</a> *pDescriptor)</td></tr>
<tr class="memdesc:gaf17d4fe67932fa6a5dcc05f4c6d611ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures an endpoint according to its endpoint Descriptor.  <a href="#gaf17d4fe67932fa6a5dcc05f4c6d611ff">More...</a><br /></td></tr>
<tr class="separator:gaf17d4fe67932fa6a5dcc05f4c6d611ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafcb94bdd4c0ea327621a187814ab4f9f"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gafcb94bdd4c0ea327621a187814ab4f9f">USBD_HAL_SetTransferCallback</a> (uint8_t bEP, <a class="el" href="group__usbd__interface.xhtml#ga366a570f5d3d658362dbf52b68982bed">TransferCallback</a> fCallback, void *pCbData)</td></tr>
<tr class="memdesc:gafcb94bdd4c0ea327621a187814ab4f9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set callback for a USB endpoint for transfer (read/write).  <a href="#gafcb94bdd4c0ea327621a187814ab4f9f">More...</a><br /></td></tr>
<tr class="separator:gafcb94bdd4c0ea327621a187814ab4f9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62263446ee46cfc2ca48856e446f1a79"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga62263446ee46cfc2ca48856e446f1a79">USBD_HAL_SetupMblTransfer</a> (uint8_t bEndpoint, <a class="el" href="group__usbd__interface.xhtml#ga63064ab8800bf35183494fd0fe2f6b32">USBDTransferBuffer</a> *pMbList, uint16_t mblSize, uint16_t startOffset)</td></tr>
<tr class="memdesc:ga62263446ee46cfc2ca48856e446f1a79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure an endpoint to use multi-buffer-list transfer mode.  <a href="#ga62263446ee46cfc2ca48856e446f1a79">More...</a><br /></td></tr>
<tr class="separator:ga62263446ee46cfc2ca48856e446f1a79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8293616e390cb94e93529673367acb4"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gab8293616e390cb94e93529673367acb4">USBD_HAL_Write</a> (uint8_t bEndpoint, const void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:gab8293616e390cb94e93529673367acb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends data through a USB endpoint.  <a href="#gab8293616e390cb94e93529673367acb4">More...</a><br /></td></tr>
<tr class="separator:gab8293616e390cb94e93529673367acb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8ebf6dcf09581aa66fbfc89862516e60"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga8ebf6dcf09581aa66fbfc89862516e60">USBD_HAL_WrWithHdr</a> (uint8_t bEndpoint, const void *pHdr, uint8_t bHdrLen, const void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:ga8ebf6dcf09581aa66fbfc89862516e60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Special write function.  <a href="#ga8ebf6dcf09581aa66fbfc89862516e60">More...</a><br /></td></tr>
<tr class="separator:ga8ebf6dcf09581aa66fbfc89862516e60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c6c76201a5c49c7e40c60c8dbdeae68"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1c6c76201a5c49c7e40c60c8dbdeae68">USBD_HAL_Read</a> (uint8_t bEndpoint, void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:ga1c6c76201a5c49c7e40c60c8dbdeae68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads incoming data on an USB endpoint This methods sets the transfer descriptor and activate the endpoint interrupt.  <a href="#ga1c6c76201a5c49c7e40c60c8dbdeae68">More...</a><br /></td></tr>
<tr class="separator:ga1c6c76201a5c49c7e40c60c8dbdeae68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga214508a8f0f824cdcf40bca9ddac10f6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga214508a8f0f824cdcf40bca9ddac10f6">USBD_HAL_Connect</a> (void)</td></tr>
<tr class="memdesc:ga214508a8f0f824cdcf40bca9ddac10f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable Pull-up, connect.  <a href="#ga214508a8f0f824cdcf40bca9ddac10f6">More...</a><br /></td></tr>
<tr class="separator:ga214508a8f0f824cdcf40bca9ddac10f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaded744daaee15b55f41fb2175f343b69"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaded744daaee15b55f41fb2175f343b69">USBD_HAL_Disconnect</a> (void)</td></tr>
<tr class="memdesc:gaded744daaee15b55f41fb2175f343b69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable Pull-up, disconnect.  <a href="#gaded744daaee15b55f41fb2175f343b69">More...</a><br /></td></tr>
<tr class="separator:gaded744daaee15b55f41fb2175f343b69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga24f5a47f6815de571752ba22c98073f5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga24f5a47f6815de571752ba22c98073f5">USBD_HAL_RemoteWakeUp</a> (void)</td></tr>
<tr class="memdesc:ga24f5a47f6815de571752ba22c98073f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts a remote wake-up procedure.  <a href="#ga24f5a47f6815de571752ba22c98073f5">More...</a><br /></td></tr>
<tr class="separator:ga24f5a47f6815de571752ba22c98073f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac8a317bd985d2ab3d3b82d093015379e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gac8a317bd985d2ab3d3b82d093015379e">USBD_HAL_SetAddress</a> (uint8_t address)</td></tr>
<tr class="memdesc:gac8a317bd985d2ab3d3b82d093015379e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the device address to the given value.  <a href="#gac8a317bd985d2ab3d3b82d093015379e">More...</a><br /></td></tr>
<tr class="separator:gac8a317bd985d2ab3d3b82d093015379e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga05c8714f0e31ed119a4ab594d687691a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga05c8714f0e31ed119a4ab594d687691a">USBD_HAL_SetConfiguration</a> (uint8_t cfgnum)</td></tr>
<tr class="memdesc:ga05c8714f0e31ed119a4ab594d687691a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the current device configuration.  <a href="#ga05c8714f0e31ed119a4ab594d687691a">More...</a><br /></td></tr>
<tr class="separator:ga05c8714f0e31ed119a4ab594d687691a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3699059b9b9b52b7e55af6d070a7fe61"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga3699059b9b9b52b7e55af6d070a7fe61">USBD_HAL_Init</a> (void)</td></tr>
<tr class="memdesc:ga3699059b9b9b52b7e55af6d070a7fe61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the USB HW Access driver.  <a href="#ga3699059b9b9b52b7e55af6d070a7fe61">More...</a><br /></td></tr>
<tr class="separator:ga3699059b9b9b52b7e55af6d070a7fe61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad95d239687843031e2af3aac51ba33ad"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gad95d239687843031e2af3aac51ba33ad">USBD_HAL_Stall</a> (uint8_t bEP)</td></tr>
<tr class="memdesc:gad95d239687843031e2af3aac51ba33ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Causes the given endpoint to acknowledge the next packet it receives with a STALL handshake except setup request.  <a href="#gad95d239687843031e2af3aac51ba33ad">More...</a><br /></td></tr>
<tr class="separator:gad95d239687843031e2af3aac51ba33ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a1fd7ed1af2be8e202879458a6cfda7"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1a1fd7ed1af2be8e202879458a6cfda7">USBD_HAL_Halt</a> (uint8_t bEndpoint, uint8_t ctl)</td></tr>
<tr class="memdesc:ga1a1fd7ed1af2be8e202879458a6cfda7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets/Clear/Get the HALT state on the endpoint.  <a href="#ga1a1fd7ed1af2be8e202879458a6cfda7">More...</a><br /></td></tr>
<tr class="separator:ga1a1fd7ed1af2be8e202879458a6cfda7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga42391c0d642db3869248a8fa3f167ec7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga42391c0d642db3869248a8fa3f167ec7">USBD_HAL_WaitReadData</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga42391c0d642db3869248a8fa3f167ec7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for data to read and then return.  <a href="#ga42391c0d642db3869248a8fa3f167ec7">More...</a><br /></td></tr>
<tr class="separator:ga42391c0d642db3869248a8fa3f167ec7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga946b2d10dfc497b6b24e602be6f3bd05"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga946b2d10dfc497b6b24e602be6f3bd05">USBD_HAL_IsHighSpeed</a> (void)</td></tr>
<tr class="memdesc:ga946b2d10dfc497b6b24e602be6f3bd05"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if the device is running in high or full-speed.  <a href="#ga946b2d10dfc497b6b24e602be6f3bd05">More...</a><br /></td></tr>
<tr class="separator:ga946b2d10dfc497b6b24e602be6f3bd05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab80a4355417d88e290c88c233d5d435b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gab80a4355417d88e290c88c233d5d435b">USBD_HAL_Suspend</a> (void)</td></tr>
<tr class="memdesc:gab80a4355417d88e290c88c233d5d435b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Suspend USB Device HW Interface.  <a href="#gab80a4355417d88e290c88c233d5d435b">More...</a><br /></td></tr>
<tr class="separator:gab80a4355417d88e290c88c233d5d435b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72c29d7c5767f5af8df7ba1603a02619"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga72c29d7c5767f5af8df7ba1603a02619">USBD_HAL_Activate</a> (void)</td></tr>
<tr class="memdesc:ga72c29d7c5767f5af8df7ba1603a02619"><td class="mdescLeft">&#160;</td><td class="mdescRight">Activate USB Device HW Interface</p><ol type="1">
<li>Enable USB Peripheral</li>
<li>Enable USB Clock</li>
<li>Enable transceiver. </li>
</ol>
 <a href="#ga72c29d7c5767f5af8df7ba1603a02619">More...</a><br /></td></tr>
<tr class="separator:ga72c29d7c5767f5af8df7ba1603a02619"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacfe54e3efd82dfd6df3074679402833d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gacfe54e3efd82dfd6df3074679402833d">USBD_HAL_Disable</a> (void)</td></tr>
<tr class="separator:gacfe54e3efd82dfd6df3074679402833d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c996a1e96701350e2c298521b7f8630"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga3c996a1e96701350e2c298521b7f8630">USBD_HAL_Test</a> (uint8_t bIndex)</td></tr>
<tr class="memdesc:ga3c996a1e96701350e2c298521b7f8630"><td class="mdescLeft">&#160;</td><td class="mdescRight">Certification test for High Speed device.  <a href="#ga3c996a1e96701350e2c298521b7f8630">More...</a><br /></td></tr>
<tr class="separator:ga3c996a1e96701350e2c298521b7f8630"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga738c63d27bd4c464410b95c7aea8126b"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga738c63d27bd4c464410b95c7aea8126b">UDP_EnablePeripheralClock</a> (void)</td></tr>
<tr class="memdesc:ga738c63d27bd4c464410b95c7aea8126b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the clock of the UDP peripheral.  <a href="#ga738c63d27bd4c464410b95c7aea8126b">More...</a><br /></td></tr>
<tr class="separator:ga738c63d27bd4c464410b95c7aea8126b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga41f4f97292c90b1e6fc3f2e36434d42e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga41f4f97292c90b1e6fc3f2e36434d42e">UDP_DisablePeripheralClock</a> (void)</td></tr>
<tr class="memdesc:ga41f4f97292c90b1e6fc3f2e36434d42e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the UDP peripheral clock.  <a href="#ga41f4f97292c90b1e6fc3f2e36434d42e">More...</a><br /></td></tr>
<tr class="separator:ga41f4f97292c90b1e6fc3f2e36434d42e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0d375ca2b67daca629ff15bcce4fc310"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga0d375ca2b67daca629ff15bcce4fc310">UDP_EnableUsbClock</a> (void)</td></tr>
<tr class="memdesc:ga0d375ca2b67daca629ff15bcce4fc310"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the 48MHz USB clock.  <a href="#ga0d375ca2b67daca629ff15bcce4fc310">More...</a><br /></td></tr>
<tr class="separator:ga0d375ca2b67daca629ff15bcce4fc310"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4661ff96623955e71a90e436b0d69a8f"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4661ff96623955e71a90e436b0d69a8f">UDP_DisableUsbClock</a> (void)</td></tr>
<tr class="memdesc:ga4661ff96623955e71a90e436b0d69a8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the 48MHz USB clock.  <a href="#ga4661ff96623955e71a90e436b0d69a8f">More...</a><br /></td></tr>
<tr class="separator:ga4661ff96623955e71a90e436b0d69a8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga63cba31a9a5b031f76644e0b90420beb"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga63cba31a9a5b031f76644e0b90420beb">UDP_EnableTransceiver</a> (void)</td></tr>
<tr class="memdesc:ga63cba31a9a5b031f76644e0b90420beb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the UDP transceiver.  <a href="#ga63cba31a9a5b031f76644e0b90420beb">More...</a><br /></td></tr>
<tr class="separator:ga63cba31a9a5b031f76644e0b90420beb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4abbdc6d713587267daa50dfc60eed4e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4abbdc6d713587267daa50dfc60eed4e">UDP_DisableTransceiver</a> (void)</td></tr>
<tr class="memdesc:ga4abbdc6d713587267daa50dfc60eed4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the UDP transceiver.  <a href="#ga4abbdc6d713587267daa50dfc60eed4e">More...</a><br /></td></tr>
<tr class="separator:ga4abbdc6d713587267daa50dfc60eed4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d8e51486d26751c22c5e4e23f67e8cd"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga5d8e51486d26751c22c5e4e23f67e8cd">UDP_EndOfTransfer</a> (uint8_t bEndpoint, uint8_t bStatus)</td></tr>
<tr class="memdesc:ga5d8e51486d26751c22c5e4e23f67e8cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles a completed transfer on the given endpoint, invoking the configured callback if any.  <a href="#ga5d8e51486d26751c22c5e4e23f67e8cd">More...</a><br /></td></tr>
<tr class="separator:ga5d8e51486d26751c22c5e4e23f67e8cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74e4196d75983a88c070f786a0247a69"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga74e4196d75983a88c070f786a0247a69">UDP_ClearRxFlag</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga74e4196d75983a88c070f786a0247a69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the correct reception flag (bank 0 or bank 1) of an endpoint.  <a href="#ga74e4196d75983a88c070f786a0247a69">More...</a><br /></td></tr>
<tr class="separator:ga74e4196d75983a88c070f786a0247a69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c4dab6cc24584488058e654fd11b91b"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga8c4dab6cc24584488058e654fd11b91b">UDP_MblUpdate</a> (<a class="el" href="struct_mbl_transfer.xhtml">MblTransfer</a> *pTransfer, <a class="el" href="group__usbd__interface.xhtml#ga63064ab8800bf35183494fd0fe2f6b32">USBDTransferBuffer</a> *pBi, uint16_t size, uint8_t forceEnd)</td></tr>
<tr class="memdesc:ga8c4dab6cc24584488058e654fd11b91b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update multi-buffer-transfer descriptors.  <a href="#ga8c4dab6cc24584488058e654fd11b91b">More...</a><br /></td></tr>
<tr class="separator:ga8c4dab6cc24584488058e654fd11b91b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga57e97248d68838ee318ebeb26a85edaa"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga57e97248d68838ee318ebeb26a85edaa">UDP_MblWriteFifo</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga57e97248d68838ee318ebeb26a85edaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfers a data payload from the current tranfer buffer to the endpoint FIFO.  <a href="#ga57e97248d68838ee318ebeb26a85edaa">More...</a><br /></td></tr>
<tr class="separator:ga57e97248d68838ee318ebeb26a85edaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4722799f8987177bdfb273007447089f"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4722799f8987177bdfb273007447089f">UDP_WritePayload</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga4722799f8987177bdfb273007447089f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfers a data payload from the current tranfer buffer to the endpoint FIFO.  <a href="#ga4722799f8987177bdfb273007447089f">More...</a><br /></td></tr>
<tr class="separator:ga4722799f8987177bdfb273007447089f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga37b785d1e538172549f05f51f5bfa7b9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga37b785d1e538172549f05f51f5bfa7b9">UDP_ReadPayload</a> (uint8_t bEndpoint, int32_t wPacketSize)</td></tr>
<tr class="memdesc:ga37b785d1e538172549f05f51f5bfa7b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfers a data payload from an endpoint FIFO to the current transfer buffer.  <a href="#ga37b785d1e538172549f05f51f5bfa7b9">More...</a><br /></td></tr>
<tr class="separator:ga37b785d1e538172549f05f51f5bfa7b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaab8b038b4d329d70d2db1b0a75bca99c"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaab8b038b4d329d70d2db1b0a75bca99c">UDP_ReadRequest</a> (<a class="el" href="struct_u_s_b_generic_request.xhtml">USBGenericRequest</a> *pRequest)</td></tr>
<tr class="memdesc:gaab8b038b4d329d70d2db1b0a75bca99c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Received SETUP packet from endpoint 0 FIFO.  <a href="#gaab8b038b4d329d70d2db1b0a75bca99c">More...</a><br /></td></tr>
<tr class="separator:gaab8b038b4d329d70d2db1b0a75bca99c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4096b052093ba2cdd9b19dc11fd086a2"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4096b052093ba2cdd9b19dc11fd086a2">UDP_IsTransferFinished</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga4096b052093ba2cdd9b19dc11fd086a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if an ongoing transfer on an endpoint has been completed.  <a href="#ga4096b052093ba2cdd9b19dc11fd086a2">More...</a><br /></td></tr>
<tr class="separator:ga4096b052093ba2cdd9b19dc11fd086a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafa6295dfe0e4e2eaaec7818940d64b18"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gafa6295dfe0e4e2eaaec7818940d64b18">UDP_EndpointHandler</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:gafa6295dfe0e4e2eaaec7818940d64b18"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> interrupt handler.  <a href="#gafa6295dfe0e4e2eaaec7818940d64b18">More...</a><br /></td></tr>
<tr class="separator:gafa6295dfe0e4e2eaaec7818940d64b18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7517d633d0a994384241035fc72268d1"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga7517d633d0a994384241035fc72268d1">UDP_Write</a> (uint8_t bEndpoint, const void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:ga7517d633d0a994384241035fc72268d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends data through a USB endpoint.  <a href="#ga7517d633d0a994384241035fc72268d1">More...</a><br /></td></tr>
<tr class="separator:ga7517d633d0a994384241035fc72268d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaedece2a858b9ec25badf17f20ef8a7a7"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaedece2a858b9ec25badf17f20ef8a7a7">UDP_AddWr</a> (uint8_t bEndpoint, const void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:gaedece2a858b9ec25badf17f20ef8a7a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends data through a USB endpoint.  <a href="#gaedece2a858b9ec25badf17f20ef8a7a7">More...</a><br /></td></tr>
<tr class="separator:gaedece2a858b9ec25badf17f20ef8a7a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadb6f5bb30dce6e74bbc0e08b057b1477"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gadb6f5bb30dce6e74bbc0e08b057b1477">UDP_Read</a> (uint8_t bEndpoint, void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:gadb6f5bb30dce6e74bbc0e08b057b1477"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads incoming data on an USB endpoint This methods sets the transfer descriptor and activate the endpoint interrupt.  <a href="#gadb6f5bb30dce6e74bbc0e08b057b1477">More...</a><br /></td></tr>
<tr class="separator:gadb6f5bb30dce6e74bbc0e08b057b1477"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga571a674fe9f9a1bba6ad08b3b0b28a80"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga571a674fe9f9a1bba6ad08b3b0b28a80">USBD_IrqHandler</a> (void)</td></tr>
<tr class="memdesc:ga571a674fe9f9a1bba6ad08b3b0b28a80"><td class="mdescLeft">&#160;</td><td class="mdescRight">USBD (UDP) interrupt handler Manages device resume, suspend, end of bus reset.  <a href="#ga571a674fe9f9a1bba6ad08b3b0b28a80">More...</a><br /></td></tr>
<tr class="separator:ga571a674fe9f9a1bba6ad08b3b0b28a80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa50e34166752f405f9fc09d5c9ac3273"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaa50e34166752f405f9fc09d5c9ac3273">UDPHS_EnablePeripheralClock</a> (void)</td></tr>
<tr class="memdesc:gaa50e34166752f405f9fc09d5c9ac3273"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the clock of the UDP peripheral.  <a href="#gaa50e34166752f405f9fc09d5c9ac3273">More...</a><br /></td></tr>
<tr class="separator:gaa50e34166752f405f9fc09d5c9ac3273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeeb6aaee5582dc68d5dbad6b11004f28"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaeeb6aaee5582dc68d5dbad6b11004f28">UDPHS_DisablePeripheralClock</a> (void)</td></tr>
<tr class="memdesc:gaeeb6aaee5582dc68d5dbad6b11004f28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the UDP peripheral clock.  <a href="#gaeeb6aaee5582dc68d5dbad6b11004f28">More...</a><br /></td></tr>
<tr class="separator:gaeeb6aaee5582dc68d5dbad6b11004f28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga16cac88056411dc32b41839645ebc827"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga16cac88056411dc32b41839645ebc827">UDPHS_EnableUsbClock</a> (void)</td></tr>
<tr class="memdesc:ga16cac88056411dc32b41839645ebc827"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the 480MHz USB clock.  <a href="#ga16cac88056411dc32b41839645ebc827">More...</a><br /></td></tr>
<tr class="separator:ga16cac88056411dc32b41839645ebc827"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga272a43243eed36047de454c2259d8910"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga272a43243eed36047de454c2259d8910">UDPHS_DisableUsbClock</a> (void)</td></tr>
<tr class="memdesc:ga272a43243eed36047de454c2259d8910"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the 480MHz USB clock.  <a href="#ga272a43243eed36047de454c2259d8910">More...</a><br /></td></tr>
<tr class="separator:ga272a43243eed36047de454c2259d8910"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gade7d4276b337c9076acbd10a94a27ce0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gade7d4276b337c9076acbd10a94a27ce0">UDPHS_EnableBIAS</a> (void)</td></tr>
<tr class="memdesc:gade7d4276b337c9076acbd10a94a27ce0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the BIAS.  <a href="#gade7d4276b337c9076acbd10a94a27ce0">More...</a><br /></td></tr>
<tr class="separator:gade7d4276b337c9076acbd10a94a27ce0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacaa5bb3f65deea4b87c97f03b48eddbf"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gacaa5bb3f65deea4b87c97f03b48eddbf">UDPHS_DisableBIAS</a> (void)</td></tr>
<tr class="memdesc:gacaa5bb3f65deea4b87c97f03b48eddbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the BIAS.  <a href="#gacaa5bb3f65deea4b87c97f03b48eddbf">More...</a><br /></td></tr>
<tr class="separator:gacaa5bb3f65deea4b87c97f03b48eddbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e6b01495743675aae106e51aee3d1e3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga5e6b01495743675aae106e51aee3d1e3">UDPHS_EndOfTransfer</a> (uint8_t bEndpoint, uint8_t bStatus)</td></tr>
<tr class="memdesc:ga5e6b01495743675aae106e51aee3d1e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles a completed transfer on the given endpoint, invoking the configured callback if any.  <a href="#ga5e6b01495743675aae106e51aee3d1e3">More...</a><br /></td></tr>
<tr class="separator:ga5e6b01495743675aae106e51aee3d1e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace313406c6e807aac0b4424b99cf28db"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gace313406c6e807aac0b4424b99cf28db">USBD_HAL_DetachUsb</a> (void)</td></tr>
<tr class="separator:gace313406c6e807aac0b4424b99cf28db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa56e8002e61d04a9e7f55b8c49cb90ed"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaa56e8002e61d04a9e7f55b8c49cb90ed">USBD_HAL_AttachUsb</a> (void)</td></tr>
<tr class="separator:gaa56e8002e61d04a9e7f55b8c49cb90ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaecf96c6050edaa052af086b04ba72e1b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaecf96c6050edaa052af086b04ba72e1b">USBD_HAL_Enable</a> (void)</td></tr>
<tr class="separator:gaecf96c6050edaa052af086b04ba72e1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:gae5ead95894bdd220e35880db62b8c3d1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="struct_endpoint.xhtml">Endpoint</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gae5ead95894bdd220e35880db62b8c3d1">endpoints</a> [<a class="el" href="group__usbd__hal.xhtml#gab1098bd73746d6f0b0ab28975d2a5043">CHIP_USB_NUMENDPOINTS</a>]</td></tr>
<tr class="memdesc:gae5ead95894bdd220e35880db62b8c3d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Holds the internal state for each endpoint of the UDP.  <a href="#gae5ead95894bdd220e35880db62b8c3d1">More...</a><br /></td></tr>
<tr class="separator:gae5ead95894bdd220e35880db62b8c3d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4280b03060f2ed7b255b622a27ce2b18"><td class="memItemLeft" align="right" valign="top">static const char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4280b03060f2ed7b255b622a27ce2b18">test_packet_buffer</a> []</td></tr>
<tr class="memdesc:ga4280b03060f2ed7b255b622a27ce2b18"><td class="mdescLeft">&#160;</td><td class="mdescRight">7.1.20 Test Mode Support Test codes for the USB HS test mode.  <a href="#ga4280b03060f2ed7b255b622a27ce2b18">More...</a><br /></td></tr>
<tr class="separator:ga4280b03060f2ed7b255b622a27ce2b18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5ead95894bdd220e35880db62b8c3d1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="struct_endpoint.xhtml">Endpoint</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gae5ead95894bdd220e35880db62b8c3d1">endpoints</a> [<a class="el" href="group__usbd__hal.xhtml#gab1098bd73746d6f0b0ab28975d2a5043">CHIP_USB_NUMENDPOINTS</a>]</td></tr>
<tr class="memdesc:gae5ead95894bdd220e35880db62b8c3d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Holds the internal state for each endpoint of the UDP.  <a href="#gae5ead95894bdd220e35880db62b8c3d1">More...</a><br /></td></tr>
<tr class="separator:gae5ead95894bdd220e35880db62b8c3d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae5ead95894bdd220e35880db62b8c3d1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="struct_endpoint.xhtml">Endpoint</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gae5ead95894bdd220e35880db62b8c3d1">endpoints</a> [<a class="el" href="group__usbd__hal.xhtml#gab1098bd73746d6f0b0ab28975d2a5043">CHIP_USB_NUMENDPOINTS</a>]</td></tr>
<tr class="memdesc:gae5ead95894bdd220e35880db62b8c3d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Holds the internal state for each endpoint of the UDP.  <a href="#gae5ead95894bdd220e35880db62b8c3d1">More...</a><br /></td></tr>
<tr class="separator:gae5ead95894bdd220e35880db62b8c3d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4280b03060f2ed7b255b622a27ce2b18"><td class="memItemLeft" align="right" valign="top">static const char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4280b03060f2ed7b255b622a27ce2b18">test_packet_buffer</a> []</td></tr>
<tr class="memdesc:ga4280b03060f2ed7b255b622a27ce2b18"><td class="mdescLeft">&#160;</td><td class="mdescRight">7.1.20 Test Mode Support Test codes for the USB HS test mode.  <a href="#ga4280b03060f2ed7b255b622a27ce2b18">More...</a><br /></td></tr>
<tr class="separator:ga4280b03060f2ed7b255b622a27ce2b18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2b79d64e183ae9505d0c2ace7dd1fb4"><td class="memItemLeft" align="right" valign="top">static const uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaf2b79d64e183ae9505d0c2ace7dd1fb4">forceUsbFS</a> = 0</td></tr>
<tr class="memdesc:gaf2b79d64e183ae9505d0c2ace7dd1fb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Force FS mode.  <a href="#gaf2b79d64e183ae9505d0c2ace7dd1fb4">More...</a><br /></td></tr>
<tr class="separator:gaf2b79d64e183ae9505d0c2ace7dd1fb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1de7090358b3aaa73ff4b5cf1e8dc291"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="struct_udphs_dma_descriptor.xhtml">UdphsDmaDescriptor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1de7090358b3aaa73ff4b5cf1e8dc291">dmaLL</a> [5]</td></tr>
<tr class="memdesc:ga1de7090358b3aaa73ff4b5cf1e8dc291"><td class="mdescLeft">&#160;</td><td class="mdescRight">DMA link list.  <a href="#ga1de7090358b3aaa73ff4b5cf1e8dc291">More...</a><br /></td></tr>
<tr class="separator:ga1de7090358b3aaa73ff4b5cf1e8dc291"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga942c3fa9e248ad872f6f99acb2af883d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="struct_udphs_dma_descriptor.xhtml">UdphsDmaDescriptor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga942c3fa9e248ad872f6f99acb2af883d">pDmaLL</a></td></tr>
<tr class="separator:ga942c3fa9e248ad872f6f99acb2af883d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="ga51c1ba9d0b7d1e090a6ae2baa275b63d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga51c1ba9d0b7d1e090a6ae2baa275b63d">&sect;&nbsp;</a></span>bmEP</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define bmEP</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">bEP</td><td>)</td>
          <td>&#160;&#160;&#160;(1 &lt;&lt; (bEP))</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get bitmap for an endpoint. </p>

</div>
</div>
<a id="gaad991f853260be887e8d336296a1ed18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaad991f853260be887e8d336296a1ed18">&sect;&nbsp;</a></span>CHIP_USB_ENDPOINTS_BANKS</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CHIP_USB_ENDPOINTS_BANKS</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">i</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">((i == 0) ? 1 : \</div><div class="line">   ((i == 1) ? 2 : \</div><div class="line">   ((i == 2) ? 2 : \</div><div class="line">   ((i == 3) ? 1 : \</div><div class="line">   ((i == 4) ? 2 : \</div><div class="line">   ((i == 5) ? 2 : \</div><div class="line">   ((i == 6) ? 2 : \</div><div class="line">   ((i == 7) ? 2 : 0 ))))))))</div></div><!-- fragment -->
<p>Endpoints Number of Bank. </p>

</div>
</div>
<a id="ga05ac6230a39d6e5cf5cd31ec020a80eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga05ac6230a39d6e5cf5cd31ec020a80eb">&sect;&nbsp;</a></span>CHIP_USB_ENDPOINTS_MAXPACKETSIZE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CHIP_USB_ENDPOINTS_MAXPACKETSIZE</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">i</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">((i == 0) ? 64 : \</div><div class="line">   ((i == 1) ? 64 : \</div><div class="line">   ((i == 2) ? 64 : \</div><div class="line">   ((i == 3) ? 64 : \</div><div class="line">   ((i == 4) ? 512 : \</div><div class="line">   ((i == 5) ? 512 : \</div><div class="line">   ((i == 6) ? 64 : \</div><div class="line">   ((i == 7) ? 64 : 0 ))))))))</div></div><!-- fragment -->
<p>Endpoints max paxcket size. </p>

</div>
</div>
<a id="gab1098bd73746d6f0b0ab28975d2a5043"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab1098bd73746d6f0b0ab28975d2a5043">&sect;&nbsp;</a></span>CHIP_USB_NUMENDPOINTS</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CHIP_USB_NUMENDPOINTS&#160;&#160;&#160;8</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Number of USB endpoints. </p>

</div>
</div>
<a id="ga4bcc957f1288dac54003f5a0045b2cd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4bcc957f1288dac54003f5a0045b2cd7">&sect;&nbsp;</a></span>CHIP_USB_PULLUP_INTERNAL</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CHIP_USB_PULLUP_INTERNAL</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates chip has an internal pull-up. </p>

</div>
</div>
<a id="ga0d5301f4b6b7c4dc59bdd76d725c9517"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0d5301f4b6b7c4dc59bdd76d725c9517">&sect;&nbsp;</a></span>CHIP_USB_UDP</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CHIP_USB_UDP</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates chip has an UDP Full Speed. </p>

</div>
</div>
<a id="gac980e0ecf14ac94d338d3dc995e39eee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac980e0ecf14ac94d338d3dc995e39eee">&sect;&nbsp;</a></span>CLEAR_CSR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CLEAR_CSR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">endpoint, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">flags&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">{ \</div><div class="line">    volatile uint32_t reg; \</div><div class="line">    int32_t nop_count; \</div><div class="line">    reg = UDP-&gt;UDP_CSR[endpoint]; \</div><div class="line">    reg |= <a class="code" href="group__usbd__hal.xhtml#gaa6c0c722527692b35b834763a966b3f5">REG_NO_EFFECT_1_ALL</a>; \</div><div class="line">    reg &amp;= ~((uint32_t)(flags)); \</div><div class="line">    UDP-&gt;UDP_CSR[endpoint] = reg; \</div><div class="line">    for( nop_count=0; nop_count&lt;15; nop_count++ ) {\</div><div class="line">        nop();\</div><div class="line">    }\</div><div class="line">}</div><div class="ttc" id="group__usbd__hal_xhtml_gaa6c0c722527692b35b834763a966b3f5"><div class="ttname"><a href="group__usbd__hal.xhtml#gaa6c0c722527692b35b834763a966b3f5">REG_NO_EFFECT_1_ALL</a></div><div class="ttdeci">#define REG_NO_EFFECT_1_ALL</div><div class="ttdoc">Bitmap for all status bits in CSR. </div><div class="ttdef"><b>Definition:</b> hal_udp.c:159</div></div>
</div><!-- fragment -->
<p>Clears the specified bit(s) in the UDP_CSR register. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">endpoint</td><td>The endpoint number of the CSR to process. </td></tr>
    <tr><td class="paramname">flags</td><td>The bitmap to clear to 0. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga137c9e7c0bc9e12f455df0a6e41c0287"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga137c9e7c0bc9e12f455df0a6e41c0287">&sect;&nbsp;</a></span>DMA <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DMA</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga137c9e7c0bc9e12f455df0a6e41c0287"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga137c9e7c0bc9e12f455df0a6e41c0287">&sect;&nbsp;</a></span>DMA <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DMA</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga74fb9f0009ae61530ac99e19744fc7f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga74fb9f0009ae61530ac99e19744fc7f1">&sect;&nbsp;</a></span>DMA_MAX_FIFO_SIZE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DMA_MAX_FIFO_SIZE&#160;&#160;&#160;(65536/1)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Max size of the FMA FIFO. </p>

</div>
</div>
<a id="ga7ed964f770d52d677991b24842a17200"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7ed964f770d52d677991b24842a17200">&sect;&nbsp;</a></span>DMAEndpointInt</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DMAEndpointInt</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">(<a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga075f29a764e75c4f158b232dba4e93c1">USBHS_DEVISR_DMA_1</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga91fe73904a6a1da2fc0cb3b5aaaf1f6e">USBHS_DEVISR_DMA_2</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#gae8c631662feee15c14d60d38d44c7d88">USBHS_DEVISR_DMA_3</a> |\</div><div class="line">                         USBHS_DEVISR_DMA_4 | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#gafaa3187461761534a58264179fc9e76c">USBHS_DEVISR_DMA_5</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga27613764636a9e15d4140ad5bf440774">USBHS_DEVISR_DMA_6</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga6e90562dc53a50c599f9d12f10fb3563">USBHS_DEVISR_DMA_7</a> )</div><div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_gae8c631662feee15c14d60d38d44c7d88"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#gae8c631662feee15c14d60d38d44c7d88">USBHS_DEVISR_DMA_3</a></div><div class="ttdeci">#define USBHS_DEVISR_DMA_3</div><div class="ttdoc">(USBHS_DEVISR) DMA Channel 3 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:164</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_ga91fe73904a6a1da2fc0cb3b5aaaf1f6e"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga91fe73904a6a1da2fc0cb3b5aaaf1f6e">USBHS_DEVISR_DMA_2</a></div><div class="ttdeci">#define USBHS_DEVISR_DMA_2</div><div class="ttdoc">(USBHS_DEVISR) DMA Channel 2 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:163</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_ga6e90562dc53a50c599f9d12f10fb3563"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga6e90562dc53a50c599f9d12f10fb3563">USBHS_DEVISR_DMA_7</a></div><div class="ttdeci">#define USBHS_DEVISR_DMA_7</div><div class="ttdoc">(USBHS_DEVISR) DMA Channel 7 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:168</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_ga27613764636a9e15d4140ad5bf440774"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga27613764636a9e15d4140ad5bf440774">USBHS_DEVISR_DMA_6</a></div><div class="ttdeci">#define USBHS_DEVISR_DMA_6</div><div class="ttdoc">(USBHS_DEVISR) DMA Channel 6 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:167</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_gafaa3187461761534a58264179fc9e76c"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#gafaa3187461761534a58264179fc9e76c">USBHS_DEVISR_DMA_5</a></div><div class="ttdeci">#define USBHS_DEVISR_DMA_5</div><div class="ttdoc">(USBHS_DEVISR) DMA Channel 5 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:166</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_ga075f29a764e75c4f158b232dba4e93c1"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga075f29a764e75c4f158b232dba4e93c1">USBHS_DEVISR_DMA_1</a></div><div class="ttdeci">#define USBHS_DEVISR_DMA_1</div><div class="ttdoc">(USBHS_DEVISR) DMA Channel 1 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:162</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ga86958f3e3fee75490c591439e03b24af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga86958f3e3fee75490c591439e03b24af">&sect;&nbsp;</a></span>EndpointInt</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define EndpointInt</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">(<a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#gab1c55f407682832d960812c3c497c6fe">USBHS_DEVISR_PEP_0</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga345d60ae5fbb8b49e41a2683d10441bc">USBHS_DEVISR_PEP_1</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga2a38367a8545f2bf724d27f571b76b51">USBHS_DEVISR_PEP_2</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#gaee2002bc42efc064ad362756f2e5a662">USBHS_DEVISR_PEP_3</a> |\</div><div class="line">                         USBHS_DEVISR_PEP_4 | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga834ec84fbf0e965e4c8e6e042d75c50e">USBHS_DEVISR_PEP_5</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#gaf8ef950a363593c5700b3d0d62af4452">USBHS_DEVISR_PEP_6</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#gac11cbbc5d94a2bd715d969843c88665e">USBHS_DEVISR_PEP_7</a> |\</div><div class="line">                         USBHS_DEVISR_PEP_8 | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#gad1291f98e59760928a51528e71b5cef5">USBHS_DEVISR_PEP_9</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#gac41f2f6fa5907d3068322508c01cb2d6">USBHS_DEVISR_PEP_10</a> | <a class="code" href="group___s_a_m_e70___u_s_b_h_s.xhtml#gaa076254224944e9314194407c1f4a30b">USBHS_DEVISR_PEP_11</a> )</div><div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_gac41f2f6fa5907d3068322508c01cb2d6"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#gac41f2f6fa5907d3068322508c01cb2d6">USBHS_DEVISR_PEP_10</a></div><div class="ttdeci">#define USBHS_DEVISR_PEP_10</div><div class="ttdoc">(USBHS_DEVISR) Endpoint 10 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:160</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_gad1291f98e59760928a51528e71b5cef5"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#gad1291f98e59760928a51528e71b5cef5">USBHS_DEVISR_PEP_9</a></div><div class="ttdeci">#define USBHS_DEVISR_PEP_9</div><div class="ttdoc">(USBHS_DEVISR) Endpoint 9 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:159</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_ga345d60ae5fbb8b49e41a2683d10441bc"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga345d60ae5fbb8b49e41a2683d10441bc">USBHS_DEVISR_PEP_1</a></div><div class="ttdeci">#define USBHS_DEVISR_PEP_1</div><div class="ttdoc">(USBHS_DEVISR) Endpoint 1 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:151</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_gaf8ef950a363593c5700b3d0d62af4452"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#gaf8ef950a363593c5700b3d0d62af4452">USBHS_DEVISR_PEP_6</a></div><div class="ttdeci">#define USBHS_DEVISR_PEP_6</div><div class="ttdoc">(USBHS_DEVISR) Endpoint 6 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:156</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_gac11cbbc5d94a2bd715d969843c88665e"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#gac11cbbc5d94a2bd715d969843c88665e">USBHS_DEVISR_PEP_7</a></div><div class="ttdeci">#define USBHS_DEVISR_PEP_7</div><div class="ttdoc">(USBHS_DEVISR) Endpoint 7 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:157</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_ga2a38367a8545f2bf724d27f571b76b51"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga2a38367a8545f2bf724d27f571b76b51">USBHS_DEVISR_PEP_2</a></div><div class="ttdeci">#define USBHS_DEVISR_PEP_2</div><div class="ttdoc">(USBHS_DEVISR) Endpoint 2 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:152</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_ga834ec84fbf0e965e4c8e6e042d75c50e"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#ga834ec84fbf0e965e4c8e6e042d75c50e">USBHS_DEVISR_PEP_5</a></div><div class="ttdeci">#define USBHS_DEVISR_PEP_5</div><div class="ttdoc">(USBHS_DEVISR) Endpoint 5 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:155</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_gaee2002bc42efc064ad362756f2e5a662"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#gaee2002bc42efc064ad362756f2e5a662">USBHS_DEVISR_PEP_3</a></div><div class="ttdeci">#define USBHS_DEVISR_PEP_3</div><div class="ttdoc">(USBHS_DEVISR) Endpoint 3 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:153</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_gab1c55f407682832d960812c3c497c6fe"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#gab1c55f407682832d960812c3c497c6fe">USBHS_DEVISR_PEP_0</a></div><div class="ttdeci">#define USBHS_DEVISR_PEP_0</div><div class="ttdoc">(USBHS_DEVISR) Endpoint 0 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:150</div></div>
<div class="ttc" id="group___s_a_m_e70___u_s_b_h_s_xhtml_gaa076254224944e9314194407c1f4a30b"><div class="ttname"><a href="group___s_a_m_e70___u_s_b_h_s.xhtml#gaa076254224944e9314194407c1f4a30b">USBHS_DEVISR_PEP_11</a></div><div class="ttdeci">#define USBHS_DEVISR_PEP_11</div><div class="ttdoc">(USBHS_DEVISR) Endpoint 11 Interrupt </div><div class="ttdef"><b>Definition:</b> component_usbhs.h:161</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ga19e18c1683b682fc01056cbf2b2b92f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga19e18c1683b682fc01056cbf2b2b92f6">&sect;&nbsp;</a></span>EPT_VIRTUAL_SIZE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define EPT_VIRTUAL_SIZE&#160;&#160;&#160;16384</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>fifo space size in DW </p>

</div>
</div>
<a id="gaefb1ead0b778081953b1a3dabca312c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaefb1ead0b778081953b1a3dabca312c4">&sect;&nbsp;</a></span>MBL_FULL <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MBL_FULL&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Buffer list is full. </p>

</div>
</div>
<a id="gaefb1ead0b778081953b1a3dabca312c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaefb1ead0b778081953b1a3dabca312c4">&sect;&nbsp;</a></span>MBL_FULL <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MBL_FULL&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Buffer list is full. </p>

</div>
</div>
<a id="gaefb1ead0b778081953b1a3dabca312c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaefb1ead0b778081953b1a3dabca312c4">&sect;&nbsp;</a></span>MBL_FULL <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MBL_FULL&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Buffer list is full. </p>

</div>
</div>
<a id="ga58081bc990ddb9737252e5794b703850"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga58081bc990ddb9737252e5794b703850">&sect;&nbsp;</a></span>MBL_NbBuffer <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MBL_NbBuffer</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">i, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">o, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">size&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;(((i)&gt;(o))?((i)-(o)):((i)+(size)-(o)))</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get Number of buffer in Multi-Buffer-List. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input index </td></tr>
    <tr><td class="paramname">o</td><td>output index </td></tr>
    <tr><td class="paramname">size</td><td>list size </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga58081bc990ddb9737252e5794b703850"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga58081bc990ddb9737252e5794b703850">&sect;&nbsp;</a></span>MBL_NbBuffer <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MBL_NbBuffer</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">i, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">o, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">size&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;(((i)&gt;(o))?((i)-(o)):((i)+(size)-(o)))</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get Number of buffer in Multi-Buffer-List. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input index </td></tr>
    <tr><td class="paramname">o</td><td>output index </td></tr>
    <tr><td class="paramname">size</td><td>list size </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga58081bc990ddb9737252e5794b703850"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga58081bc990ddb9737252e5794b703850">&sect;&nbsp;</a></span>MBL_NbBuffer <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MBL_NbBuffer</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">i, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">o, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">size&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;(((i)&gt;(o))?((i)-(o)):((i)+(size)-(o)))</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get Number of buffer in Multi-Buffer-List. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>input index </td></tr>
    <tr><td class="paramname">o</td><td>output index </td></tr>
    <tr><td class="paramname">size</td><td>list size </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga7fea9931b5288124d11803122002ac70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7fea9931b5288124d11803122002ac70">&sect;&nbsp;</a></span>MBL_NULL <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MBL_NULL&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Buffer list is null. </p>

</div>
</div>
<a id="ga7fea9931b5288124d11803122002ac70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7fea9931b5288124d11803122002ac70">&sect;&nbsp;</a></span>MBL_NULL <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MBL_NULL&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Buffer list is null. </p>

</div>
</div>
<a id="ga7fea9931b5288124d11803122002ac70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7fea9931b5288124d11803122002ac70">&sect;&nbsp;</a></span>MBL_NULL <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MBL_NULL&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Buffer list is null. </p>

</div>
</div>
<a id="gaa5f881a794f4e612b63750861ff9dc43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa5f881a794f4e612b63750861ff9dc43">&sect;&nbsp;</a></span>NUM_IT_MAX</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define NUM_IT_MAX&#160;&#160;&#160;(UDPHS-&gt;UDPHS_IPFEATURES &amp; UDPHS_IPFEATURES_EPT_NBR_MAX_Msk)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Maximum number of endpoints interrupts. </p>

</div>
</div>
<a id="ga892015a6ce22d51cc09ee28ecceeb368"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga892015a6ce22d51cc09ee28ecceeb368">&sect;&nbsp;</a></span>NUM_IT_MAX_DMA</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define NUM_IT_MAX_DMA</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">((UDPHS-&gt;UDPHS_IPFEATURES \</div><div class="line">        &amp; UDPHS_IPFEATURES_DMA_CHANNEL_NBR_Msk) \</div><div class="line">      &gt;&gt;UDPHS_IPFEATURES_DMA_CHANNEL_NBR_Pos)</div></div><!-- fragment -->
<p>Maximum number of endpoint DMA interrupts. </p>

</div>
</div>
<a id="gaa6c0c722527692b35b834763a966b3f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa6c0c722527692b35b834763a966b3f5">&sect;&nbsp;</a></span>REG_NO_EFFECT_1_ALL</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define REG_NO_EFFECT_1_ALL</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">UDP_CSR_RX_DATA_BK0 | UDP_CSR_RX_DATA_BK1 \</div><div class="line">                                |UDP_CSR_STALLSENTISOERROR | UDP_CSR_RXSETUP \</div><div class="line">                                |UDP_CSR_TXCOMP</div></div><!-- fragment -->
<p>Bitmap for all status bits in CSR. </p>
<h1><a class="anchor" id="udp_csr_register_access_sec"></a>
"UDP CSR register access"</h1>
<p>This page lists the macros to access UDP CSR register.</p>
<p>In a preemptive environment, set or clear the flag and wait for a time of 1 UDPCK clock cycle and 1 peripheral clock cycle. However, RX_DATA_BK0, TXPKTRDY, RX_DATA_BK1 require wait times of 3 UDPCK clock cycles and 5 peripheral clock cycles before accessing DPR. See datasheet</p>
<p>!Macros</p><ul>
<li>CLEAR_CSR</li>
<li>SET_CSR </li>
</ul>

</div>
</div>
<a id="ga8eb78c466adbf66f9b5c780267df7279"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8eb78c466adbf66f9b5c780267df7279">&sect;&nbsp;</a></span>SET_CSR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SET_CSR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">endpoint, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">flags&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">{ \</div><div class="line">        volatile uint32_t reg; \</div><div class="line">        int32_t nop_count; \</div><div class="line">        reg = UDP-&gt;UDP_CSR[endpoint]; \</div><div class="line">        reg |= <a class="code" href="group__usbd__hal.xhtml#gaa6c0c722527692b35b834763a966b3f5">REG_NO_EFFECT_1_ALL</a>; \</div><div class="line">        reg |= (flags); \</div><div class="line">        UDP-&gt;UDP_CSR[endpoint] = reg; \</div><div class="line">        for( nop_count=0; nop_count&lt;15; nop_count++ ) {\</div><div class="line">            nop();\</div><div class="line">        }\</div><div class="line">    }</div><div class="ttc" id="group__usbd__hal_xhtml_gaa6c0c722527692b35b834763a966b3f5"><div class="ttname"><a href="group__usbd__hal.xhtml#gaa6c0c722527692b35b834763a966b3f5">REG_NO_EFFECT_1_ALL</a></div><div class="ttdeci">#define REG_NO_EFFECT_1_ALL</div><div class="ttdoc">Bitmap for all status bits in CSR. </div><div class="ttdef"><b>Definition:</b> hal_udp.c:159</div></div>
</div><!-- fragment -->
<p>Sets the specified bit(s) in the UDP_CSR register. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">endpoint</td><td>The endpoint number of the CSR to process. </td></tr>
    <tr><td class="paramname">flags</td><td>The bitmap to set to 1. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga71f704a7c8aaf4b17965e2e55917e986"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga71f704a7c8aaf4b17965e2e55917e986">&sect;&nbsp;</a></span>SHIFT_DMA</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SHIFT_DMA&#160;&#160;&#160;24</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bits that should be shifted to access DMA control bits. </p>

</div>
</div>
<a id="ga1a3966a3e34cf6f45d5c49158a47370b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1a3966a3e34cf6f45d5c49158a47370b">&sect;&nbsp;</a></span>SHIFT_INTERUPT <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SHIFT_INTERUPT&#160;&#160;&#160;12</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bits that should be shifted to access interrupt bits. </p>

</div>
</div>
<a id="ga1a3966a3e34cf6f45d5c49158a47370b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1a3966a3e34cf6f45d5c49158a47370b">&sect;&nbsp;</a></span>SHIFT_INTERUPT <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SHIFT_INTERUPT&#160;&#160;&#160;8</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bits that should be shifted to access interrupt bits. </p>

</div>
</div>
<a id="ga9c239fd97064879e5477a2ec1ab8b80e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9c239fd97064879e5477a2ec1ab8b80e">&sect;&nbsp;</a></span>UDP_CSR_RXDATA_BK</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDP_CSR_RXDATA_BK&#160;&#160;&#160;(UDP_CSR_RX_DATA_BK0 | UDP_CSR_RX_DATA_BK1)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bit mask for both banks of the UDP_CSR register. </p>
<h1><a class="anchor" id="UDP_registers_sec"></a>
"UDP Register field values"</h1>
<p>This section lists the initialize values of UDP registers.</p>
<h2><a class="anchor" id="Values"></a>
Values</h2>
<ul>
<li>UDP_RXDATA </li>
</ul>

</div>
</div>
<a id="ga02cc470b0850e42c28b933bd34999bb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga02cc470b0850e42c28b933bd34999bb8">&sect;&nbsp;</a></span>UDP_ENDPOINT_DISABLED</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDP_ENDPOINT_DISABLED&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is disabled. </p>
<h1><a class="anchor" id="endpoint_states_sec"></a>
"UDP Endpoint states"</h1>
<p>This page lists the endpoint states.</p>
<h2><a class="anchor" id="States"></a>
States</h2>
<ul>
<li>UDP_ENDPOINT_DISABLED</li>
<li>UDP_ENDPOINT_HALTED</li>
<li>UDP_ENDPOINT_IDLE</li>
<li>UDP_ENDPOINT_SENDING</li>
<li>UDP_ENDPOINT_RECEIVING</li>
<li>UDP_ENDPOINT_SENDINGM</li>
<li>UDP_ENDPOINT_RECEIVINGM </li>
</ul>

</div>
</div>
<a id="gad84f009de857253b3bc1a553c9a598f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad84f009de857253b3bc1a553c9a598f8">&sect;&nbsp;</a></span>UDP_ENDPOINT_HALTED</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDP_ENDPOINT_HALTED&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is halted (i.e. </p>
<p>STALLs every request) </p>

</div>
</div>
<a id="gaf2a8875863be602aea2d35caf2ab6a5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf2a8875863be602aea2d35caf2ab6a5a">&sect;&nbsp;</a></span>UDP_ENDPOINT_IDLE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDP_ENDPOINT_IDLE&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is idle (i.e. </p>
<p>ready for transmission) </p>

</div>
</div>
<a id="gace0e1ba8c4b4b45dd4b4e33bcaa5c1ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gace0e1ba8c4b4b45dd4b4e33bcaa5c1ff">&sect;&nbsp;</a></span>UDP_ENDPOINT_RECEIVING</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDP_ENDPOINT_RECEIVING&#160;&#160;&#160;4</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving data. </p>

</div>
</div>
<a id="gac3cf34c9b039691e6bfc26273de8b9c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac3cf34c9b039691e6bfc26273de8b9c7">&sect;&nbsp;</a></span>UDP_ENDPOINT_RECEIVINGM</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDP_ENDPOINT_RECEIVINGM&#160;&#160;&#160;6</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving MBL. </p>

</div>
</div>
<a id="gafbeaad990d4a3ecf3468b0028b294e5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafbeaad990d4a3ecf3468b0028b294e5f">&sect;&nbsp;</a></span>UDP_ENDPOINT_SENDING</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDP_ENDPOINT_SENDING&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending data. </p>

</div>
</div>
<a id="ga15c8429cff9c7eeb3a870550b4d061ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga15c8429cff9c7eeb3a870550b4d061ae">&sect;&nbsp;</a></span>UDP_ENDPOINT_SENDINGM</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDP_ENDPOINT_SENDINGM&#160;&#160;&#160;5</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending MBL. </p>

</div>
</div>
<a id="ga1fab52c7032d2314d73ced9188dce52f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1fab52c7032d2314d73ced9188dce52f">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_DISABLED <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_DISABLED&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is disabled. </p>
<h1><a class="anchor" id="endpoint_states_sec"></a>
"UDP Endpoint states"</h1>
<p>This page lists the endpoint states.</p>
<h2><a class="anchor" id="States"></a>
States</h2>
<ul>
<li>UDPHS_ENDPOINT_DISABLED</li>
<li>UDPHS_ENDPOINT_HALTED</li>
<li>UDPHS_ENDPOINT_IDLE</li>
<li>UDPHS_ENDPOINT_SENDING</li>
<li>UDPHS_ENDPOINT_RECEIVING</li>
<li>UDPHS_ENDPOINT_SENDINGM</li>
<li>UDPHS_ENDPOINT_RECEIVINGM </li>
</ul>

</div>
</div>
<a id="ga1fab52c7032d2314d73ced9188dce52f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1fab52c7032d2314d73ced9188dce52f">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_DISABLED <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_DISABLED&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is disabled. </p>
<h1><a class="anchor" id="endpoint_states_sec"></a>
"UDP Endpoint states"</h1>
<p>This page lists the endpoint states.</p>
<h2><a class="anchor" id="States"></a>
States</h2>
<ul>
<li>UDPHS_ENDPOINT_DISABLED</li>
<li>UDPHS_ENDPOINT_HALTED</li>
<li>UDPHS_ENDPOINT_IDLE</li>
<li>UDPHS_ENDPOINT_SENDING</li>
<li>UDPHS_ENDPOINT_RECEIVING</li>
<li>UDPHS_ENDPOINT_SENDINGM</li>
<li>UDPHS_ENDPOINT_RECEIVINGM </li>
</ul>

</div>
</div>
<a id="ga54f28f8061173dba5b54970d732f3016"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga54f28f8061173dba5b54970d732f3016">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_HALTED <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_HALTED&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is halted (i.e. </p>
<p>STALLs every request) </p>

</div>
</div>
<a id="ga54f28f8061173dba5b54970d732f3016"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga54f28f8061173dba5b54970d732f3016">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_HALTED <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_HALTED&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is halted (i.e. </p>
<p>STALLs every request) </p>

</div>
</div>
<a id="ga4042f4c27fb1a59fa4e837a179f9cec1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4042f4c27fb1a59fa4e837a179f9cec1">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_IDLE <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_IDLE&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is idle (i.e. </p>
<p>ready for transmission) </p>

</div>
</div>
<a id="ga4042f4c27fb1a59fa4e837a179f9cec1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4042f4c27fb1a59fa4e837a179f9cec1">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_IDLE <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_IDLE&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is idle (i.e. </p>
<p>ready for transmission) </p>

</div>
</div>
<a id="ga57bdba8e2cf76761b4d9a1aebff63a54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga57bdba8e2cf76761b4d9a1aebff63a54">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_RECEIVING <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_RECEIVING&#160;&#160;&#160;4</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving data. </p>

</div>
</div>
<a id="ga57bdba8e2cf76761b4d9a1aebff63a54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga57bdba8e2cf76761b4d9a1aebff63a54">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_RECEIVING <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_RECEIVING&#160;&#160;&#160;4</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving data. </p>

</div>
</div>
<a id="ga318439ae43fc0f1f83cc4c61f22b50b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga318439ae43fc0f1f83cc4c61f22b50b3">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_RECEIVINGM <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_RECEIVINGM&#160;&#160;&#160;6</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving MBL. </p>

</div>
</div>
<a id="ga318439ae43fc0f1f83cc4c61f22b50b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga318439ae43fc0f1f83cc4c61f22b50b3">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_RECEIVINGM <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_RECEIVINGM&#160;&#160;&#160;6</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving MBL. </p>

</div>
</div>
<a id="ga761fbc08534b1b3308ddd4897e1dd4bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga761fbc08534b1b3308ddd4897e1dd4bd">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_SENDING <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_SENDING&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending data. </p>

</div>
</div>
<a id="ga761fbc08534b1b3308ddd4897e1dd4bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga761fbc08534b1b3308ddd4897e1dd4bd">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_SENDING <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_SENDING&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending data. </p>

</div>
</div>
<a id="ga84adc62db8c2e90f323b2b0a802df0a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga84adc62db8c2e90f323b2b0a802df0a4">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_SENDINGM <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_SENDINGM&#160;&#160;&#160;5</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending MBL. </p>

</div>
</div>
<a id="ga84adc62db8c2e90f323b2b0a802df0a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga84adc62db8c2e90f323b2b0a802df0a4">&sect;&nbsp;</a></span>UDPHS_ENDPOINT_SENDINGM <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UDPHS_ENDPOINT_SENDINGM&#160;&#160;&#160;5</td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending MBL. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga8acadaacd74f48254d2f05a2f7ee8803"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8acadaacd74f48254d2f05a2f7ee8803">&sect;&nbsp;</a></span>COMPILER_ALIGNED()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">COMPILER_ALIGNED </td>
          <td>(</td>
          <td class="paramtype">16&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>DMA link list. </p>

</div>
</div>
<a id="gaedece2a858b9ec25badf17f20ef8a7a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaedece2a858b9ec25badf17f20ef8a7a7">&sect;&nbsp;</a></span>UDP_AddWr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDP_AddWr </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sends data through a USB endpoint. </p>
<p>Sets up the transfer descriptor list, writes one or two data payloads (depending on the number of FIFO bank for the endpoint) and then starts the actual transfer. The operation is complete when all the transfer buffer in the list has been sent.</p>
<p><em>If the size of the buffer is greater than the size of the endpoint (or twice the size if the endpoint has two FIFO banks), then the buffer must be kept allocated until the transfer is finished</em>. This means that it is not possible to declare it on the stack (i.e. as a local variable of a function which returns after starting a transfer).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pEndpoint</td><td>Pointer to <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> struct. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a buffer with the data to send. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the transfer has been started; otherwise, the corresponding error status code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaedece2a858b9ec25badf17f20ef8a7a7_cgraph.svg" width="287" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaedece2a858b9ec25badf17f20ef8a7a7_icgraph.svg" width="290" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga74e4196d75983a88c070f786a0247a69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga74e4196d75983a88c070f786a0247a69">&sect;&nbsp;</a></span>UDP_ClearRxFlag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_ClearRxFlag </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clears the correct reception flag (bank 0 or bank 1) of an endpoint. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Index of endpoint </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga74e4196d75983a88c070f786a0247a69_icgraph.svg" width="352" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga41f4f97292c90b1e6fc3f2e36434d42e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga41f4f97292c90b1e6fc3f2e36434d42e">&sect;&nbsp;</a></span>UDP_DisablePeripheralClock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_DisablePeripheralClock </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disables the UDP peripheral clock. </p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga41f4f97292c90b1e6fc3f2e36434d42e_cgraph.svg" width="430" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga41f4f97292c90b1e6fc3f2e36434d42e_icgraph.svg" width="395" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga4abbdc6d713587267daa50dfc60eed4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4abbdc6d713587267daa50dfc60eed4e">&sect;&nbsp;</a></span>UDP_DisableTransceiver()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_DisableTransceiver </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disables the UDP transceiver. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga4abbdc6d713587267daa50dfc60eed4e_icgraph.svg" width="367" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga4661ff96623955e71a90e436b0d69a8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4661ff96623955e71a90e436b0d69a8f">&sect;&nbsp;</a></span>UDP_DisableUsbClock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_DisableUsbClock </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disables the 48MHz USB clock. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga4661ff96623955e71a90e436b0d69a8f_icgraph.svg" width="355" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga738c63d27bd4c464410b95c7aea8126b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga738c63d27bd4c464410b95c7aea8126b">&sect;&nbsp;</a></span>UDP_EnablePeripheralClock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDP_EnablePeripheralClock </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enables the clock of the UDP peripheral. </p>
<dl class="section return"><dt>Returns</dt><dd>1 if peripheral status changed. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga738c63d27bd4c464410b95c7aea8126b_cgraph.svg" width="422" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga738c63d27bd4c464410b95c7aea8126b_icgraph.svg" width="391" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga63cba31a9a5b031f76644e0b90420beb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga63cba31a9a5b031f76644e0b90420beb">&sect;&nbsp;</a></span>UDP_EnableTransceiver()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_EnableTransceiver </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enables the UDP transceiver. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga63cba31a9a5b031f76644e0b90420beb_icgraph.svg" width="363" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga0d375ca2b67daca629ff15bcce4fc310"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0d375ca2b67daca629ff15bcce4fc310">&sect;&nbsp;</a></span>UDP_EnableUsbClock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_EnableUsbClock </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enables the 48MHz USB clock. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga0d375ca2b67daca629ff15bcce4fc310_icgraph.svg" width="351" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga5d8e51486d26751c22c5e4e23f67e8cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5d8e51486d26751c22c5e4e23f67e8cd">&sect;&nbsp;</a></span>UDP_EndOfTransfer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_EndOfTransfer </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bStatus</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Handles a completed transfer on the given endpoint, invoking the configured callback if any. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Number of the endpoint for which the transfer has completed. </td></tr>
    <tr><td class="paramname">bStatus</td><td>Status code returned by the transfer operation </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga5d8e51486d26751c22c5e4e23f67e8cd_icgraph.svg" width="548" height="63"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gafa6295dfe0e4e2eaaec7818940d64b18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafa6295dfe0e4e2eaaec7818940d64b18">&sect;&nbsp;</a></span>UDP_EndpointHandler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_EndpointHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> interrupt handler. </p>
<p>Handle IN/OUT transfers, received SETUP packets and STALLing </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Index of endpoint </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gafa6295dfe0e4e2eaaec7818940d64b18_cgraph.svg" width="459" height="443"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gafa6295dfe0e4e2eaaec7818940d64b18_icgraph.svg" width="355" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga4096b052093ba2cdd9b19dc11fd086a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4096b052093ba2cdd9b19dc11fd086a2">&sect;&nbsp;</a></span>UDP_IsTransferFinished()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDP_IsTransferFinished </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if an ongoing transfer on an endpoint has been completed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1 if the current transfer on the given endpoint is complete; otherwise 0. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga4096b052093ba2cdd9b19dc11fd086a2_icgraph.svg" width="390" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga8c4dab6cc24584488058e654fd11b91b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8c4dab6cc24584488058e654fd11b91b">&sect;&nbsp;</a></span>UDP_MblUpdate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDP_MblUpdate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_mbl_transfer.xhtml">MblTransfer</a> *&#160;</td>
          <td class="paramname"><em>pTransfer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__usbd__interface.xhtml#ga63064ab8800bf35183494fd0fe2f6b32">USBDTransferBuffer</a> *&#160;</td>
          <td class="paramname"><em>pBi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>forceEnd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update multi-buffer-transfer descriptors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pTransfer</td><td>Pointer to instance <a class="el" href="struct_mbl_transfer.xhtml" title="Describes Multi Buffer List transfer on a UDP endpoint. ">MblTransfer</a>. </td></tr>
    <tr><td class="paramname">size</td><td>Size of bytes that processed. </td></tr>
    <tr><td class="paramname">forceEnd</td><td>Force the buffer END. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1 if current buffer ended. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga8c4dab6cc24584488058e654fd11b91b_icgraph.svg" width="316" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga57e97248d68838ee318ebeb26a85edaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga57e97248d68838ee318ebeb26a85edaa">&sect;&nbsp;</a></span>UDP_MblWriteFifo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDP_MblWriteFifo </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transfers a data payload from the current tranfer buffer to the endpoint FIFO. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Number of the endpoint which is sending data. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga57e97248d68838ee318ebeb26a85edaa_cgraph.svg" width="316" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga57e97248d68838ee318ebeb26a85edaa_icgraph.svg" width="352" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gadb6f5bb30dce6e74bbc0e08b057b1477"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadb6f5bb30dce6e74bbc0e08b057b1477">&sect;&nbsp;</a></span>UDP_Read()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDP_Read </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads incoming data on an USB endpoint This methods sets the transfer descriptor and activate the endpoint interrupt. </p>
<p>The actual transfer is then carried out by the endpoint interrupt handler. The Read operation finishes either when the buffer is full, or a short packet (inferior to endpoint maximum size) is received.</p>
<p><em>The buffer must be kept allocated until the transfer is finished</em>. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a data buffer. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer in bytes. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the read operation has been started; otherwise, the corresponding error code. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gadb6f5bb30dce6e74bbc0e08b057b1477_icgraph.svg" width="280" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga37b785d1e538172549f05f51f5bfa7b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga37b785d1e538172549f05f51f5bfa7b9">&sect;&nbsp;</a></span>UDP_ReadPayload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_ReadPayload </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>wPacketSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transfers a data payload from an endpoint FIFO to the current transfer buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">wPacketSize</td><td>Size of received data packet </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga37b785d1e538172549f05f51f5bfa7b9_icgraph.svg" width="359" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gaab8b038b4d329d70d2db1b0a75bca99c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaab8b038b4d329d70d2db1b0a75bca99c">&sect;&nbsp;</a></span>UDP_ReadRequest()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_ReadRequest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_u_s_b_generic_request.xhtml">USBGenericRequest</a> *&#160;</td>
          <td class="paramname"><em>pRequest</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Received SETUP packet from endpoint 0 FIFO. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pRequest</td><td>Generic USB SETUP request sent over Control endpoints </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaab8b038b4d329d70d2db1b0a75bca99c_icgraph.svg" width="360" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga7517d633d0a994384241035fc72268d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7517d633d0a994384241035fc72268d1">&sect;&nbsp;</a></span>UDP_Write()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDP_Write </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sends data through a USB endpoint. </p>
<p>Sets up the transfer descriptor, writes one or two data payloads (depending on the number of FIFO bank for the endpoint) and then starts the actual transfer. The operation is complete when all the data has been sent.</p>
<p><em>If the size of the buffer is greater than the size of the endpoint (or twice the size if the endpoint has two FIFO banks), then the buffer must be kept allocated until the transfer is finished</em>. This means that it is not possible to declare it on the stack (i.e. as a local variable of a function which returns after starting a transfer).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pEndpoint</td><td>Pointer to <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> struct. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a buffer with the data to send. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the transfer has been started; otherwise, the corresponding error status code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga7517d633d0a994384241035fc72268d1_cgraph.svg" width="284" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga7517d633d0a994384241035fc72268d1_icgraph.svg" width="280" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga4722799f8987177bdfb273007447089f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4722799f8987177bdfb273007447089f">&sect;&nbsp;</a></span>UDP_WritePayload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDP_WritePayload </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transfers a data payload from the current tranfer buffer to the endpoint FIFO. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Number of the endpoint which is sending data. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga4722799f8987177bdfb273007447089f_icgraph.svg" width="359" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gada855d5452052e08f36853a81e3b016d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gada855d5452052e08f36853a81e3b016d">&sect;&nbsp;</a></span>UDPHS_AddWr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_AddWr </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sends data through a USB endpoint. </p>
<p>Sets up the transfer descriptor list, writes one or two data payloads (depending on the number of FIFO bank for the endpoint) and then starts the actual transfer. The operation is complete when all the transfer buffer in the list has been sent.</p>
<p><em>If the size of the buffer is greater than the size of the endpoint (or twice the size if the endpoint has two FIFO banks), then the buffer must be kept allocated until the transfer is finished</em>. This means that it is not possible to declare it on the stack (i.e. as a local variable of a function which returns after starting a transfer).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pEndpoint</td><td>Pointer to <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> struct. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a buffer with the data to send. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the transfer has been started; otherwise, the corresponding error status code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gada855d5452052e08f36853a81e3b016d_cgraph.svg" width="354" height="240"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gada855d5452052e08f36853a81e3b016d_icgraph.svg" width="306" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gacaa5bb3f65deea4b87c97f03b48eddbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacaa5bb3f65deea4b87c97f03b48eddbf">&sect;&nbsp;</a></span>UDPHS_DisableBIAS()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_DisableBIAS </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disables the BIAS. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gacaa5bb3f65deea4b87c97f03b48eddbf_icgraph.svg" width="319" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gaeeb6aaee5582dc68d5dbad6b11004f28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaeeb6aaee5582dc68d5dbad6b11004f28">&sect;&nbsp;</a></span>UDPHS_DisablePeripheralClock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_DisablePeripheralClock </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disables the UDP peripheral clock. </p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaeeb6aaee5582dc68d5dbad6b11004f28_cgraph.svg" width="448" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaeeb6aaee5582dc68d5dbad6b11004f28_icgraph.svg" width="387" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga272a43243eed36047de454c2259d8910"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga272a43243eed36047de454c2259d8910">&sect;&nbsp;</a></span>UDPHS_DisableUsbClock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_DisableUsbClock </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Disables the 480MHz USB clock. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga272a43243eed36047de454c2259d8910_icgraph.svg" width="348" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga5e6f054068ed99c861c50f2eeeb30216"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5e6f054068ed99c861c50f2eeeb30216">&sect;&nbsp;</a></span>UDPHS_DmaHandler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_DmaHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> DMA interrupt handler. </p>
<p>This function handles DMA interrupts. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Index of endpoint </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga5e6f054068ed99c861c50f2eeeb30216_cgraph.svg" width="603" height="180"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga5e6f054068ed99c861c50f2eeeb30216_icgraph.svg" width="343" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga3050097643684759b64beda54283f1e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3050097643684759b64beda54283f1e4">&sect;&nbsp;</a></span>UDPHS_DmaSingle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_DmaSingle </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_transfer.xhtml">Transfer</a> *&#160;</td>
          <td class="paramname"><em>pXfr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dwCfg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>DMA Single transfer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>EP number.  Pointer to transfer instance.  DMA Control configuration (excluding length). </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga3050097643684759b64beda54283f1e4_cgraph.svg" width="387" height="190"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga3050097643684759b64beda54283f1e4_icgraph.svg" width="363" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gade7d4276b337c9076acbd10a94a27ce0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gade7d4276b337c9076acbd10a94a27ce0">&sect;&nbsp;</a></span>UDPHS_EnableBIAS()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_EnableBIAS </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enables the BIAS. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gade7d4276b337c9076acbd10a94a27ce0_icgraph.svg" width="315" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gaa50e34166752f405f9fc09d5c9ac3273"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa50e34166752f405f9fc09d5c9ac3273">&sect;&nbsp;</a></span>UDPHS_EnablePeripheralClock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_EnablePeripheralClock </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enables the clock of the UDP peripheral. </p>
<dl class="section return"><dt>Returns</dt><dd>1 if peripheral status changed. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaa50e34166752f405f9fc09d5c9ac3273_cgraph.svg" width="440" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaa50e34166752f405f9fc09d5c9ac3273_icgraph.svg" width="383" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga16cac88056411dc32b41839645ebc827"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga16cac88056411dc32b41839645ebc827">&sect;&nbsp;</a></span>UDPHS_EnableUsbClock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_EnableUsbClock </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enables the 480MHz USB clock. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga16cac88056411dc32b41839645ebc827_icgraph.svg" width="344" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga5e6b01495743675aae106e51aee3d1e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5e6b01495743675aae106e51aee3d1e3">&sect;&nbsp;</a></span>UDPHS_EndOfTransfer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_EndOfTransfer </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bStatus</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Handles a completed transfer on the given endpoint, invoking the configured callback if any. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Number of the endpoint for which the transfer has completed. </td></tr>
    <tr><td class="paramname">bStatus</td><td>Status code returned by the transfer operation </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga5e6b01495743675aae106e51aee3d1e3_icgraph.svg" width="560" height="342"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga4daf62d090af26b8e55aaf9549926622"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4daf62d090af26b8e55aaf9549926622">&sect;&nbsp;</a></span>UDPHS_EndpointHandler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_EndpointHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> interrupt handler. </p>
<p>Handle IN/OUT transfers, received SETUP packets and STALLing </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Index of endpoint </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga4daf62d090af26b8e55aaf9549926622_cgraph.svg" width="424" height="595"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga4daf62d090af26b8e55aaf9549926622_icgraph.svg" width="368" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga03f1cd55f5d5ed368dec0aa6ad6ccb3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga03f1cd55f5d5ed368dec0aa6ad6ccb3f">&sect;&nbsp;</a></span>UDPHS_MblUpdate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_MblUpdate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_mbl_transfer.xhtml">MblTransfer</a> *&#160;</td>
          <td class="paramname"><em>pTransfer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__usbd__interface.xhtml#ga63064ab8800bf35183494fd0fe2f6b32">USBDTransferBuffer</a> *&#160;</td>
          <td class="paramname"><em>pBi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>forceEnd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update multi-buffer-transfer descriptors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pTransfer</td><td>Pointer to instance <a class="el" href="struct_mbl_transfer.xhtml" title="Describes Multi Buffer List transfer on a UDP endpoint. ">MblTransfer</a>. </td></tr>
    <tr><td class="paramname">size</td><td>Size of bytes that processed. </td></tr>
    <tr><td class="paramname">forceEnd</td><td>Force the buffer END. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1 if current buffer ended. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga03f1cd55f5d5ed368dec0aa6ad6ccb3f_icgraph.svg" width="355" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga5295f6d8b5a54cbe6b365e4ae1bb9633"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5295f6d8b5a54cbe6b365e4ae1bb9633">&sect;&nbsp;</a></span>UDPHS_MblWriteFifo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_MblWriteFifo </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transfers a data payload from the current transfer buffer to the endpoint FIFO. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Number of the endpoint which is sending data. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga5295f6d8b5a54cbe6b365e4ae1bb9633_cgraph.svg" width="355" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga5295f6d8b5a54cbe6b365e4ae1bb9633_icgraph.svg" width="326" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gadf1deb2219e27bcf29d2598d4aa04c1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadf1deb2219e27bcf29d2598d4aa04c1d">&sect;&nbsp;</a></span>UDPHS_Read()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_Read </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads incoming data on an USB endpoint This methods sets the transfer descriptor and activate the endpoint interrupt. </p>
<p>The actual transfer is then carried out by the endpoint interrupt handler. The Read operation finishes either when the buffer is full, or a short packet (inferior to endpoint maximum size) is received.</p>
<p><em>The buffer must be kept allocated until the transfer is finished</em>. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a data buffer. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer in bytes. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the read operation has been started; otherwise, the corresponding error code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gadf1deb2219e27bcf29d2598d4aa04c1d_cgraph.svg" width="344" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gadf1deb2219e27bcf29d2598d4aa04c1d_icgraph.svg" width="296" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga562412b12d966ee5ea983881184d51f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga562412b12d966ee5ea983881184d51f6">&sect;&nbsp;</a></span>UDPHS_ReadPayload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_ReadPayload </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>wPacketSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transfers a data payload from an endpoint FIFO to the current transfer buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">wPacketSize</td><td>Size of received data packet </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga562412b12d966ee5ea983881184d51f6_icgraph.svg" width="398" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga51f483eefa9753c15806dfc1cfeb214a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga51f483eefa9753c15806dfc1cfeb214a">&sect;&nbsp;</a></span>UDPHS_ReadRequest()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_ReadRequest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_u_s_b_generic_request.xhtml">USBGenericRequest</a> *&#160;</td>
          <td class="paramname"><em>pRequest</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Received SETUP packet from endpoint 0 FIFO. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pRequest</td><td>Generic USB SETUP request sent over Control endpoints </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga51f483eefa9753c15806dfc1cfeb214a_icgraph.svg" width="400" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga81935b1ed57f1d4e636df4565de436a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga81935b1ed57f1d4e636df4565de436a5">&sect;&nbsp;</a></span>UDPHS_Write()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_Write </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sends data through a USB endpoint. </p>
<p>Sets up the transfer descriptor, writes one or two data payloads (depending on the number of FIFO bank for the endpoint) and then starts the actual transfer. The operation is complete when all the data has been sent.</p>
<p><em>If the size of the buffer is greater than the size of the endpoint (or twice the size if the endpoint has two FIFO banks), then the buffer must be kept allocated until the transfer is finished</em>. This means that it is not possible to declare it on the stack (i.e. as a local variable of a function which returns after starting a transfer).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pEndpoint</td><td>Pointer to <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> struct. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a buffer with the data to send. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the transfer has been started; otherwise, the corresponding error status code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga81935b1ed57f1d4e636df4565de436a5_cgraph.svg" width="388" height="291"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga81935b1ed57f1d4e636df4565de436a5_icgraph.svg" width="296" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga118d9d128a56e31f230bee94ac30f91e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga118d9d128a56e31f230bee94ac30f91e">&sect;&nbsp;</a></span>UDPHS_WritePayload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_WritePayload </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transfers a data payload from the current transfer buffer to the endpoint FIFO. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Number of the endpoint which is sending data. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga118d9d128a56e31f230bee94ac30f91e_icgraph.svg" width="398" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga72c29d7c5767f5af8df7ba1603a02619"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga72c29d7c5767f5af8df7ba1603a02619">&sect;&nbsp;</a></span>USBD_HAL_Activate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_Activate </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Activate USB Device HW Interface</p><ol type="1">
<li>Enable USB Peripheral</li>
<li>Enable USB Clock</li>
<li>Enable transceiver. </li>
</ol>
</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga72c29d7c5767f5af8df7ba1603a02619_cgraph.svg" width="382" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga72c29d7c5767f5af8df7ba1603a02619_icgraph.svg" width="715" height="240"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gaa56e8002e61d04a9e7f55b8c49cb90ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa56e8002e61d04a9e7f55b8c49cb90ed">&sect;&nbsp;</a></span>USBD_HAL_AttachUsb()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_AttachUsb </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="gaac15d66e72d7daa9d05116370a36aa91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaac15d66e72d7daa9d05116370a36aa91">&sect;&nbsp;</a></span>USBD_HAL_CancelIo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_CancelIo </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>bmEPs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Cancel pending READ/WRITE. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bmEPs</td><td>Bitmap for endpoints to reset. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>EP callback is invoked with USBD_STATUS_CANCELED. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaac15d66e72d7daa9d05116370a36aa91_cgraph.svg" width="378" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaac15d66e72d7daa9d05116370a36aa91_icgraph.svg" width="502" height="63"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gaf17d4fe67932fa6a5dcc05f4c6d611ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf17d4fe67932fa6a5dcc05f4c6d611ff">&sect;&nbsp;</a></span>USBD_HAL_ConfigureEP()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t USBD_HAL_ConfigureEP </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="group__usb__descriptor.xhtml#ga5396acbd7f05624071e6752fdb38cca5">USBEndpointDescriptor</a> *&#160;</td>
          <td class="paramname"><em>pDescriptor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures an endpoint according to its endpoint Descriptor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pDescriptor</td><td>Pointer to an endpoint descriptor. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The endpoint address.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pDescriptor</td><td>Pointer to an endpoint descriptor. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaf17d4fe67932fa6a5dcc05f4c6d611ff_cgraph.svg" width="459" height="706"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaf17d4fe67932fa6a5dcc05f4c6d611ff_icgraph.svg" width="756" height="190"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga214508a8f0f824cdcf40bca9ddac10f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga214508a8f0f824cdcf40bca9ddac10f6">&sect;&nbsp;</a></span>USBD_HAL_Connect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_Connect </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable Pull-up, connect. </p>
<ol type="1">
<li>Enable HW access if needed</li>
<li>Enable Pull-Up</li>
<li>Disable HW access if needed </li>
</ol>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga214508a8f0f824cdcf40bca9ddac10f6_cgraph.svg" width="390" height="342"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga214508a8f0f824cdcf40bca9ddac10f6_icgraph.svg" width="500" height="114"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gace313406c6e807aac0b4424b99cf28db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gace313406c6e807aac0b4424b99cf28db">&sect;&nbsp;</a></span>USBD_HAL_DetachUsb()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_DetachUsb </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="gacfe54e3efd82dfd6df3074679402833d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gacfe54e3efd82dfd6df3074679402833d">&sect;&nbsp;</a></span>USBD_HAL_Disable()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_Disable </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gacfe54e3efd82dfd6df3074679402833d_cgraph.svg" width="371" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gaded744daaee15b55f41fb2175f343b69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaded744daaee15b55f41fb2175f343b69">&sect;&nbsp;</a></span>USBD_HAL_Disconnect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_Disconnect </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable Pull-up, disconnect. </p>
<ol type="1">
<li>Enable HW access if needed</li>
<li>Disable PULL-Up</li>
<li>Disable HW access if needed </li>
</ol>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaded744daaee15b55f41fb2175f343b69_cgraph.svg" width="382" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaded744daaee15b55f41fb2175f343b69_icgraph.svg" width="523" height="114"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gaecf96c6050edaa052af086b04ba72e1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaecf96c6050edaa052af086b04ba72e1b">&sect;&nbsp;</a></span>USBD_HAL_Enable()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_Enable </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga1a1fd7ed1af2be8e202879458a6cfda7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1a1fd7ed1af2be8e202879458a6cfda7">&sect;&nbsp;</a></span>USBD_HAL_Halt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t USBD_HAL_Halt </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>ctl</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets/Clear/Get the HALT state on the endpoint. </p>
<p>In HALT state, the endpoint should keep stalling any packet. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">ctl</td><td>Control code CLR/HALT/READ. 0: Clear HALT state; 1: Set HALT state; .: Return HALT status. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_INVALID_PARAMETER if endpoint not exist, otherwise endpoint halt status. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga1a1fd7ed1af2be8e202879458a6cfda7_cgraph.svg" width="408" height="494"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga1a1fd7ed1af2be8e202879458a6cfda7_icgraph.svg" width="483" height="270"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga3699059b9b9b52b7e55af6d070a7fe61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3699059b9b9b52b7e55af6d070a7fe61">&sect;&nbsp;</a></span>USBD_HAL_Init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_Init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the USB HW Access driver. </p>
<p>Disable USB hardware</p>
<p>Enable USB hardware </p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga3699059b9b9b52b7e55af6d070a7fe61_cgraph.svg" width="367" height="392"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga3699059b9b9b52b7e55af6d070a7fe61_icgraph.svg" width="466" height="114"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga946b2d10dfc497b6b24e602be6f3bd05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga946b2d10dfc497b6b24e602be6f3bd05">&sect;&nbsp;</a></span>USBD_HAL_IsHighSpeed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t USBD_HAL_IsHighSpeed </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates if the device is running in high or full-speed. </p>
<p>Always returns 0 since UDP does not support high-speed mode. </p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga946b2d10dfc497b6b24e602be6f3bd05_cgraph.svg" width="420" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga946b2d10dfc497b6b24e602be6f3bd05_icgraph.svg" width="638" height="606"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga1c6c76201a5c49c7e40c60c8dbdeae68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1c6c76201a5c49c7e40c60c8dbdeae68">&sect;&nbsp;</a></span>USBD_HAL_Read()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t USBD_HAL_Read </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reads incoming data on an USB endpoint This methods sets the transfer descriptor and activate the endpoint interrupt. </p>
<p>The actual transfer is then carried out by the endpoint interrupt handler. The Read operation finishes either when the buffer is full, or a short packet (inferior to endpoint maximum size) is received.</p>
<p><em>The buffer must be kept allocated until the transfer is finished</em>. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a data buffer. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer in bytes. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the read operation has been started; otherwise, the corresponding error code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga1c6c76201a5c49c7e40c60c8dbdeae68_cgraph.svg" width="296" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga1c6c76201a5c49c7e40c60c8dbdeae68_icgraph.svg" width="478" height="114"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga24f5a47f6815de571752ba22c98073f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga24f5a47f6815de571752ba22c98073f5">&sect;&nbsp;</a></span>USBD_HAL_RemoteWakeUp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_RemoteWakeUp </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Starts a remote wake-up procedure. </p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga24f5a47f6815de571752ba22c98073f5_cgraph.svg" width="458" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga24f5a47f6815de571752ba22c98073f5_icgraph.svg" width="580" height="114"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gaa9aba8ccdad2272b61db48b43466043b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa9aba8ccdad2272b61db48b43466043b">&sect;&nbsp;</a></span>USBD_HAL_ResetEPs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_ResetEPs </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>bmEPs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bStatus</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bKeepCfg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reset endpoints and disable them. </p>
<ol type="1">
<li>Terminate transfer if there is any, with given status;</li>
<li>Reset the endpoint &amp; disable it. <dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bmEPs</td><td>Bitmap for endpoints to reset. </td></tr>
    <tr><td class="paramname">bStatus</td><td>Status passed to terminate transfer on endpoint. </td></tr>
    <tr><td class="paramname">bKeepCfg</td><td>1 to keep old endpoint configuration. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Use <a class="el" href="group__usbd__hal.xhtml#gaf17d4fe67932fa6a5dcc05f4c6d611ff" title="Configures an endpoint according to its endpoint Descriptor. ">USBD_HAL_ConfigureEP()</a> to configure and enable endpoint if not keeping old configuration. </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="group__usbd__hal.xhtml#gaf17d4fe67932fa6a5dcc05f4c6d611ff" title="Configures an endpoint according to its endpoint Descriptor. ">USBD_HAL_ConfigureEP()</a>. </dd></dl>
</li>
</ol>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaa9aba8ccdad2272b61db48b43466043b_cgraph.svg" width="396" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gaa9aba8ccdad2272b61db48b43466043b_icgraph.svg" width="792" height="307"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gac8a317bd985d2ab3d3b82d093015379e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac8a317bd985d2ab3d3b82d093015379e">&sect;&nbsp;</a></span>USBD_HAL_SetAddress()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_SetAddress </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>address</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the device address to the given value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">address</td><td>New device address. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gac8a317bd985d2ab3d3b82d093015379e_cgraph.svg" width="404" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gac8a317bd985d2ab3d3b82d093015379e_icgraph.svg" width="530" height="114"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga05c8714f0e31ed119a4ab594d687691a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga05c8714f0e31ed119a4ab594d687691a">&sect;&nbsp;</a></span>USBD_HAL_SetConfiguration()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_SetConfiguration </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>cfgnum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the current device configuration. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cfgnum</td><td>- Configuration number to set. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga05c8714f0e31ed119a4ab594d687691a_icgraph.svg" width="595" height="114"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gafcb94bdd4c0ea327621a187814ab4f9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafcb94bdd4c0ea327621a187814ab4f9f">&sect;&nbsp;</a></span>USBD_HAL_SetTransferCallback()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t USBD_HAL_SetTransferCallback </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEP</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__usbd__interface.xhtml#ga366a570f5d3d658362dbf52b68982bed">TransferCallback</a>&#160;</td>
          <td class="paramname"><em>fCallback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pCbData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set callback for a USB endpoint for transfer (read/write). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEP</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">fCallback</td><td>Optional callback function to invoke when the transfer is complete. </td></tr>
    <tr><td class="paramname">pCbData</td><td>Optional pointer to data to the callback function. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS or USBD_STATUS_LOCKED if endpoint is busy. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gafcb94bdd4c0ea327621a187814ab4f9f_icgraph.svg" width="670" height="340"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga62263446ee46cfc2ca48856e446f1a79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga62263446ee46cfc2ca48856e446f1a79">&sect;&nbsp;</a></span>USBD_HAL_SetupMblTransfer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t USBD_HAL_SetupMblTransfer </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__usbd__interface.xhtml#ga63064ab8800bf35183494fd0fe2f6b32">USBDTransferBuffer</a> *&#160;</td>
          <td class="paramname"><em>pMbList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>mblSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>startOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure an endpoint to use multi-buffer-list transfer mode. </p>
<p>The buffers can be added by _Read/_Write function. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pMbList</td><td>Pointer to a multi-buffer list used, NULL to disable MBL. </td></tr>
    <tr><td class="paramname">mblSize</td><td>Multi-buffer list size (number of buffers can be queued) </td></tr>
    <tr><td class="paramname">startOffset</td><td>When number of buffer achieve this offset transfer start </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga62263446ee46cfc2ca48856e446f1a79_icgraph.svg" width="655" height="232"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gad95d239687843031e2af3aac51ba33ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad95d239687843031e2af3aac51ba33ad">&sect;&nbsp;</a></span>USBD_HAL_Stall()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t USBD_HAL_Stall </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEP</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Causes the given endpoint to acknowledge the next packet it receives with a STALL handshake except setup request. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEP</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS or USBD_STATUS_LOCKED. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gad95d239687843031e2af3aac51ba33ad_cgraph.svg" width="366" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gad95d239687843031e2af3aac51ba33ad_icgraph.svg" width="475" height="114"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gab80a4355417d88e290c88c233d5d435b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab80a4355417d88e290c88c233d5d435b">&sect;&nbsp;</a></span>USBD_HAL_Suspend()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_Suspend </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Suspend USB Device HW Interface. </p>
<ol type="1">
<li>Disable transceiver</li>
<li>Disable USB Clock</li>
<li>Disable USB Peripheral </li>
</ol>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gab80a4355417d88e290c88c233d5d435b_cgraph.svg" width="367" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gab80a4355417d88e290c88c233d5d435b_icgraph.svg" width="724" height="106"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga3c996a1e96701350e2c298521b7f8630"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3c996a1e96701350e2c298521b7f8630">&sect;&nbsp;</a></span>USBD_HAL_Test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_Test </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bIndex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Certification test for High Speed device. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bIndex</td><td>Test to be done </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga3c996a1e96701350e2c298521b7f8630_cgraph.svg" width="363" height="240"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga3c996a1e96701350e2c298521b7f8630_icgraph.svg" width="472" height="114"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga42391c0d642db3869248a8fa3f167ec7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga42391c0d642db3869248a8fa3f167ec7">&sect;&nbsp;</a></span>USBD_HAL_WaitReadData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_HAL_WaitReadData </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait for data to read and then return. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga42391c0d642db3869248a8fa3f167ec7_cgraph.svg" width="390" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga42391c0d642db3869248a8fa3f167ec7_icgraph.svg" width="404" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gab8293616e390cb94e93529673367acb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab8293616e390cb94e93529673367acb4">&sect;&nbsp;</a></span>USBD_HAL_Write()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t USBD_HAL_Write </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sends data through a USB endpoint. </p>
<p>Sets up the transfer descriptor, writes one or two data payloads (depending on the number of FIFO bank for the endpoint) and then starts the actual transfer. The operation is complete when all the data has been sent.</p>
<p><em>If the size of the buffer is greater than the size of the endpoint (or twice the size if the endpoint has two FIFO banks), then the buffer must be kept allocated until the transfer is finished</em>. This means that it is not possible to declare it on the stack (i.e. as a local variable of a function which returns after starting a transfer).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a buffer with the data to send. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the transfer has been started; otherwise, the corresponding error status code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gab8293616e390cb94e93529673367acb4_cgraph.svg" width="306" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_gab8293616e390cb94e93529673367acb4_icgraph.svg" width="536" height="288"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga8ebf6dcf09581aa66fbfc89862516e60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8ebf6dcf09581aa66fbfc89862516e60">&sect;&nbsp;</a></span>USBD_HAL_WrWithHdr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t USBD_HAL_WrWithHdr </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pHdr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bHdrLen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Special write function. </p>
<p>Sends data through a USB endpoint. Sets up the transfer descriptor, writes header and one or two data payloads (depending on the number of FIFO bank for the endpoint) and then starts the actual transfer. The operation is complete when all the data has been sent.</p>
<p><em>If the size of the buffer is greater than the size of the endpoint (or twice the size if the endpoint has two FIFO banks), then the buffer must be kept allocated until the transfer is finished</em>. This means that it is not possible to declare it on the stack (i.e. as a local variable of a function which returns after starting a transfer).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a buffer with the data to send. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the transfer has been started; otherwise, the corresponding error status code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga8ebf6dcf09581aa66fbfc89862516e60_cgraph.svg" width="426" height="240"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga8ebf6dcf09581aa66fbfc89862516e60_icgraph.svg" width="331" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga571a674fe9f9a1bba6ad08b3b0b28a80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga571a674fe9f9a1bba6ad08b3b0b28a80">&sect;&nbsp;</a></span>USBD_IrqHandler()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBD_IrqHandler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>USBD (UDP) interrupt handler Manages device resume, suspend, end of bus reset. </p>
<p>Forwards endpoint events to the appropriate handler. </p>
<p>/ Start Of Frame (SOF) </p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga571a674fe9f9a1bba6ad08b3b0b28a80_cgraph.svg" width="863" height="1912"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__usbd__hal_ga571a674fe9f9a1bba6ad08b3b0b28a80_icgraph.svg" width="299" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gafcd12a00544aac7645deb694ec611e7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafcd12a00544aac7645deb694ec611e7a">&sect;&nbsp;</a></span>USBHS_Handler()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void USBHS_Handler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>USBD (UDP) interrupt handler Manages device resume, suspend, end of bus reset. </p>
<p>Forwards endpoint events to the appropriate handler. </p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="ga1de7090358b3aaa73ff4b5cf1e8dc291"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1de7090358b3aaa73ff4b5cf1e8dc291">&sect;&nbsp;</a></span>dmaLL</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_udphs_dma_descriptor.xhtml">UdphsDmaDescriptor</a> dmaLL[5]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>DMA link list. </p>

</div>
</div>
<a id="gae5ead95894bdd220e35880db62b8c3d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae5ead95894bdd220e35880db62b8c3d1">&sect;&nbsp;</a></span>endpoints <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_endpoint.xhtml">Endpoint</a> endpoints[<a class="el" href="group__usbd__hal.xhtml#gab1098bd73746d6f0b0ab28975d2a5043">CHIP_USB_NUMENDPOINTS</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Holds the internal state for each endpoint of the UDP. </p>

</div>
</div>
<a id="gae5ead95894bdd220e35880db62b8c3d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae5ead95894bdd220e35880db62b8c3d1">&sect;&nbsp;</a></span>endpoints <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_endpoint.xhtml">Endpoint</a> endpoints[<a class="el" href="group__usbd__hal.xhtml#gab1098bd73746d6f0b0ab28975d2a5043">CHIP_USB_NUMENDPOINTS</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Holds the internal state for each endpoint of the UDP. </p>

</div>
</div>
<a id="gae5ead95894bdd220e35880db62b8c3d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae5ead95894bdd220e35880db62b8c3d1">&sect;&nbsp;</a></span>endpoints <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_endpoint.xhtml">Endpoint</a> endpoints[<a class="el" href="group__usbd__hal.xhtml#gab1098bd73746d6f0b0ab28975d2a5043">CHIP_USB_NUMENDPOINTS</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Holds the internal state for each endpoint of the UDP. </p>

</div>
</div>
<a id="gaf2b79d64e183ae9505d0c2ace7dd1fb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf2b79d64e183ae9505d0c2ace7dd1fb4">&sect;&nbsp;</a></span>forceUsbFS</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const uint8_t forceUsbFS = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Force FS mode. </p>

</div>
</div>
<a id="ga942c3fa9e248ad872f6f99acb2af883d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga942c3fa9e248ad872f6f99acb2af883d">&sect;&nbsp;</a></span>pDmaLL</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_udphs_dma_descriptor.xhtml">UdphsDmaDescriptor</a>* pDmaLL</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ga4280b03060f2ed7b255b622a27ce2b18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4280b03060f2ed7b255b622a27ce2b18">&sect;&nbsp;</a></span>test_packet_buffer <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char test_packet_buffer[]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                   </div><div class="line">    0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,                         </div><div class="line">    0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,                         </div><div class="line">    0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, </div><div class="line">    0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,                               </div><div class="line">    0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E                    </div><div class="line">}</div></div><!-- fragment -->
<p>7.1.20 Test Mode Support Test codes for the USB HS test mode. </p>

</div>
</div>
<a id="ga4280b03060f2ed7b255b622a27ce2b18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4280b03060f2ed7b255b622a27ce2b18">&sect;&nbsp;</a></span>test_packet_buffer <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char test_packet_buffer[]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                </div><div class="line">    0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,                     </div><div class="line">    0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,0xEE,                     </div><div class="line">    0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, </div><div class="line">    0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,                          </div><div class="line">    0xFC,0x7E,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0x7E                 </div><div class="line">}</div></div><!-- fragment -->
<p>7.1.20 Test Mode Support Test codes for the USB HS test mode. </p>

</div>
</div>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
