<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XeThru Embedded Platform - XEP: src/hal/x4m0x_s70/libraries/libchip/source/smc.c File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">XeThru Embedded Platform - XEP
          &#160;<span id="projectnumber">3.4.7</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Embedded platform for XeThru firmware products</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_4ce6a7f885e2866a554ba9e7335035f1.xhtml">hal</a></li><li class="navelem"><a class="el" href="dir_9dc4d255e566c48428ae1788dff8c9e9.xhtml">x4m0x_s70</a></li><li class="navelem"><a class="el" href="dir_75c70effab526b28e035b6c6a3220eb7.xhtml">libraries</a></li><li class="navelem"><a class="el" href="dir_a75a6fe80fd9120ba7dd67a0b33a7bc9.xhtml">libchip</a></li><li class="navelem"><a class="el" href="dir_3d0e1f04b892c8e303e2a36887d7dc95.xhtml">source</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">smc.c File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Implementation of NFC functions.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="chip_8h_source.xhtml">chip.h</a>&quot;</code><br />
</div><div class="textblock"><div class="dynheader">
Include dependency graph for smc.c:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c__incl.svg" width="206" height="127"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ad1959c9776015c29cdf9e95f98334569"><td class="memItemLeft" align="right" valign="top">static unsigned char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#ad1959c9776015c29cdf9e95f98334569">CountBitsInByte</a> (unsigned char byte)</td></tr>
<tr class="memdesc:ad1959c9776015c29cdf9e95f98334569"><td class="mdescLeft">&#160;</td><td class="mdescRight">Counts and return the number of bits set to '1' in the given hsiao code .  <a href="#ad1959c9776015c29cdf9e95f98334569">More...</a><br /></td></tr>
<tr class="separator:ad1959c9776015c29cdf9e95f98334569"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e8c67cfa227eaa3bb2147755c0cee59"><td class="memItemLeft" align="right" valign="top">static unsigned char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a4e8c67cfa227eaa3bb2147755c0cee59">CountBitsInCode</a> (unsigned char *code)</td></tr>
<tr class="memdesc:a4e8c67cfa227eaa3bb2147755c0cee59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Counts and return the number of bits set to '1' in the given hsiao code.  <a href="#a4e8c67cfa227eaa3bb2147755c0cee59">More...</a><br /></td></tr>
<tr class="separator:a4e8c67cfa227eaa3bb2147755c0cee59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ab724f8c07842edac07a994f4cd35e0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a5ab724f8c07842edac07a994f4cd35e0">SMC_Clear_Status</a> (void)</td></tr>
<tr class="memdesc:a5ab724f8c07842edac07a994f4cd35e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the corresponding interrupt flag.  <a href="#a5ab724f8c07842edac07a994f4cd35e0">More...</a><br /></td></tr>
<tr class="separator:a5ab724f8c07842edac07a994f4cd35e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3faeb0e934e8487ab6af1b2c0384ae61"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a3faeb0e934e8487ab6af1b2c0384ae61">SMC_Handler</a> (void)</td></tr>
<tr class="memdesc:a3faeb0e934e8487ab6af1b2c0384ae61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check the STATUS and set the corresponding interrupt flag.  <a href="#a3faeb0e934e8487ab6af1b2c0384ae61">More...</a><br /></td></tr>
<tr class="separator:a3faeb0e934e8487ab6af1b2c0384ae61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a180d11ea67004fa7c7351b9f7a52d1fd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a180d11ea67004fa7c7351b9f7a52d1fd">SMC_NFC_Configure</a> (uint32_t cfg)</td></tr>
<tr class="memdesc:a180d11ea67004fa7c7351b9f7a52d1fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets NFC configuration.  <a href="#a180d11ea67004fa7c7351b9f7a52d1fd">More...</a><br /></td></tr>
<tr class="separator:a180d11ea67004fa7c7351b9f7a52d1fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96e6674381e2018e36a857f7f36aa141"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a96e6674381e2018e36a857f7f36aa141">SMC_NFC_Reset</a> (void)</td></tr>
<tr class="memdesc:a96e6674381e2018e36a857f7f36aa141"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset NFC controller.  <a href="#a96e6674381e2018e36a857f7f36aa141">More...</a><br /></td></tr>
<tr class="separator:a96e6674381e2018e36a857f7f36aa141"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0ac84fc652fc320188e9b3037ced514"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#aa0ac84fc652fc320188e9b3037ced514">SMC_NFC_EnableNfc</a> (void)</td></tr>
<tr class="memdesc:aa0ac84fc652fc320188e9b3037ced514"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable NFC controller.  <a href="#aa0ac84fc652fc320188e9b3037ced514">More...</a><br /></td></tr>
<tr class="separator:aa0ac84fc652fc320188e9b3037ced514"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7318614ff5229fca94e7420a5cf418bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a7318614ff5229fca94e7420a5cf418bf">SMC_NFC_EnableSpareRead</a> (void)</td></tr>
<tr class="memdesc:a7318614ff5229fca94e7420a5cf418bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable NFC controller reads both main and spare area in read mode.  <a href="#a7318614ff5229fca94e7420a5cf418bf">More...</a><br /></td></tr>
<tr class="separator:a7318614ff5229fca94e7420a5cf418bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb4a0e7516b0fa54ff8e54da7efdf221"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#acb4a0e7516b0fa54ff8e54da7efdf221">SMC_NFC_DisableSpareRead</a> (void)</td></tr>
<tr class="memdesc:acb4a0e7516b0fa54ff8e54da7efdf221"><td class="mdescLeft">&#160;</td><td class="mdescRight">The NFC controller skips spare area in read mode.  <a href="#acb4a0e7516b0fa54ff8e54da7efdf221">More...</a><br /></td></tr>
<tr class="separator:acb4a0e7516b0fa54ff8e54da7efdf221"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cab5025b95efd08a6829d3ee6d9e683"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a0cab5025b95efd08a6829d3ee6d9e683">SMC_NFC_EnableSpareWrite</a> (void)</td></tr>
<tr class="memdesc:a0cab5025b95efd08a6829d3ee6d9e683"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the NFC controller writes both main and spare area in write.  <a href="#a0cab5025b95efd08a6829d3ee6d9e683">More...</a><br /></td></tr>
<tr class="separator:a0cab5025b95efd08a6829d3ee6d9e683"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5c5171991e5c0e2de87f86846b226f2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#ae5c5171991e5c0e2de87f86846b226f2">SMC_NFC_DisableSpareWrite</a> (void)</td></tr>
<tr class="memdesc:ae5c5171991e5c0e2de87f86846b226f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">The NFC controller skips spare area in write mode.  <a href="#ae5c5171991e5c0e2de87f86846b226f2">More...</a><br /></td></tr>
<tr class="separator:ae5c5171991e5c0e2de87f86846b226f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a014be9f924592d2272e52c9af59f2118"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a014be9f924592d2272e52c9af59f2118">SMC_NFC_isSpareRead</a> (void)</td></tr>
<tr class="memdesc:a014be9f924592d2272e52c9af59f2118"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if spare area be read in read mode.  <a href="#a014be9f924592d2272e52c9af59f2118">More...</a><br /></td></tr>
<tr class="separator:a014be9f924592d2272e52c9af59f2118"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56178c59464e71834d8d3f0831b9fce8"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a56178c59464e71834d8d3f0831b9fce8">SMC_NFC_isSpareWrite</a> (void)</td></tr>
<tr class="memdesc:a56178c59464e71834d8d3f0831b9fce8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if spare area be written in write mode.  <a href="#a56178c59464e71834d8d3f0831b9fce8">More...</a><br /></td></tr>
<tr class="separator:a56178c59464e71834d8d3f0831b9fce8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92bb7d654f9fc73c3e030fa00743d095"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a92bb7d654f9fc73c3e030fa00743d095">SMC_NFC_isTransferComplete</a> (void)</td></tr>
<tr class="memdesc:a92bb7d654f9fc73c3e030fa00743d095"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if NFC transfer complete.  <a href="#a92bb7d654f9fc73c3e030fa00743d095">More...</a><br /></td></tr>
<tr class="separator:a92bb7d654f9fc73c3e030fa00743d095"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac96215d05aec3de097ad2d077a7f4db"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#aac96215d05aec3de097ad2d077a7f4db">SMC_NFC_isReadyBusy</a> (void)</td></tr>
<tr class="memdesc:aac96215d05aec3de097ad2d077a7f4db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check Ready/Busy line.  <a href="#aac96215d05aec3de097ad2d077a7f4db">More...</a><br /></td></tr>
<tr class="separator:aac96215d05aec3de097ad2d077a7f4db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fc7ed28ebe3fdaed5c987533ffae5c8"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a0fc7ed28ebe3fdaed5c987533ffae5c8">SMC_NFC_isNfcBusy</a> (void)</td></tr>
<tr class="memdesc:a0fc7ed28ebe3fdaed5c987533ffae5c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if NFC Controller is busy.  <a href="#a0fc7ed28ebe3fdaed5c987533ffae5c8">More...</a><br /></td></tr>
<tr class="separator:a0fc7ed28ebe3fdaed5c987533ffae5c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe9c638b5e7b4cb9e586d75e4162bf65"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#afe9c638b5e7b4cb9e586d75e4162bf65">SMC_NFC_GetStatus</a> (void)</td></tr>
<tr class="memdesc:afe9c638b5e7b4cb9e586d75e4162bf65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get NFC Status.  <a href="#afe9c638b5e7b4cb9e586d75e4162bf65">More...</a><br /></td></tr>
<tr class="separator:afe9c638b5e7b4cb9e586d75e4162bf65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7aaf9e2f36b7f6eb6660973a666d340"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#ad7aaf9e2f36b7f6eb6660973a666d340">SMC_NFC_isHostBusy</a> (void)</td></tr>
<tr class="memdesc:ad7aaf9e2f36b7f6eb6660973a666d340"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the host controller is busy.  <a href="#ad7aaf9e2f36b7f6eb6660973a666d340">More...</a><br /></td></tr>
<tr class="separator:ad7aaf9e2f36b7f6eb6660973a666d340"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa44b0a4952cd572d0d0ede329e91ecc6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#aa44b0a4952cd572d0d0ede329e91ecc6">SMC_NFC_Wait_CommandDone</a> (void)</td></tr>
<tr class="memdesc:aa44b0a4952cd572d0d0ede329e91ecc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for NFC command has done.  <a href="#aa44b0a4952cd572d0d0ede329e91ecc6">More...</a><br /></td></tr>
<tr class="separator:aa44b0a4952cd572d0d0ede329e91ecc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77b44da0d1691dbfafbfeb1a35c0b2fd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a77b44da0d1691dbfafbfeb1a35c0b2fd">SMC_NFC_Wait_XfrDone</a> (void)</td></tr>
<tr class="memdesc:a77b44da0d1691dbfafbfeb1a35c0b2fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for NFC Data <a class="el" href="struct_transfer.xhtml" title="Describes a transfer on a UDP endpoint. ">Transfer</a> Terminated.  <a href="#a77b44da0d1691dbfafbfeb1a35c0b2fd">More...</a><br /></td></tr>
<tr class="separator:a77b44da0d1691dbfafbfeb1a35c0b2fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0354bfe334bbfc40665ac79cfb35fc4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#ab0354bfe334bbfc40665ac79cfb35fc4">SMC_NFC_Wait_HammingReady</a> (void)</td></tr>
<tr class="memdesc:ab0354bfe334bbfc40665ac79cfb35fc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for NFC Data <a class="el" href="struct_transfer.xhtml" title="Describes a transfer on a UDP endpoint. ">Transfer</a> Terminated.  <a href="#ab0354bfe334bbfc40665ac79cfb35fc4">More...</a><br /></td></tr>
<tr class="separator:ab0354bfe334bbfc40665ac79cfb35fc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2e00388d4f4ddf72329e7b5a961f1da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#ab2e00388d4f4ddf72329e7b5a961f1da">SMC_NFC_Wait_RBbusy</a> (void)</td></tr>
<tr class="memdesc:ab2e00388d4f4ddf72329e7b5a961f1da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for NFC Ready/Busy Line 3 Edge Detected.  <a href="#ab2e00388d4f4ddf72329e7b5a961f1da">More...</a><br /></td></tr>
<tr class="separator:ab2e00388d4f4ddf72329e7b5a961f1da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac63465026f93245b828df80c7ea0c721"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#ac63465026f93245b828df80c7ea0c721">SMC_NFC_SendCommand</a> (uint32_t cmd, uint32_t addressCycle, uint32_t cycle0)</td></tr>
<tr class="memdesc:ac63465026f93245b828df80c7ea0c721"><td class="mdescLeft">&#160;</td><td class="mdescRight">Uses the HOST nandflash controller to send a command to the NFC.  <a href="#ac63465026f93245b828df80c7ea0c721">More...</a><br /></td></tr>
<tr class="separator:ac63465026f93245b828df80c7ea0c721"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98eda6914d1412bf64354322ce274973"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a98eda6914d1412bf64354322ce274973">_smc_ecc_GetW9BitPer512Ecc</a> (uint32_t pageDataSize, uint8_t *code)</td></tr>
<tr class="memdesc:a98eda6914d1412bf64354322ce274973"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get 24-bit ECC code for 8-bit data path NAND flash.  <a href="#a98eda6914d1412bf64354322ce274973">More...</a><br /></td></tr>
<tr class="separator:a98eda6914d1412bf64354322ce274973"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad60c8dabec3a5c475dc37bf2d03581c3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#ad60c8dabec3a5c475dc37bf2d03581c3">_smc_ecc_GetW8BitPer256Ecc</a> (uint32_t pageDataSize, uint8_t *code)</td></tr>
<tr class="memdesc:ad60c8dabec3a5c475dc37bf2d03581c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get 24-bit ECC code for 8-bit data path NAND flash.  <a href="#ad60c8dabec3a5c475dc37bf2d03581c3">More...</a><br /></td></tr>
<tr class="separator:ad60c8dabec3a5c475dc37bf2d03581c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa77e585aa9242fea7c9eea721b6e702a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#aa77e585aa9242fea7c9eea721b6e702a">_smc_ecc_GetW12BitPerPageEcc</a> (uint32_t pageDataSize, uint8_t *code)</td></tr>
<tr class="memdesc:aa77e585aa9242fea7c9eea721b6e702a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get 32-bit ECC code for 16-bit data path NAND flash.  <a href="#aa77e585aa9242fea7c9eea721b6e702a">More...</a><br /></td></tr>
<tr class="separator:aa77e585aa9242fea7c9eea721b6e702a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75ab40b936f0a5af89850717392ac6cd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a75ab40b936f0a5af89850717392ac6cd">SMC_ECC_Configure</a> (uint32_t type, uint32_t pageSize)</td></tr>
<tr class="memdesc:a75ab40b936f0a5af89850717392ac6cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures ECC mode.  <a href="#a75ab40b936f0a5af89850717392ac6cd">More...</a><br /></td></tr>
<tr class="separator:a75ab40b936f0a5af89850717392ac6cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a262b7a457a7f95e8403744c0c47d8fc2"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a262b7a457a7f95e8403744c0c47d8fc2">SMC_ECC_GetCorrectoinType</a> (void)</td></tr>
<tr class="memdesc:a262b7a457a7f95e8403744c0c47d8fc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get ECC correction type.  <a href="#a262b7a457a7f95e8403744c0c47d8fc2">More...</a><br /></td></tr>
<tr class="separator:a262b7a457a7f95e8403744c0c47d8fc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63f7922900ccf08a5574931623e1f5e8"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a63f7922900ccf08a5574931623e1f5e8">SMC_ECC_GetStatus</a> (uint8_t eccNumber)</td></tr>
<tr class="memdesc:a63f7922900ccf08a5574931623e1f5e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get ECC status.  <a href="#a63f7922900ccf08a5574931623e1f5e8">More...</a><br /></td></tr>
<tr class="separator:a63f7922900ccf08a5574931623e1f5e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a037865c62e4a75d7a9df4e681b7607df"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a037865c62e4a75d7a9df4e681b7607df">SMC_ECC_GetValue</a> (uint32_t *ecc)</td></tr>
<tr class="memdesc:a037865c62e4a75d7a9df4e681b7607df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all ECC parity and Nparity value.  <a href="#a037865c62e4a75d7a9df4e681b7607df">More...</a><br /></td></tr>
<tr class="separator:a037865c62e4a75d7a9df4e681b7607df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37e65f5e7c65e85ee841c5c779018ad0"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a37e65f5e7c65e85ee841c5c779018ad0">_smc_ecc_VerifyW12BitPerPageEcc</a> (uint8_t *data, const uint8_t *originalCode, const uint8_t *verifyCode)</td></tr>
<tr class="memdesc:a37e65f5e7c65e85ee841c5c779018ad0"><td class="mdescLeft">&#160;</td><td class="mdescRight">verifies 4-bytes hsiao codes for a data block whose size is a page Size word.  <a href="#a37e65f5e7c65e85ee841c5c779018ad0">More...</a><br /></td></tr>
<tr class="separator:a37e65f5e7c65e85ee841c5c779018ad0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c2e22ec4cdc2f388025919b7a2f96fc"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a2c2e22ec4cdc2f388025919b7a2f96fc">_smc_ecc_VerifyW8BitPer256Ecc</a> (uint8_t *data, uint32_t size, const uint8_t *originalCode, const uint8_t *verifyCode)</td></tr>
<tr class="memdesc:a2c2e22ec4cdc2f388025919b7a2f96fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">verifies 3-bytes hsiao codes for a data block whose size is a page Size word.  <a href="#a2c2e22ec4cdc2f388025919b7a2f96fc">More...</a><br /></td></tr>
<tr class="separator:a2c2e22ec4cdc2f388025919b7a2f96fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70038d38d74adfa40c8126f3f0035eed"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a70038d38d74adfa40c8126f3f0035eed">_smc_ecc_VerifyW9BitPer512Ecc</a> (uint8_t *data, uint32_t size, const uint8_t *originalCode, const uint8_t *verifyCode)</td></tr>
<tr class="memdesc:a70038d38d74adfa40c8126f3f0035eed"><td class="mdescLeft">&#160;</td><td class="mdescRight">3-bytes hsiao codes for a data block whose size is multiple of 512 bytes.  <a href="#a70038d38d74adfa40c8126f3f0035eed">More...</a><br /></td></tr>
<tr class="separator:a70038d38d74adfa40c8126f3f0035eed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a769bffc6d644405da658bad10af33b14"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a769bffc6d644405da658bad10af33b14">SMC_ECC_GetEccParity</a> (uint32_t pageDataSize, uint8_t *code, uint8_t busWidth)</td></tr>
<tr class="memdesc:a769bffc6d644405da658bad10af33b14"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get ECC code for 8bit/16-bit data path NAND flash by giving data path.  <a href="#a769bffc6d644405da658bad10af33b14">More...</a><br /></td></tr>
<tr class="separator:a769bffc6d644405da658bad10af33b14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acddb0faced2947d02082c298c51c8522"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#acddb0faced2947d02082c298c51c8522">SMC_ECC_VerifyHsiao</a> (uint8_t *data, uint32_t size, const uint8_t *originalCode, const uint8_t *verifyCode, uint8_t busWidth)</td></tr>
<tr class="memdesc:acddb0faced2947d02082c298c51c8522"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verifies hsiao codes for a data block.  <a href="#acddb0faced2947d02082c298c51c8522">More...</a><br /></td></tr>
<tr class="separator:acddb0faced2947d02082c298c51c8522"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a086a431b3caa3da8040c625def361bb9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="smc_8h.xhtml#a38c4c96d3a2220d6e58aa041b52c0801">SmcStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="smc_8c.xhtml#a086a431b3caa3da8040c625def361bb9">smcStatus</a></td></tr>
<tr class="separator:a086a431b3caa3da8040c625def361bb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Implementation of NFC functions. </p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="aa77e585aa9242fea7c9eea721b6e702a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa77e585aa9242fea7c9eea721b6e702a">&sect;&nbsp;</a></span>_smc_ecc_GetW12BitPerPageEcc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void _smc_ecc_GetW12BitPerPageEcc </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>pageDataSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get 32-bit ECC code for 16-bit data path NAND flash. </p>
<p>32-bit ECC is generated in order to perform one bit correction for a page in page 512/1024/2048/4096 for 16-bit words</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>Data size in bytes. </td></tr>
    <tr><td class="paramname">code</td><td>Codes buffer. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_aa77e585aa9242fea7c9eea721b6e702a_cgraph.svg" width="442" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_aa77e585aa9242fea7c9eea721b6e702a_icgraph.svg" width="463" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ad60c8dabec3a5c475dc37bf2d03581c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad60c8dabec3a5c475dc37bf2d03581c3">&sect;&nbsp;</a></span>_smc_ecc_GetW8BitPer256Ecc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void _smc_ecc_GetW8BitPer256Ecc </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>pageDataSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get 24-bit ECC code for 8-bit data path NAND flash. </p>
<p>24-bit ECC is generated in order to perform one bit correction for 256 byte in page 512/1024/2048/4096 for 8-bit words</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>Data size in bytes. </td></tr>
    <tr><td class="paramname">code</td><td>Codes buffer. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_ad60c8dabec3a5c475dc37bf2d03581c3_cgraph.svg" width="427" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_ad60c8dabec3a5c475dc37bf2d03581c3_icgraph.svg" width="448" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a98eda6914d1412bf64354322ce274973"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98eda6914d1412bf64354322ce274973">&sect;&nbsp;</a></span>_smc_ecc_GetW9BitPer512Ecc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void _smc_ecc_GetW9BitPer512Ecc </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>pageDataSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get 24-bit ECC code for 8-bit data path NAND flash. </p>
<p>24-bit ECC is generated in order to perform one bit correction for 512 byte in page 512/1024/2048/4096 for 8-bit words</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>Data size in bytes. </td></tr>
    <tr><td class="paramname">code</td><td>Codes buffer. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a98eda6914d1412bf64354322ce274973_cgraph.svg" width="427" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a98eda6914d1412bf64354322ce274973_icgraph.svg" width="448" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a37e65f5e7c65e85ee841c5c779018ad0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37e65f5e7c65e85ee841c5c779018ad0">&sect;&nbsp;</a></span>_smc_ecc_VerifyW12BitPerPageEcc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t _smc_ecc_VerifyW12BitPerPageEcc </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>originalCode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>verifyCode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>verifies 4-bytes hsiao codes for a data block whose size is a page Size word. </p>
<p>Page words block is verified between the given HSIAO code generated by hardware and original HSIAO codes store has been previously stored. Returns 0 if the data is correct, Hsiao_ERROR_SINGLEBIT if one or more block(s) have had a single bit corrected, or either Hsiao_ERROR_ECC or Hsiao_ERROR_MULTIPLEBITS. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Data buffer to verify. </td></tr>
    <tr><td class="paramname">originalCode</td><td>Original codes. </td></tr>
    <tr><td class="paramname">verifyCode</td><td>codes to be verified. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a37e65f5e7c65e85ee841c5c779018ad0_cgraph.svg" width="375" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a37e65f5e7c65e85ee841c5c779018ad0_icgraph.svg" width="414" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a2c2e22ec4cdc2f388025919b7a2f96fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c2e22ec4cdc2f388025919b7a2f96fc">&sect;&nbsp;</a></span>_smc_ecc_VerifyW8BitPer256Ecc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t _smc_ecc_VerifyW8BitPer256Ecc </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>originalCode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>verifyCode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>verifies 3-bytes hsiao codes for a data block whose size is a page Size word. </p>
<p>Page words block is verified between the given HSIAO code generated by hardware and original HSIAO codes store has been previously stored. Returns 0 if the data is correct, Hsiao_ERROR_SINGLEBIT if one or more block(s) have had a single bit corrected, or either Hsiao_ERROR_ECC or Hsiao_ERROR_MULTIPLEBITS. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Data buffer to verify. </td></tr>
    <tr><td class="paramname">originalCode</td><td>Original codes. </td></tr>
    <tr><td class="paramname">verifyCode</td><td>codes to be verified. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a2c2e22ec4cdc2f388025919b7a2f96fc_cgraph.svg" width="418" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a2c2e22ec4cdc2f388025919b7a2f96fc_icgraph.svg" width="452" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a70038d38d74adfa40c8126f3f0035eed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70038d38d74adfa40c8126f3f0035eed">&sect;&nbsp;</a></span>_smc_ecc_VerifyW9BitPer512Ecc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t _smc_ecc_VerifyW9BitPer512Ecc </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>originalCode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>verifyCode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>3-bytes hsiao codes for a data block whose size is multiple of 512 bytes. </p>
<p>Each 512-bytes block is verified between the given HSIAO code generated by hardware and original HSIAO codes store has been previously stored. Returns 0 if the data is correct, Hsiao_ERROR_SINGLEBIT if one or more block(s) have had a single bit corrected, or either Hsiao_ERROR_ECC or Hsiao_ERROR_MULTIPLEBITS. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Data buffer to verify. </td></tr>
    <tr><td class="paramname">originalCode</td><td>Original codes. </td></tr>
    <tr><td class="paramname">verifyCode</td><td>codes to be verified. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a70038d38d74adfa40c8126f3f0035eed_cgraph.svg" width="418" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a70038d38d74adfa40c8126f3f0035eed_icgraph.svg" width="452" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ad1959c9776015c29cdf9e95f98334569"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1959c9776015c29cdf9e95f98334569">&sect;&nbsp;</a></span>CountBitsInByte()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned char CountBitsInByte </td>
          <td>(</td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>byte</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Counts and return the number of bits set to '1' in the given hsiao code . </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">code</td><td>Hsizo code. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_ad1959c9776015c29cdf9e95f98334569_icgraph.svg" width="375" height="104"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a4e8c67cfa227eaa3bb2147755c0cee59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e8c67cfa227eaa3bb2147755c0cee59">&sect;&nbsp;</a></span>CountBitsInCode()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned char CountBitsInCode </td>
          <td>(</td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>code</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Counts and return the number of bits set to '1' in the given hsiao code. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">code</td><td>Hsizo code. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a4e8c67cfa227eaa3bb2147755c0cee59_cgraph.svg" width="311" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a4e8c67cfa227eaa3bb2147755c0cee59_icgraph.svg" width="418" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a5ab724f8c07842edac07a994f4cd35e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ab724f8c07842edac07a994f4cd35e0">&sect;&nbsp;</a></span>SMC_Clear_Status()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void SMC_Clear_Status </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear the corresponding interrupt flag. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a5ab724f8c07842edac07a994f4cd35e0_icgraph.svg" width="390" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a75ab40b936f0a5af89850717392ac6cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75ab40b936f0a5af89850717392ac6cd">&sect;&nbsp;</a></span>SMC_ECC_Configure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_ECC_Configure </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>pageSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures ECC mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>Type of correction. </td></tr>
    <tr><td class="paramname">pageSize</td><td>Page size of NAND flash device. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a262b7a457a7f95e8403744c0c47d8fc2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a262b7a457a7f95e8403744c0c47d8fc2">&sect;&nbsp;</a></span>SMC_ECC_GetCorrectoinType()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t SMC_ECC_GetCorrectoinType </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get ECC correction type. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns type of ECC correction setting. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a262b7a457a7f95e8403744c0c47d8fc2_icgraph.svg" width="438" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a769bffc6d644405da658bad10af33b14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a769bffc6d644405da658bad10af33b14">&sect;&nbsp;</a></span>SMC_ECC_GetEccParity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_ECC_GetEccParity </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>pageDataSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>code</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>busWidth</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get ECC code for 8bit/16-bit data path NAND flash by giving data path. </p>
<p>24-bit or 32-bit ECC is generated in order to perform one bit correction for a page in page 512/1024/2048/4096.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>Data size in bytes. </td></tr>
    <tr><td class="paramname">code</td><td>Codes buffer. </td></tr>
    <tr><td class="paramname">busWidth</td><td>8bit/16bit data path. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a769bffc6d644405da658bad10af33b14_cgraph.svg" width="463" height="190"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a63f7922900ccf08a5574931623e1f5e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63f7922900ccf08a5574931623e1f5e8">&sect;&nbsp;</a></span>SMC_ECC_GetStatus()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t SMC_ECC_GetStatus </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>eccNumber</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get ECC status. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">eccNumber</td><td>ecc parity number from 0 to 15.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns ECC status by giving ecc number. </dd></dl>

</div>
</div>
<a id="a037865c62e4a75d7a9df4e681b7607df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a037865c62e4a75d7a9df4e681b7607df">&sect;&nbsp;</a></span>SMC_ECC_GetValue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_ECC_GetValue </td>
          <td>(</td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>ecc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get all ECC parity and Nparity value. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a037865c62e4a75d7a9df4e681b7607df_icgraph.svg" width="442" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="acddb0faced2947d02082c298c51c8522"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acddb0faced2947d02082c298c51c8522">&sect;&nbsp;</a></span>SMC_ECC_VerifyHsiao()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t SMC_ECC_VerifyHsiao </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>originalCode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>verifyCode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>busWidth</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Verifies hsiao codes for a data block. </p>
<p>The block is verified between the given HSIAO code generated by hardware and original HSIAO codes store has been previously stored. Returns 0 if the data is correct, Hsiao_ERROR_SINGLEBIT if one or more block(s) have had a single bit corrected, or either Hsiao_ERROR_ECC or Hsiao_ERROR_MULTIPLEBITS. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Data buffer to verify. </td></tr>
    <tr><td class="paramname">size</td><td>Size of the data in words. </td></tr>
    <tr><td class="paramname">originalCode</td><td>Original codes. </td></tr>
    <tr><td class="paramname">verifyCode</td><td>codes to be verified. </td></tr>
    <tr><td class="paramname">dataPath</td><td>8bit/16bit data path. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_acddb0faced2947d02082c298c51c8522_cgraph.svg" width="452" height="206"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a3faeb0e934e8487ab6af1b2c0384ae61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3faeb0e934e8487ab6af1b2c0384ae61">&sect;&nbsp;</a></span>SMC_Handler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void SMC_Handler </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check the STATUS and set the corresponding interrupt flag. </p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a3faeb0e934e8487ab6af1b2c0384ae61_icgraph.svg" width="392" height="190"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a180d11ea67004fa7c7351b9f7a52d1fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a180d11ea67004fa7c7351b9f7a52d1fd">&sect;&nbsp;</a></span>SMC_NFC_Configure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_Configure </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>cfg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets NFC configuration. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cfg</td><td>NFC configuration. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acb4a0e7516b0fa54ff8e54da7efdf221"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb4a0e7516b0fa54ff8e54da7efdf221">&sect;&nbsp;</a></span>SMC_NFC_DisableSpareRead()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_DisableSpareRead </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The NFC controller skips spare area in read mode. </p>

</div>
</div>
<a id="ae5c5171991e5c0e2de87f86846b226f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5c5171991e5c0e2de87f86846b226f2">&sect;&nbsp;</a></span>SMC_NFC_DisableSpareWrite()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_DisableSpareWrite </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The NFC controller skips spare area in write mode. </p>

</div>
</div>
<a id="aa0ac84fc652fc320188e9b3037ced514"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0ac84fc652fc320188e9b3037ced514">&sect;&nbsp;</a></span>SMC_NFC_EnableNfc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_EnableNfc </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable NFC controller. </p>

</div>
</div>
<a id="a7318614ff5229fca94e7420a5cf418bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7318614ff5229fca94e7420a5cf418bf">&sect;&nbsp;</a></span>SMC_NFC_EnableSpareRead()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_EnableSpareRead </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable NFC controller reads both main and spare area in read mode. </p>

</div>
</div>
<a id="a0cab5025b95efd08a6829d3ee6d9e683"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cab5025b95efd08a6829d3ee6d9e683">&sect;&nbsp;</a></span>SMC_NFC_EnableSpareWrite()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_EnableSpareWrite </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enables the NFC controller writes both main and spare area in write. </p>

</div>
</div>
<a id="afe9c638b5e7b4cb9e586d75e4162bf65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe9c638b5e7b4cb9e586d75e4162bf65">&sect;&nbsp;</a></span>SMC_NFC_GetStatus()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t SMC_NFC_GetStatus </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get NFC Status. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the current status register of SMC NFC Status Register. This resets the internal value of the status register, so further read may yield different values. </dd></dl>

</div>
</div>
<a id="ad7aaf9e2f36b7f6eb6660973a666d340"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7aaf9e2f36b7f6eb6660973a666d340">&sect;&nbsp;</a></span>SMC_NFC_isHostBusy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t SMC_NFC_isHostBusy </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if the host controller is busy. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns 1 if the host controller is busy, otherwise returns 0. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_ad7aaf9e2f36b7f6eb6660973a666d340_icgraph.svg" width="412" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a0fc7ed28ebe3fdaed5c987533ffae5c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fc7ed28ebe3fdaed5c987533ffae5c8">&sect;&nbsp;</a></span>SMC_NFC_isNfcBusy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t SMC_NFC_isNfcBusy </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if NFC Controller is busy. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns 1 if NFC Controller is activated and accesses the memory device, otherwise returns 0. </dd></dl>

</div>
</div>
<a id="aac96215d05aec3de097ad2d077a7f4db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac96215d05aec3de097ad2d077a7f4db">&sect;&nbsp;</a></span>SMC_NFC_isReadyBusy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t SMC_NFC_isReadyBusy </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check Ready/Busy line. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns 1 if edge has been detected on the Ready/Busy line, otherwise returns 0. </dd></dl>

</div>
</div>
<a id="a014be9f924592d2272e52c9af59f2118"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a014be9f924592d2272e52c9af59f2118">&sect;&nbsp;</a></span>SMC_NFC_isSpareRead()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t SMC_NFC_isSpareRead </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if spare area be read in read mode. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns 1 if NFC controller reads both main and spare area in read mode, otherwise returns 0. </dd></dl>

</div>
</div>
<a id="a56178c59464e71834d8d3f0831b9fce8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56178c59464e71834d8d3f0831b9fce8">&sect;&nbsp;</a></span>SMC_NFC_isSpareWrite()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t SMC_NFC_isSpareWrite </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if spare area be written in write mode. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns 1 if NFC controller writes both main and spare area in write mode, otherwise returns 0. </dd></dl>

</div>
</div>
<a id="a92bb7d654f9fc73c3e030fa00743d095"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92bb7d654f9fc73c3e030fa00743d095">&sect;&nbsp;</a></span>SMC_NFC_isTransferComplete()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t SMC_NFC_isTransferComplete </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if NFC transfer complete. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns 1 if NFC controller has terminated the data transmission, otherwise returns 0. </dd></dl>

</div>
</div>
<a id="a96e6674381e2018e36a857f7f36aa141"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96e6674381e2018e36a857f7f36aa141">&sect;&nbsp;</a></span>SMC_NFC_Reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_Reset </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reset NFC controller. </p>

</div>
</div>
<a id="ac63465026f93245b828df80c7ea0c721"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac63465026f93245b828df80c7ea0c721">&sect;&nbsp;</a></span>SMC_NFC_SendCommand()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_SendCommand </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>cmd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>addressCycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>cycle0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Uses the HOST nandflash controller to send a command to the NFC. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cmd</td><td>command to send. </td></tr>
    <tr><td class="paramname">addressCycle</td><td>address cycle when command access id decoded. </td></tr>
    <tr><td class="paramname">cycle0</td><td>address at first cycle. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_ac63465026f93245b828df80c7ea0c721_cgraph.svg" width="475" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aa44b0a4952cd572d0d0ede329e91ecc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa44b0a4952cd572d0d0ede329e91ecc6">&sect;&nbsp;</a></span>SMC_NFC_Wait_CommandDone()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_Wait_CommandDone </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait for NFC command has done. </p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_aa44b0a4952cd572d0d0ede329e91ecc6_cgraph.svg" width="392" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_aa44b0a4952cd572d0d0ede329e91ecc6_icgraph.svg" width="475" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ab0354bfe334bbfc40665ac79cfb35fc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0354bfe334bbfc40665ac79cfb35fc4">&sect;&nbsp;</a></span>SMC_NFC_Wait_HammingReady()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_Wait_HammingReady </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait for NFC Data <a class="el" href="struct_transfer.xhtml" title="Describes a transfer on a UDP endpoint. ">Transfer</a> Terminated. </p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_ab0354bfe334bbfc40665ac79cfb35fc4_cgraph.svg" width="392" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ab2e00388d4f4ddf72329e7b5a961f1da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2e00388d4f4ddf72329e7b5a961f1da">&sect;&nbsp;</a></span>SMC_NFC_Wait_RBbusy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_Wait_RBbusy </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait for NFC Ready/Busy Line 3 Edge Detected. </p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_ab2e00388d4f4ddf72329e7b5a961f1da_cgraph.svg" width="338" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a77b44da0d1691dbfafbfeb1a35c0b2fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77b44da0d1691dbfafbfeb1a35c0b2fd">&sect;&nbsp;</a></span>SMC_NFC_Wait_XfrDone()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SMC_NFC_Wait_XfrDone </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait for NFC Data <a class="el" href="struct_transfer.xhtml" title="Describes a transfer on a UDP endpoint. ">Transfer</a> Terminated. </p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="smc_8c_a77b44da0d1691dbfafbfeb1a35c0b2fd_cgraph.svg" width="342" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a086a431b3caa3da8040c625def361bb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a086a431b3caa3da8040c625def361bb9">&sect;&nbsp;</a></span>smcStatus</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="smc_8h.xhtml#a38c4c96d3a2220d6e58aa041b52c0801">SmcStatus</a> smcStatus</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
