<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XeThru Embedded Platform - XEP: src/hal/x4m0x_s70/libraries/libusb/device/hal_examples/hal_udphs.c File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">XeThru Embedded Platform - XEP
          &#160;<span id="projectnumber">3.4.7</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Embedded platform for XeThru firmware products</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_4ce6a7f885e2866a554ba9e7335035f1.xhtml">hal</a></li><li class="navelem"><a class="el" href="dir_9dc4d255e566c48428ae1788dff8c9e9.xhtml">x4m0x_s70</a></li><li class="navelem"><a class="el" href="dir_75c70effab526b28e035b6c6a3220eb7.xhtml">libraries</a></li><li class="navelem"><a class="el" href="dir_608da0ca01c56cd314839049683ac68c.xhtml">libusb</a></li><li class="navelem"><a class="el" href="dir_d2da8e13eb5c48e27ac81e92e0b056f1.xhtml">device</a></li><li class="navelem"><a class="el" href="dir_c98808c63876b0bdc8f8c5660747733a.xhtml">hal_examples</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">hal_udphs.c File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="chip_8h_source.xhtml">chip.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_u_s_b_d___h_a_l_8h_source.xhtml">USBD_HAL.h</a>&quot;</code><br />
<code>#include &lt;stdbool.h&gt;</code><br />
<code>#include &lt;stdint.h&gt;</code><br />
<code>#include &lt;stdio.h&gt;</code><br />
<code>#include &lt;string.h&gt;</code><br />
</div><div class="textblock"><div class="dynheader">
Include dependency graph for hal_udphs.c:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c__incl.svg" width="450" height="216"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_transfer_header.xhtml">TransferHeader</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes header for UDP endpoint transfer.  <a href="struct_transfer_header.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_transfer.xhtml">Transfer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes a transfer on a UDP endpoint.  <a href="struct_transfer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_mbl_transfer.xhtml">MblTransfer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes Multi Buffer List transfer on a UDP endpoint.  <a href="struct_mbl_transfer.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_endpoint.xhtml">Endpoint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes the state of an endpoint of the UDP controller.  <a href="struct_endpoint.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_udphs_dma_descriptor.xhtml">UdphsDmaDescriptor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">DMA Descriptor.  <a href="struct_udphs_dma_descriptor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga137c9e7c0bc9e12f455df0a6e41c0287"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga137c9e7c0bc9e12f455df0a6e41c0287">DMA</a></td></tr>
<tr class="separator:ga137c9e7c0bc9e12f455df0a6e41c0287"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa5f881a794f4e612b63750861ff9dc43"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaa5f881a794f4e612b63750861ff9dc43">NUM_IT_MAX</a>&#160;&#160;&#160;(UDPHS-&gt;UDPHS_IPFEATURES &amp; UDPHS_IPFEATURES_EPT_NBR_MAX_Msk)</td></tr>
<tr class="memdesc:gaa5f881a794f4e612b63750861ff9dc43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maximum number of endpoints interrupts.  <a href="group__usbd__hal.xhtml#gaa5f881a794f4e612b63750861ff9dc43">More...</a><br /></td></tr>
<tr class="separator:gaa5f881a794f4e612b63750861ff9dc43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga892015a6ce22d51cc09ee28ecceeb368"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga892015a6ce22d51cc09ee28ecceeb368">NUM_IT_MAX_DMA</a></td></tr>
<tr class="memdesc:ga892015a6ce22d51cc09ee28ecceeb368"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maximum number of endpoint DMA interrupts.  <a href="group__usbd__hal.xhtml#ga892015a6ce22d51cc09ee28ecceeb368">More...</a><br /></td></tr>
<tr class="separator:ga892015a6ce22d51cc09ee28ecceeb368"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga71f704a7c8aaf4b17965e2e55917e986"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga71f704a7c8aaf4b17965e2e55917e986">SHIFT_DMA</a>&#160;&#160;&#160;24</td></tr>
<tr class="memdesc:ga71f704a7c8aaf4b17965e2e55917e986"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bits that should be shifted to access DMA control bits.  <a href="group__usbd__hal.xhtml#ga71f704a7c8aaf4b17965e2e55917e986">More...</a><br /></td></tr>
<tr class="separator:ga71f704a7c8aaf4b17965e2e55917e986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a3966a3e34cf6f45d5c49158a47370b"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1a3966a3e34cf6f45d5c49158a47370b">SHIFT_INTERUPT</a>&#160;&#160;&#160;8</td></tr>
<tr class="memdesc:ga1a3966a3e34cf6f45d5c49158a47370b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bits that should be shifted to access interrupt bits.  <a href="group__usbd__hal.xhtml#ga1a3966a3e34cf6f45d5c49158a47370b">More...</a><br /></td></tr>
<tr class="separator:ga1a3966a3e34cf6f45d5c49158a47370b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74fb9f0009ae61530ac99e19744fc7f1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga74fb9f0009ae61530ac99e19744fc7f1">DMA_MAX_FIFO_SIZE</a>&#160;&#160;&#160;(65536/1)</td></tr>
<tr class="memdesc:ga74fb9f0009ae61530ac99e19744fc7f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Max size of the FMA FIFO.  <a href="group__usbd__hal.xhtml#ga74fb9f0009ae61530ac99e19744fc7f1">More...</a><br /></td></tr>
<tr class="separator:ga74fb9f0009ae61530ac99e19744fc7f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga19e18c1683b682fc01056cbf2b2b92f6"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga19e18c1683b682fc01056cbf2b2b92f6">EPT_VIRTUAL_SIZE</a>&#160;&#160;&#160;16384</td></tr>
<tr class="memdesc:ga19e18c1683b682fc01056cbf2b2b92f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">fifo space size in DW  <a href="group__usbd__hal.xhtml#ga19e18c1683b682fc01056cbf2b2b92f6">More...</a><br /></td></tr>
<tr class="separator:ga19e18c1683b682fc01056cbf2b2b92f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1fab52c7032d2314d73ced9188dce52f"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1fab52c7032d2314d73ced9188dce52f">UDPHS_ENDPOINT_DISABLED</a>&#160;&#160;&#160;0</td></tr>
<tr class="memdesc:ga1fab52c7032d2314d73ced9188dce52f"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is disabled.  <a href="group__usbd__hal.xhtml#ga1fab52c7032d2314d73ced9188dce52f">More...</a><br /></td></tr>
<tr class="separator:ga1fab52c7032d2314d73ced9188dce52f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga54f28f8061173dba5b54970d732f3016"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga54f28f8061173dba5b54970d732f3016">UDPHS_ENDPOINT_HALTED</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:ga54f28f8061173dba5b54970d732f3016"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is halted (i.e.  <a href="group__usbd__hal.xhtml#ga54f28f8061173dba5b54970d732f3016">More...</a><br /></td></tr>
<tr class="separator:ga54f28f8061173dba5b54970d732f3016"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4042f4c27fb1a59fa4e837a179f9cec1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4042f4c27fb1a59fa4e837a179f9cec1">UDPHS_ENDPOINT_IDLE</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:ga4042f4c27fb1a59fa4e837a179f9cec1"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is idle (i.e.  <a href="group__usbd__hal.xhtml#ga4042f4c27fb1a59fa4e837a179f9cec1">More...</a><br /></td></tr>
<tr class="separator:ga4042f4c27fb1a59fa4e837a179f9cec1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga761fbc08534b1b3308ddd4897e1dd4bd"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga761fbc08534b1b3308ddd4897e1dd4bd">UDPHS_ENDPOINT_SENDING</a>&#160;&#160;&#160;3</td></tr>
<tr class="memdesc:ga761fbc08534b1b3308ddd4897e1dd4bd"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending data.  <a href="group__usbd__hal.xhtml#ga761fbc08534b1b3308ddd4897e1dd4bd">More...</a><br /></td></tr>
<tr class="separator:ga761fbc08534b1b3308ddd4897e1dd4bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga57bdba8e2cf76761b4d9a1aebff63a54"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga57bdba8e2cf76761b4d9a1aebff63a54">UDPHS_ENDPOINT_RECEIVING</a>&#160;&#160;&#160;4</td></tr>
<tr class="memdesc:ga57bdba8e2cf76761b4d9a1aebff63a54"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving data.  <a href="group__usbd__hal.xhtml#ga57bdba8e2cf76761b4d9a1aebff63a54">More...</a><br /></td></tr>
<tr class="separator:ga57bdba8e2cf76761b4d9a1aebff63a54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84adc62db8c2e90f323b2b0a802df0a4"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga84adc62db8c2e90f323b2b0a802df0a4">UDPHS_ENDPOINT_SENDINGM</a>&#160;&#160;&#160;5</td></tr>
<tr class="memdesc:ga84adc62db8c2e90f323b2b0a802df0a4"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is sending MBL.  <a href="group__usbd__hal.xhtml#ga84adc62db8c2e90f323b2b0a802df0a4">More...</a><br /></td></tr>
<tr class="separator:ga84adc62db8c2e90f323b2b0a802df0a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga318439ae43fc0f1f83cc4c61f22b50b3"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga318439ae43fc0f1f83cc4c61f22b50b3">UDPHS_ENDPOINT_RECEIVINGM</a>&#160;&#160;&#160;6</td></tr>
<tr class="memdesc:ga318439ae43fc0f1f83cc4c61f22b50b3"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> states: <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> is receiving MBL.  <a href="group__usbd__hal.xhtml#ga318439ae43fc0f1f83cc4c61f22b50b3">More...</a><br /></td></tr>
<tr class="separator:ga318439ae43fc0f1f83cc4c61f22b50b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58081bc990ddb9737252e5794b703850"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga58081bc990ddb9737252e5794b703850">MBL_NbBuffer</a>(i,  o,  size)&#160;&#160;&#160;(((i)&gt;(o))?((i)-(o)):((i)+(size)-(o)))</td></tr>
<tr class="memdesc:ga58081bc990ddb9737252e5794b703850"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Number of buffer in Multi-Buffer-List.  <a href="group__usbd__hal.xhtml#ga58081bc990ddb9737252e5794b703850">More...</a><br /></td></tr>
<tr class="separator:ga58081bc990ddb9737252e5794b703850"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaefb1ead0b778081953b1a3dabca312c4"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaefb1ead0b778081953b1a3dabca312c4">MBL_FULL</a>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:gaefb1ead0b778081953b1a3dabca312c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Buffer list is full.  <a href="group__usbd__hal.xhtml#gaefb1ead0b778081953b1a3dabca312c4">More...</a><br /></td></tr>
<tr class="separator:gaefb1ead0b778081953b1a3dabca312c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fea9931b5288124d11803122002ac70"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga7fea9931b5288124d11803122002ac70">MBL_NULL</a>&#160;&#160;&#160;2</td></tr>
<tr class="memdesc:ga7fea9931b5288124d11803122002ac70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Buffer list is null.  <a href="group__usbd__hal.xhtml#ga7fea9931b5288124d11803122002ac70">More...</a><br /></td></tr>
<tr class="separator:ga7fea9931b5288124d11803122002ac70"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gaa50e34166752f405f9fc09d5c9ac3273"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaa50e34166752f405f9fc09d5c9ac3273">UDPHS_EnablePeripheralClock</a> (void)</td></tr>
<tr class="memdesc:gaa50e34166752f405f9fc09d5c9ac3273"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the clock of the UDP peripheral.  <a href="group__usbd__hal.xhtml#gaa50e34166752f405f9fc09d5c9ac3273">More...</a><br /></td></tr>
<tr class="separator:gaa50e34166752f405f9fc09d5c9ac3273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeeb6aaee5582dc68d5dbad6b11004f28"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaeeb6aaee5582dc68d5dbad6b11004f28">UDPHS_DisablePeripheralClock</a> (void)</td></tr>
<tr class="memdesc:gaeeb6aaee5582dc68d5dbad6b11004f28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the UDP peripheral clock.  <a href="group__usbd__hal.xhtml#gaeeb6aaee5582dc68d5dbad6b11004f28">More...</a><br /></td></tr>
<tr class="separator:gaeeb6aaee5582dc68d5dbad6b11004f28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga16cac88056411dc32b41839645ebc827"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga16cac88056411dc32b41839645ebc827">UDPHS_EnableUsbClock</a> (void)</td></tr>
<tr class="memdesc:ga16cac88056411dc32b41839645ebc827"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the 480MHz USB clock.  <a href="group__usbd__hal.xhtml#ga16cac88056411dc32b41839645ebc827">More...</a><br /></td></tr>
<tr class="separator:ga16cac88056411dc32b41839645ebc827"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga272a43243eed36047de454c2259d8910"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga272a43243eed36047de454c2259d8910">UDPHS_DisableUsbClock</a> (void)</td></tr>
<tr class="memdesc:ga272a43243eed36047de454c2259d8910"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the 480MHz USB clock.  <a href="group__usbd__hal.xhtml#ga272a43243eed36047de454c2259d8910">More...</a><br /></td></tr>
<tr class="separator:ga272a43243eed36047de454c2259d8910"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gade7d4276b337c9076acbd10a94a27ce0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gade7d4276b337c9076acbd10a94a27ce0">UDPHS_EnableBIAS</a> (void)</td></tr>
<tr class="memdesc:gade7d4276b337c9076acbd10a94a27ce0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables the BIAS.  <a href="group__usbd__hal.xhtml#gade7d4276b337c9076acbd10a94a27ce0">More...</a><br /></td></tr>
<tr class="separator:gade7d4276b337c9076acbd10a94a27ce0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacaa5bb3f65deea4b87c97f03b48eddbf"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gacaa5bb3f65deea4b87c97f03b48eddbf">UDPHS_DisableBIAS</a> (void)</td></tr>
<tr class="memdesc:gacaa5bb3f65deea4b87c97f03b48eddbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the BIAS.  <a href="group__usbd__hal.xhtml#gacaa5bb3f65deea4b87c97f03b48eddbf">More...</a><br /></td></tr>
<tr class="separator:gacaa5bb3f65deea4b87c97f03b48eddbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e6b01495743675aae106e51aee3d1e3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga5e6b01495743675aae106e51aee3d1e3">UDPHS_EndOfTransfer</a> (uint8_t bEndpoint, uint8_t bStatus)</td></tr>
<tr class="memdesc:ga5e6b01495743675aae106e51aee3d1e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles a completed transfer on the given endpoint, invoking the configured callback if any.  <a href="group__usbd__hal.xhtml#ga5e6b01495743675aae106e51aee3d1e3">More...</a><br /></td></tr>
<tr class="separator:ga5e6b01495743675aae106e51aee3d1e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga03f1cd55f5d5ed368dec0aa6ad6ccb3f"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#ga03f1cd55f5d5ed368dec0aa6ad6ccb3f">UDPHS_MblUpdate</a> (<a class="el" href="struct_mbl_transfer.xhtml">MblTransfer</a> *pTransfer, <a class="el" href="group__usbd__interface.xhtml#ga63064ab8800bf35183494fd0fe2f6b32">USBDTransferBuffer</a> *pBi, uint16_t size, uint8_t forceEnd)</td></tr>
<tr class="memdesc:ga03f1cd55f5d5ed368dec0aa6ad6ccb3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update multi-buffer-transfer descriptors.  <a href="#ga03f1cd55f5d5ed368dec0aa6ad6ccb3f">More...</a><br /></td></tr>
<tr class="separator:ga03f1cd55f5d5ed368dec0aa6ad6ccb3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5295f6d8b5a54cbe6b365e4ae1bb9633"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#ga5295f6d8b5a54cbe6b365e4ae1bb9633">UDPHS_MblWriteFifo</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga5295f6d8b5a54cbe6b365e4ae1bb9633"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfers a data payload from the current tranfer buffer to the endpoint FIFO.  <a href="#ga5295f6d8b5a54cbe6b365e4ae1bb9633">More...</a><br /></td></tr>
<tr class="separator:ga5295f6d8b5a54cbe6b365e4ae1bb9633"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga118d9d128a56e31f230bee94ac30f91e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#ga118d9d128a56e31f230bee94ac30f91e">UDPHS_WritePayload</a> (uint8_t bEndpoint, int32_t size)</td></tr>
<tr class="memdesc:ga118d9d128a56e31f230bee94ac30f91e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfers a data payload from the current tranfer buffer to the endpoint FIFO.  <a href="#ga118d9d128a56e31f230bee94ac30f91e">More...</a><br /></td></tr>
<tr class="separator:ga118d9d128a56e31f230bee94ac30f91e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga562412b12d966ee5ea983881184d51f6"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#ga562412b12d966ee5ea983881184d51f6">UDPHS_ReadPayload</a> (uint8_t bEndpoint, int32_t wPacketSize)</td></tr>
<tr class="memdesc:ga562412b12d966ee5ea983881184d51f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transfers a data payload from an endpoint FIFO to the current transfer buffer.  <a href="#ga562412b12d966ee5ea983881184d51f6">More...</a><br /></td></tr>
<tr class="separator:ga562412b12d966ee5ea983881184d51f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga51f483eefa9753c15806dfc1cfeb214a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#ga51f483eefa9753c15806dfc1cfeb214a">UDPHS_ReadRequest</a> (<a class="el" href="struct_u_s_b_generic_request.xhtml">USBGenericRequest</a> *pRequest)</td></tr>
<tr class="memdesc:ga51f483eefa9753c15806dfc1cfeb214a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Received SETUP packet from endpoint 0 FIFO.  <a href="#ga51f483eefa9753c15806dfc1cfeb214a">More...</a><br /></td></tr>
<tr class="separator:ga51f483eefa9753c15806dfc1cfeb214a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4daf62d090af26b8e55aaf9549926622"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#ga4daf62d090af26b8e55aaf9549926622">UDPHS_EndpointHandler</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga4daf62d090af26b8e55aaf9549926622"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> interrupt handler.  <a href="#ga4daf62d090af26b8e55aaf9549926622">More...</a><br /></td></tr>
<tr class="separator:ga4daf62d090af26b8e55aaf9549926622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3050097643684759b64beda54283f1e4"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#ga3050097643684759b64beda54283f1e4">UDPHS_DmaSingle</a> (uint8_t bEndpoint, <a class="el" href="struct_transfer.xhtml">Transfer</a> *pXfr, uint32_t dwCfg)</td></tr>
<tr class="memdesc:ga3050097643684759b64beda54283f1e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">DMA Single transfer.  <a href="#ga3050097643684759b64beda54283f1e4">More...</a><br /></td></tr>
<tr class="separator:ga3050097643684759b64beda54283f1e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5e6f054068ed99c861c50f2eeeb30216"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#ga5e6f054068ed99c861c50f2eeeb30216">UDPHS_DmaHandler</a> (uint8_t bEndpoint)</td></tr>
<tr class="memdesc:ga5e6f054068ed99c861c50f2eeeb30216"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> DMA interrupt handler.  <a href="#ga5e6f054068ed99c861c50f2eeeb30216">More...</a><br /></td></tr>
<tr class="separator:ga5e6f054068ed99c861c50f2eeeb30216"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga81935b1ed57f1d4e636df4565de436a5"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#ga81935b1ed57f1d4e636df4565de436a5">UDPHS_Write</a> (uint8_t bEndpoint, const void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:ga81935b1ed57f1d4e636df4565de436a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends data through a USB endpoint.  <a href="#ga81935b1ed57f1d4e636df4565de436a5">More...</a><br /></td></tr>
<tr class="separator:ga81935b1ed57f1d4e636df4565de436a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gada855d5452052e08f36853a81e3b016d"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#gada855d5452052e08f36853a81e3b016d">UDPHS_AddWr</a> (uint8_t bEndpoint, const void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:gada855d5452052e08f36853a81e3b016d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends data through a USB endpoint.  <a href="#gada855d5452052e08f36853a81e3b016d">More...</a><br /></td></tr>
<tr class="separator:gada855d5452052e08f36853a81e3b016d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadf1deb2219e27bcf29d2598d4aa04c1d"><td class="memItemLeft" align="right" valign="top">static uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="hal__udphs_8c.xhtml#gadf1deb2219e27bcf29d2598d4aa04c1d">UDPHS_Read</a> (uint8_t bEndpoint, void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:gadf1deb2219e27bcf29d2598d4aa04c1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads incoming data on an USB endpoint This methods sets the transfer descriptor and activate the endpoint interrupt.  <a href="#gadf1deb2219e27bcf29d2598d4aa04c1d">More...</a><br /></td></tr>
<tr class="separator:gadf1deb2219e27bcf29d2598d4aa04c1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga571a674fe9f9a1bba6ad08b3b0b28a80"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga571a674fe9f9a1bba6ad08b3b0b28a80">USBD_IrqHandler</a> (void)</td></tr>
<tr class="memdesc:ga571a674fe9f9a1bba6ad08b3b0b28a80"><td class="mdescLeft">&#160;</td><td class="mdescRight">USBD (UDP) interrupt handler Manages device resume, suspend, end of bus reset.  <a href="group__usbd__hal.xhtml#ga571a674fe9f9a1bba6ad08b3b0b28a80">More...</a><br /></td></tr>
<tr class="separator:ga571a674fe9f9a1bba6ad08b3b0b28a80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa9aba8ccdad2272b61db48b43466043b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaa9aba8ccdad2272b61db48b43466043b">USBD_HAL_ResetEPs</a> (uint32_t bmEPs, uint8_t bStatus, uint8_t bKeepCfg)</td></tr>
<tr class="memdesc:gaa9aba8ccdad2272b61db48b43466043b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset endpoints and disable them.  <a href="group__usbd__hal.xhtml#gaa9aba8ccdad2272b61db48b43466043b">More...</a><br /></td></tr>
<tr class="separator:gaa9aba8ccdad2272b61db48b43466043b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac15d66e72d7daa9d05116370a36aa91"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaac15d66e72d7daa9d05116370a36aa91">USBD_HAL_CancelIo</a> (uint32_t bmEPs)</td></tr>
<tr class="memdesc:gaac15d66e72d7daa9d05116370a36aa91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cancel pending READ/WRITE.  <a href="group__usbd__hal.xhtml#gaac15d66e72d7daa9d05116370a36aa91">More...</a><br /></td></tr>
<tr class="separator:gaac15d66e72d7daa9d05116370a36aa91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf17d4fe67932fa6a5dcc05f4c6d611ff"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaf17d4fe67932fa6a5dcc05f4c6d611ff">USBD_HAL_ConfigureEP</a> (const <a class="el" href="group__usb__descriptor.xhtml#ga5396acbd7f05624071e6752fdb38cca5">USBEndpointDescriptor</a> *pDescriptor)</td></tr>
<tr class="memdesc:gaf17d4fe67932fa6a5dcc05f4c6d611ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures an endpoint according to its endpoint Descriptor.  <a href="group__usbd__hal.xhtml#gaf17d4fe67932fa6a5dcc05f4c6d611ff">More...</a><br /></td></tr>
<tr class="separator:gaf17d4fe67932fa6a5dcc05f4c6d611ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafcb94bdd4c0ea327621a187814ab4f9f"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gafcb94bdd4c0ea327621a187814ab4f9f">USBD_HAL_SetTransferCallback</a> (uint8_t bEP, <a class="el" href="group__usbd__interface.xhtml#ga366a570f5d3d658362dbf52b68982bed">TransferCallback</a> fCallback, void *pCbData)</td></tr>
<tr class="memdesc:gafcb94bdd4c0ea327621a187814ab4f9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set callback for a USB endpoint for transfer (read/write).  <a href="group__usbd__hal.xhtml#gafcb94bdd4c0ea327621a187814ab4f9f">More...</a><br /></td></tr>
<tr class="separator:gafcb94bdd4c0ea327621a187814ab4f9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga62263446ee46cfc2ca48856e446f1a79"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga62263446ee46cfc2ca48856e446f1a79">USBD_HAL_SetupMblTransfer</a> (uint8_t bEndpoint, <a class="el" href="group__usbd__interface.xhtml#ga63064ab8800bf35183494fd0fe2f6b32">USBDTransferBuffer</a> *pMbList, uint16_t mblSize, uint16_t startOffset)</td></tr>
<tr class="memdesc:ga62263446ee46cfc2ca48856e446f1a79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure an endpoint to use multi-buffer-list transfer mode.  <a href="group__usbd__hal.xhtml#ga62263446ee46cfc2ca48856e446f1a79">More...</a><br /></td></tr>
<tr class="separator:ga62263446ee46cfc2ca48856e446f1a79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8293616e390cb94e93529673367acb4"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gab8293616e390cb94e93529673367acb4">USBD_HAL_Write</a> (uint8_t bEndpoint, const void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:gab8293616e390cb94e93529673367acb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends data through a USB endpoint.  <a href="group__usbd__hal.xhtml#gab8293616e390cb94e93529673367acb4">More...</a><br /></td></tr>
<tr class="separator:gab8293616e390cb94e93529673367acb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8ebf6dcf09581aa66fbfc89862516e60"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga8ebf6dcf09581aa66fbfc89862516e60">USBD_HAL_WrWithHdr</a> (uint8_t bEndpoint, const void *pHdr, uint8_t bHdrLen, const void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:ga8ebf6dcf09581aa66fbfc89862516e60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Special write function.  <a href="group__usbd__hal.xhtml#ga8ebf6dcf09581aa66fbfc89862516e60">More...</a><br /></td></tr>
<tr class="separator:ga8ebf6dcf09581aa66fbfc89862516e60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c6c76201a5c49c7e40c60c8dbdeae68"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1c6c76201a5c49c7e40c60c8dbdeae68">USBD_HAL_Read</a> (uint8_t bEndpoint, void *pData, uint32_t dLength)</td></tr>
<tr class="memdesc:ga1c6c76201a5c49c7e40c60c8dbdeae68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads incoming data on an USB endpoint This methods sets the transfer descriptor and activate the endpoint interrupt.  <a href="group__usbd__hal.xhtml#ga1c6c76201a5c49c7e40c60c8dbdeae68">More...</a><br /></td></tr>
<tr class="separator:ga1c6c76201a5c49c7e40c60c8dbdeae68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga214508a8f0f824cdcf40bca9ddac10f6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga214508a8f0f824cdcf40bca9ddac10f6">USBD_HAL_Connect</a> (void)</td></tr>
<tr class="memdesc:ga214508a8f0f824cdcf40bca9ddac10f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable Pull-up, connect.  <a href="group__usbd__hal.xhtml#ga214508a8f0f824cdcf40bca9ddac10f6">More...</a><br /></td></tr>
<tr class="separator:ga214508a8f0f824cdcf40bca9ddac10f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaded744daaee15b55f41fb2175f343b69"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaded744daaee15b55f41fb2175f343b69">USBD_HAL_Disconnect</a> (void)</td></tr>
<tr class="memdesc:gaded744daaee15b55f41fb2175f343b69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable Pull-up, disconnect.  <a href="group__usbd__hal.xhtml#gaded744daaee15b55f41fb2175f343b69">More...</a><br /></td></tr>
<tr class="separator:gaded744daaee15b55f41fb2175f343b69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga24f5a47f6815de571752ba22c98073f5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga24f5a47f6815de571752ba22c98073f5">USBD_HAL_RemoteWakeUp</a> (void)</td></tr>
<tr class="memdesc:ga24f5a47f6815de571752ba22c98073f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts a remote wake-up procedure.  <a href="group__usbd__hal.xhtml#ga24f5a47f6815de571752ba22c98073f5">More...</a><br /></td></tr>
<tr class="separator:ga24f5a47f6815de571752ba22c98073f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac8a317bd985d2ab3d3b82d093015379e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gac8a317bd985d2ab3d3b82d093015379e">USBD_HAL_SetAddress</a> (uint8_t address)</td></tr>
<tr class="memdesc:gac8a317bd985d2ab3d3b82d093015379e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the device address to the given value.  <a href="group__usbd__hal.xhtml#gac8a317bd985d2ab3d3b82d093015379e">More...</a><br /></td></tr>
<tr class="separator:gac8a317bd985d2ab3d3b82d093015379e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga05c8714f0e31ed119a4ab594d687691a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga05c8714f0e31ed119a4ab594d687691a">USBD_HAL_SetConfiguration</a> (uint8_t cfgnum)</td></tr>
<tr class="memdesc:ga05c8714f0e31ed119a4ab594d687691a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the current device configuration.  <a href="group__usbd__hal.xhtml#ga05c8714f0e31ed119a4ab594d687691a">More...</a><br /></td></tr>
<tr class="separator:ga05c8714f0e31ed119a4ab594d687691a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3699059b9b9b52b7e55af6d070a7fe61"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga3699059b9b9b52b7e55af6d070a7fe61">USBD_HAL_Init</a> (void)</td></tr>
<tr class="memdesc:ga3699059b9b9b52b7e55af6d070a7fe61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the USB HW Access driver.  <a href="group__usbd__hal.xhtml#ga3699059b9b9b52b7e55af6d070a7fe61">More...</a><br /></td></tr>
<tr class="separator:ga3699059b9b9b52b7e55af6d070a7fe61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad95d239687843031e2af3aac51ba33ad"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gad95d239687843031e2af3aac51ba33ad">USBD_HAL_Stall</a> (uint8_t bEP)</td></tr>
<tr class="memdesc:gad95d239687843031e2af3aac51ba33ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Causes the given endpoint to acknowledge the next packet it receives with a STALL handshake except setup request.  <a href="group__usbd__hal.xhtml#gad95d239687843031e2af3aac51ba33ad">More...</a><br /></td></tr>
<tr class="separator:gad95d239687843031e2af3aac51ba33ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1a1fd7ed1af2be8e202879458a6cfda7"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1a1fd7ed1af2be8e202879458a6cfda7">USBD_HAL_Halt</a> (uint8_t bEndpoint, uint8_t ctl)</td></tr>
<tr class="memdesc:ga1a1fd7ed1af2be8e202879458a6cfda7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets/Clear/Get the HALT state on the endpoint.  <a href="group__usbd__hal.xhtml#ga1a1fd7ed1af2be8e202879458a6cfda7">More...</a><br /></td></tr>
<tr class="separator:ga1a1fd7ed1af2be8e202879458a6cfda7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga946b2d10dfc497b6b24e602be6f3bd05"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga946b2d10dfc497b6b24e602be6f3bd05">USBD_HAL_IsHighSpeed</a> (void)</td></tr>
<tr class="memdesc:ga946b2d10dfc497b6b24e602be6f3bd05"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if the device is running in high or full-speed.  <a href="group__usbd__hal.xhtml#ga946b2d10dfc497b6b24e602be6f3bd05">More...</a><br /></td></tr>
<tr class="separator:ga946b2d10dfc497b6b24e602be6f3bd05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab80a4355417d88e290c88c233d5d435b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gab80a4355417d88e290c88c233d5d435b">USBD_HAL_Suspend</a> (void)</td></tr>
<tr class="memdesc:gab80a4355417d88e290c88c233d5d435b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Suspend USB Device HW Interface.  <a href="group__usbd__hal.xhtml#gab80a4355417d88e290c88c233d5d435b">More...</a><br /></td></tr>
<tr class="separator:gab80a4355417d88e290c88c233d5d435b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga72c29d7c5767f5af8df7ba1603a02619"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga72c29d7c5767f5af8df7ba1603a02619">USBD_HAL_Activate</a> (void)</td></tr>
<tr class="memdesc:ga72c29d7c5767f5af8df7ba1603a02619"><td class="mdescLeft">&#160;</td><td class="mdescRight">Activate USB Device HW Interface</p><ol type="1">
<li>Enable USB Peripheral</li>
<li>Enable USB Clock</li>
<li>Enable transceiver. </li>
</ol>
 <a href="group__usbd__hal.xhtml#ga72c29d7c5767f5af8df7ba1603a02619">More...</a><br /></td></tr>
<tr class="separator:ga72c29d7c5767f5af8df7ba1603a02619"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c996a1e96701350e2c298521b7f8630"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga3c996a1e96701350e2c298521b7f8630">USBD_HAL_Test</a> (uint8_t bIndex)</td></tr>
<tr class="memdesc:ga3c996a1e96701350e2c298521b7f8630"><td class="mdescLeft">&#160;</td><td class="mdescRight">Certification test for High Speed device.  <a href="group__usbd__hal.xhtml#ga3c996a1e96701350e2c298521b7f8630">More...</a><br /></td></tr>
<tr class="separator:ga3c996a1e96701350e2c298521b7f8630"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:gae5ead95894bdd220e35880db62b8c3d1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="struct_endpoint.xhtml">Endpoint</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gae5ead95894bdd220e35880db62b8c3d1">endpoints</a> [<a class="el" href="group__usbd__hal.xhtml#gab1098bd73746d6f0b0ab28975d2a5043">CHIP_USB_NUMENDPOINTS</a>]</td></tr>
<tr class="memdesc:gae5ead95894bdd220e35880db62b8c3d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Holds the internal state for each endpoint of the UDP.  <a href="group__usbd__hal.xhtml#gae5ead95894bdd220e35880db62b8c3d1">More...</a><br /></td></tr>
<tr class="separator:gae5ead95894bdd220e35880db62b8c3d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4280b03060f2ed7b255b622a27ce2b18"><td class="memItemLeft" align="right" valign="top">static const char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga4280b03060f2ed7b255b622a27ce2b18">test_packet_buffer</a> []</td></tr>
<tr class="memdesc:ga4280b03060f2ed7b255b622a27ce2b18"><td class="mdescLeft">&#160;</td><td class="mdescRight">7.1.20 Test Mode Support Test codes for the USB HS test mode.  <a href="group__usbd__hal.xhtml#ga4280b03060f2ed7b255b622a27ce2b18">More...</a><br /></td></tr>
<tr class="separator:ga4280b03060f2ed7b255b622a27ce2b18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2b79d64e183ae9505d0c2ace7dd1fb4"><td class="memItemLeft" align="right" valign="top">static const uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#gaf2b79d64e183ae9505d0c2ace7dd1fb4">forceUsbFS</a> = 0</td></tr>
<tr class="memdesc:gaf2b79d64e183ae9505d0c2ace7dd1fb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Force FS mode.  <a href="group__usbd__hal.xhtml#gaf2b79d64e183ae9505d0c2ace7dd1fb4">More...</a><br /></td></tr>
<tr class="separator:gaf2b79d64e183ae9505d0c2ace7dd1fb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1de7090358b3aaa73ff4b5cf1e8dc291"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="struct_udphs_dma_descriptor.xhtml">UdphsDmaDescriptor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga1de7090358b3aaa73ff4b5cf1e8dc291">dmaLL</a> [5]</td></tr>
<tr class="memdesc:ga1de7090358b3aaa73ff4b5cf1e8dc291"><td class="mdescLeft">&#160;</td><td class="mdescRight">DMA link list.  <a href="group__usbd__hal.xhtml#ga1de7090358b3aaa73ff4b5cf1e8dc291">More...</a><br /></td></tr>
<tr class="separator:ga1de7090358b3aaa73ff4b5cf1e8dc291"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga942c3fa9e248ad872f6f99acb2af883d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="struct_udphs_dma_descriptor.xhtml">UdphsDmaDescriptor</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__usbd__hal.xhtml#ga942c3fa9e248ad872f6f99acb2af883d">pDmaLL</a></td></tr>
<tr class="separator:ga942c3fa9e248ad872f6f99acb2af883d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h1><a class="anchor" id="Purpose"></a>
Purpose</h1>
<p>Implementation of USB device functions on a UDP controller.</p>
<p>See usbd_api_method USBD API Methods. </p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="gada855d5452052e08f36853a81e3b016d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gada855d5452052e08f36853a81e3b016d">&sect;&nbsp;</a></span>UDPHS_AddWr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_AddWr </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sends data through a USB endpoint. </p>
<p>Sets up the transfer descriptor list, writes one or two data payloads (depending on the number of FIFO bank for the endpoint) and then starts the actual transfer. The operation is complete when all the transfer buffer in the list has been sent.</p>
<p><em>If the size of the buffer is greater than the size of the endpoint (or twice the size if the endpoint has two FIFO banks), then the buffer must be kept allocated until the transfer is finished</em>. This means that it is not possible to declare it on the stack (i.e. as a local variable of a function which returns after starting a transfer).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pEndpoint</td><td>Pointer to <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> struct. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a buffer with the data to send. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the transfer has been started; otherwise, the corresponding error status code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_gada855d5452052e08f36853a81e3b016d_cgraph.svg" width="326" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_gada855d5452052e08f36853a81e3b016d_icgraph.svg" width="282" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga5e6f054068ed99c861c50f2eeeb30216"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5e6f054068ed99c861c50f2eeeb30216">&sect;&nbsp;</a></span>UDPHS_DmaHandler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_DmaHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> DMA interrupt handler. </p>
<p>This function handles DMA interrupts. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Index of endpoint </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga5e6f054068ed99c861c50f2eeeb30216_cgraph.svg" width="380" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga5e6f054068ed99c861c50f2eeeb30216_icgraph.svg" width="323" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga3050097643684759b64beda54283f1e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3050097643684759b64beda54283f1e4">&sect;&nbsp;</a></span>UDPHS_DmaSingle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_DmaSingle </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_transfer.xhtml">Transfer</a> *&#160;</td>
          <td class="paramname"><em>pXfr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dwCfg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>DMA Single transfer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>EP number.  Pointer to transfer instance.  DMA Control configuration (excluding length). </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga3050097643684759b64beda54283f1e4_icgraph.svg" width="518" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga4daf62d090af26b8e55aaf9549926622"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4daf62d090af26b8e55aaf9549926622">&sect;&nbsp;</a></span>UDPHS_EndpointHandler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_EndpointHandler </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> interrupt handler. </p>
<p>Handle IN/OUT transfers, received SETUP packets and STALLing </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Index of endpoint </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga4daf62d090af26b8e55aaf9549926622_cgraph.svg" width="410" height="240"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga4daf62d090af26b8e55aaf9549926622_icgraph.svg" width="348" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga03f1cd55f5d5ed368dec0aa6ad6ccb3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga03f1cd55f5d5ed368dec0aa6ad6ccb3f">&sect;&nbsp;</a></span>UDPHS_MblUpdate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_MblUpdate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_mbl_transfer.xhtml">MblTransfer</a> *&#160;</td>
          <td class="paramname"><em>pTransfer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__usbd__interface.xhtml#ga63064ab8800bf35183494fd0fe2f6b32">USBDTransferBuffer</a> *&#160;</td>
          <td class="paramname"><em>pBi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>forceEnd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Update multi-buffer-transfer descriptors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pTransfer</td><td>Pointer to instance <a class="el" href="struct_mbl_transfer.xhtml" title="Describes Multi Buffer List transfer on a UDP endpoint. ">MblTransfer</a>. </td></tr>
    <tr><td class="paramname">size</td><td>Size of bytes that processed. </td></tr>
    <tr><td class="paramname">forceEnd</td><td>Force the buffer END. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1 if current buffer ended. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga03f1cd55f5d5ed368dec0aa6ad6ccb3f_icgraph.svg" width="355" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga5295f6d8b5a54cbe6b365e4ae1bb9633"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5295f6d8b5a54cbe6b365e4ae1bb9633">&sect;&nbsp;</a></span>UDPHS_MblWriteFifo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_MblWriteFifo </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transfers a data payload from the current tranfer buffer to the endpoint FIFO. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Number of the endpoint which is sending data. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga5295f6d8b5a54cbe6b365e4ae1bb9633_cgraph.svg" width="355" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga5295f6d8b5a54cbe6b365e4ae1bb9633_icgraph.svg" width="326" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gadf1deb2219e27bcf29d2598d4aa04c1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadf1deb2219e27bcf29d2598d4aa04c1d">&sect;&nbsp;</a></span>UDPHS_Read()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_Read </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads incoming data on an USB endpoint This methods sets the transfer descriptor and activate the endpoint interrupt. </p>
<p>The actual transfer is then carried out by the endpoint interrupt handler. The Read operation finishes either when the buffer is full, or a short packet (inferior to endpoint maximum size) is received.</p>
<p><em>The buffer must be kept allocated until the transfer is finished</em>. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a data buffer. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer in bytes. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the read operation has been started; otherwise, the corresponding error code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_gadf1deb2219e27bcf29d2598d4aa04c1d_cgraph.svg" width="1111" height="2444"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga562412b12d966ee5ea983881184d51f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga562412b12d966ee5ea983881184d51f6">&sect;&nbsp;</a></span>UDPHS_ReadPayload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_ReadPayload </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>wPacketSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transfers a data payload from an endpoint FIFO to the current transfer buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td><a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> number. </td></tr>
    <tr><td class="paramname">wPacketSize</td><td>Size of received data packet </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga562412b12d966ee5ea983881184d51f6_icgraph.svg" width="398" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga51f483eefa9753c15806dfc1cfeb214a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga51f483eefa9753c15806dfc1cfeb214a">&sect;&nbsp;</a></span>UDPHS_ReadRequest()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_ReadRequest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_u_s_b_generic_request.xhtml">USBGenericRequest</a> *&#160;</td>
          <td class="paramname"><em>pRequest</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Received SETUP packet from endpoint 0 FIFO. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pRequest</td><td>Generic USB SETUP request sent over Control endpoints </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga51f483eefa9753c15806dfc1cfeb214a_icgraph.svg" width="400" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga81935b1ed57f1d4e636df4565de436a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga81935b1ed57f1d4e636df4565de436a5">&sect;&nbsp;</a></span>UDPHS_Write()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint8_t UDPHS_Write </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>dLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sends data through a USB endpoint. </p>
<p>Sets up the transfer descriptor, writes one or two data payloads (depending on the number of FIFO bank for the endpoint) and then starts the actual transfer. The operation is complete when all the data has been sent.</p>
<p><em>If the size of the buffer is greater than the size of the endpoint (or twice the size if the endpoint has two FIFO banks), then the buffer must be kept allocated until the transfer is finished</em>. This means that it is not possible to declare it on the stack (i.e. as a local variable of a function which returns after starting a transfer).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pEndpoint</td><td>Pointer to <a class="el" href="struct_endpoint.xhtml" title="Describes the state of an endpoint of the UDP controller. ">Endpoint</a> struct. </td></tr>
    <tr><td class="paramname">pData</td><td>Pointer to a buffer with the data to send. </td></tr>
    <tr><td class="paramname">dLength</td><td>Size of the data buffer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USBD_STATUS_SUCCESS if the transfer has been started; otherwise, the corresponding error status code. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga81935b1ed57f1d4e636df4565de436a5_cgraph.svg" width="312" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga81935b1ed57f1d4e636df4565de436a5_icgraph.svg" width="272" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga118d9d128a56e31f230bee94ac30f91e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga118d9d128a56e31f230bee94ac30f91e">&sect;&nbsp;</a></span>UDPHS_WritePayload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void UDPHS_WritePayload </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>bEndpoint</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transfers a data payload from the current tranfer buffer to the endpoint FIFO. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">bEndpoint</td><td>Number of the endpoint which is sending data. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="hal__udphs_8c_ga118d9d128a56e31f230bee94ac30f91e_icgraph.svg" width="398" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
