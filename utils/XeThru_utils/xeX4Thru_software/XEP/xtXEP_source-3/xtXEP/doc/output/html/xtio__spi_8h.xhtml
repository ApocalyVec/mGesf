<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XeThru Embedded Platform - XEP: src/hal/x4m0x_s70/xtio_spi.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">XeThru Embedded Platform - XEP
          &#160;<span id="projectnumber">3.4.7</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Embedded platform for XeThru firmware products</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_4ce6a7f885e2866a554ba9e7335035f1.xhtml">hal</a></li><li class="navelem"><a class="el" href="dir_9dc4d255e566c48428ae1788dff8c9e9.xhtml">x4m0x_s70</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">xtio_spi.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="xtio__spi_8h__dep__incl.svg" width="344" height="142"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</div>
<p><a href="xtio__spi_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structxtio__spi__handle__t.xhtml">xtio_spi_handle_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Struct with information/data about a SPI interface.  <a href="structxtio__spi__handle__t.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structxtio__spi__callbacks__t.xhtml">xtio_spi_callbacks_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Struct with pointers to SPI interface callback functions.  <a href="structxtio__spi__callbacks__t.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ac9739683364e9e73b35913009d80d6d3"><td class="memItemLeft" align="right" valign="top">typedef int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xtio__spi_8h.xhtml#ac9739683364e9e73b35913009d80d6d3">xtio_set_spi_mode_t</a>) (void *spi_handle, <a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52">xtio_spi_mode_t</a> xtio_spi_mode)</td></tr>
<tr class="memdesc:ac9739683364e9e73b35913009d80d6d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typedef of callback function for setting SPI mode.  <a href="#ac9739683364e9e73b35913009d80d6d3">More...</a><br /></td></tr>
<tr class="separator:ac9739683364e9e73b35913009d80d6d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd8e61df225a326c619c2e28b16a64c9"><td class="memItemLeft" align="right" valign="top">typedef int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xtio__spi_8h.xhtml#abd8e61df225a326c619c2e28b16a64c9">xtio_get_spi_mode_t</a>) (void *spi_handle, <a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52">xtio_spi_mode_t</a> *xtio_spi_mode)</td></tr>
<tr class="memdesc:abd8e61df225a326c619c2e28b16a64c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typedef of callback function for getting SPI mode.  <a href="#abd8e61df225a326c619c2e28b16a64c9">More...</a><br /></td></tr>
<tr class="separator:abd8e61df225a326c619c2e28b16a64c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcbf87c5cd2944802444e9815295aa7c"><td class="memItemLeft" align="right" valign="top">typedef int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xtio__spi_8h.xhtml#afcbf87c5cd2944802444e9815295aa7c">xtio_spi_write_t</a>) (void *spi_handle, uint8_t *write_buffer, uint32_t number_of_bytes_to_write)</td></tr>
<tr class="memdesc:afcbf87c5cd2944802444e9815295aa7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typedef of callback function for writing through SPI.  <a href="#afcbf87c5cd2944802444e9815295aa7c">More...</a><br /></td></tr>
<tr class="separator:afcbf87c5cd2944802444e9815295aa7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d63fefb7166e5714ffefc4d37ed2d47"><td class="memItemLeft" align="right" valign="top">typedef int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xtio__spi_8h.xhtml#a6d63fefb7166e5714ffefc4d37ed2d47">xtio_spi_read_t</a>) (void *spi_handle, uint8_t *read_buffer, uint32_t number_of_bytes_to_read)</td></tr>
<tr class="memdesc:a6d63fefb7166e5714ffefc4d37ed2d47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typedef of callback function for reading through SPI.  <a href="#a6d63fefb7166e5714ffefc4d37ed2d47">More...</a><br /></td></tr>
<tr class="separator:a6d63fefb7166e5714ffefc4d37ed2d47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48830ad7630e8e1d1faa44c64efc747f"><td class="memItemLeft" align="right" valign="top">typedef int(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xtio__spi_8h.xhtml#a48830ad7630e8e1d1faa44c64efc747f">xtio_spi_write_read_t</a>) (void *spi_handle, uint8_t *write_buffer, uint32_t number_of_bytes_to_write, uint8_t *read_buffer, uint32_t number_of_bytes_to_read)</td></tr>
<tr class="memdesc:a48830ad7630e8e1d1faa44c64efc747f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typedef of callback function for write + read through SPI.  <a href="#a48830ad7630e8e1d1faa44c64efc747f">More...</a><br /></td></tr>
<tr class="separator:a48830ad7630e8e1d1faa44c64efc747f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ab2897da58f31f3de27446d9f20befe52"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52">xtio_spi_mode_t</a> { <a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52ac83ef9810c154e4733e9aca74ef373ac">XTIO_SPI_NONE</a>, 
<a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52a7095e024bdce09c893562e92806fd94f">XTIO_SPI</a>, 
<a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52a27b829cf1a5f1a0602f5c69d16981adc">XTIO_QSPI</a>
 }</td></tr>
<tr class="separator:ab2897da58f31f3de27446d9f20befe52"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:af6d44e13075b75829e0be597a7537a3c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xtio__spi_8h.xhtml#af6d44e13075b75829e0be597a7537a3c">xtio_spi_init</a> (<a class="el" href="structxtio__spi__handle__t.xhtml">xtio_spi_handle_t</a> **spi_handle, void *instance_memory, <a class="el" href="structxtio__spi__callbacks__t.xhtml">xtio_spi_callbacks_t</a> *spi_callbacks, void *user_reference, <a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52">xtio_spi_mode_t</a> default_spi_mode)</td></tr>
<tr class="memdesc:af6d44e13075b75829e0be597a7537a3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the SPI system.  <a href="#af6d44e13075b75829e0be597a7537a3c">More...</a><br /></td></tr>
<tr class="separator:af6d44e13075b75829e0be597a7537a3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabfaadd9f4133263d269fda639c42b50"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xtio__spi_8h.xhtml#aabfaadd9f4133263d269fda639c42b50">xtio_spi_get_instance_size</a> (void)</td></tr>
<tr class="memdesc:aabfaadd9f4133263d269fda639c42b50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate necessary memory for xtio_spi interface.  <a href="#aabfaadd9f4133263d269fda639c42b50">More...</a><br /></td></tr>
<tr class="separator:aabfaadd9f4133263d269fda639c42b50"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="abd8e61df225a326c619c2e28b16a64c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd8e61df225a326c619c2e28b16a64c9">&sect;&nbsp;</a></span>xtio_get_spi_mode_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int(*  xtio_get_spi_mode_t) (void *spi_handle, <a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52">xtio_spi_mode_t</a> *xtio_spi_mode)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Typedef of callback function for getting SPI mode. </p>

</div>
</div>
<a id="ac9739683364e9e73b35913009d80d6d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9739683364e9e73b35913009d80d6d3">&sect;&nbsp;</a></span>xtio_set_spi_mode_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int(*  xtio_set_spi_mode_t) (void *spi_handle, <a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52">xtio_spi_mode_t</a> xtio_spi_mode)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Typedef of callback function for setting SPI mode. </p>

</div>
</div>
<a id="a6d63fefb7166e5714ffefc4d37ed2d47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d63fefb7166e5714ffefc4d37ed2d47">&sect;&nbsp;</a></span>xtio_spi_read_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int(*  xtio_spi_read_t) (void *spi_handle, uint8_t *read_buffer, uint32_t number_of_bytes_to_read)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Typedef of callback function for reading through SPI. </p>

</div>
</div>
<a id="a48830ad7630e8e1d1faa44c64efc747f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48830ad7630e8e1d1faa44c64efc747f">&sect;&nbsp;</a></span>xtio_spi_write_read_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int(*  xtio_spi_write_read_t) (void *spi_handle, uint8_t *write_buffer, uint32_t number_of_bytes_to_write, uint8_t *read_buffer, uint32_t number_of_bytes_to_read)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Typedef of callback function for write + read through SPI. </p>

</div>
</div>
<a id="afcbf87c5cd2944802444e9815295aa7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afcbf87c5cd2944802444e9815295aa7c">&sect;&nbsp;</a></span>xtio_spi_write_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int(*  xtio_spi_write_t) (void *spi_handle, uint8_t *write_buffer, uint32_t number_of_bytes_to_write)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Typedef of callback function for writing through SPI. </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="ab2897da58f31f3de27446d9f20befe52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2897da58f31f3de27446d9f20befe52">&sect;&nbsp;</a></span>xtio_spi_mode_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52">xtio_spi_mode_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ab2897da58f31f3de27446d9f20befe52ac83ef9810c154e4733e9aca74ef373ac"></a>XTIO_SPI_NONE&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab2897da58f31f3de27446d9f20befe52a7095e024bdce09c893562e92806fd94f"></a>XTIO_SPI&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ab2897da58f31f3de27446d9f20befe52a27b829cf1a5f1a0602f5c69d16981adc"></a>XTIO_QSPI&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="aabfaadd9f4133263d269fda639c42b50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabfaadd9f4133263d269fda639c42b50">&sect;&nbsp;</a></span>xtio_spi_get_instance_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t xtio_spi_get_instance_size </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate necessary memory for xtio_spi interface. </p>
<p>Return value used to allocate memory before calling <a class="el" href="xtio__spi_8h.xhtml#af6d44e13075b75829e0be597a7537a3c">xtio_spi_init</a>.</p>
<dl class="section return"><dt>Returns</dt><dd>Memory size in bytes needed to initialize SPI interface. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="xtio__spi_8h_aabfaadd9f4133263d269fda639c42b50_icgraph.svg" width="452" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="af6d44e13075b75829e0be597a7537a3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6d44e13075b75829e0be597a7537a3c">&sect;&nbsp;</a></span>xtio_spi_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int xtio_spi_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structxtio__spi__handle__t.xhtml">xtio_spi_handle_t</a> **&#160;</td>
          <td class="paramname"><em>spi_handle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>instance_memory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structxtio__spi__callbacks__t.xhtml">xtio_spi_callbacks_t</a> *&#160;</td>
          <td class="paramname"><em>spi_callbacks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>user_reference</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="xtio__spi_8h.xhtml#ab2897da58f31f3de27446d9f20befe52">xtio_spi_mode_t</a>&#160;</td>
          <td class="paramname"><em>default_spi_mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the SPI system. </p>
<p>If spi_callbacks pointers is NULL when calling this function, default internal functions would be assigned</p>
<dl class="section return"><dt>Returns</dt><dd>Status of execution as defined in <a class="el" href="xep__hal_8h.xhtml#ad084a0a637f44d3c04365d5b654fab1d">xtio_error_codes_t</a> </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="xtio__spi_8h_af6d44e13075b75829e0be597a7537a3c_cgraph.svg" width="310" height="443"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="xtio__spi_8h_af6d44e13075b75829e0be597a7537a3c_icgraph.svg" width="263" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
