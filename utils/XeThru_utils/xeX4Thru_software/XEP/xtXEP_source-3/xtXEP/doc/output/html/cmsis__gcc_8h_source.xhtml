<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XeThru Embedded Platform - XEP: src/hal/x4m0x_s70/libraries/libchip/include/cmsis/CMSIS/Include/cmsis_gcc.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">XeThru Embedded Platform - XEP
          &#160;<span id="projectnumber">3.4.7</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Embedded platform for XeThru firmware products</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_4ce6a7f885e2866a554ba9e7335035f1.xhtml">hal</a></li><li class="navelem"><a class="el" href="dir_9dc4d255e566c48428ae1788dff8c9e9.xhtml">x4m0x_s70</a></li><li class="navelem"><a class="el" href="dir_75c70effab526b28e035b6c6a3220eb7.xhtml">libraries</a></li><li class="navelem"><a class="el" href="dir_a75a6fe80fd9120ba7dd67a0b33a7bc9.xhtml">libchip</a></li><li class="navelem"><a class="el" href="dir_66d505d01f5149f3674faaa78d4997d4.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_74e208acb2b5db593baf5455224ab674.xhtml">cmsis</a></li><li class="navelem"><a class="el" href="dir_fd2588db4c2c5affdf1bbcee370aa10f.xhtml">CMSIS</a></li><li class="navelem"><a class="el" href="dir_b736d58476c43830a264712b5920737c.xhtml">Include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">cmsis_gcc.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cmsis__gcc_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**************************************************************************/</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">/* Copyright (c) 2009 - 2015 ARM LIMITED</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   All rights reserved.</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   Redistribution and use in source and binary forms, with or without</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   modification, are permitted provided that the following conditions are met:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   - Redistributions of source code must retain the above copyright</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">     notice, this list of conditions and the following disclaimer.</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">   - Redistributions in binary form must reproduce the above copyright</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">     notice, this list of conditions and the following disclaimer in the</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">     documentation and/or other materials provided with the distribution.</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">   - Neither the name of ARM nor the names of its contributors may be used</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">     to endorse or promote products derived from this software without</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">     specific prior written permission.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">   *</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">   POSSIBILITY OF SUCH DAMAGE.</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">   ---------------------------------------------------------------------------*/</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#ifndef __CMSIS_GCC_H</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#define __CMSIS_GCC_H</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/* ###########################  Core Function Access  ########################### */</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga6fea83fe11c9a07924fb1ef316a9c76c">__enable_irq</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;cpsie i&quot;</span> : : : <span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga092b96b23f27f6b4258ce84add3b1528">__disable_irq</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;cpsid i&quot;</span> : : : <span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga5fe64567d5bf0a81c118374e9a3a4598">__get_CONTROL</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  uint32_t result;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MRS %0, control&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) );</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga558df7eeb0a34765e0b54d9853d08484">__set_CONTROL</a>(uint32_t control)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MSR control, %0&quot;</span> : : <span class="stringliteral">&quot;r&quot;</span> (control) : <span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga2c18685a915eb9b7513a907c2b866636">__get_IPSR</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  uint32_t result;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MRS %0, ipsr&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) );</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#gaf082254959c727c663f2334021f1a98a">__get_APSR</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  uint32_t result;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MRS %0, apsr&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) );</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga94c675a736d4754a5f73d8748b24aa11">__get_xPSR</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;{</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  uint32_t result;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MRS %0, xpsr&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) );</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga0c569cbb49336f8d638686f9103047aa">__get_PSP</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keyword">register</span> uint32_t result;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MRS %0, psp\n&quot;</span>  : <span class="stringliteral">&quot;=r&quot;</span> (result) );</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#gab145e35dbaf6868d3a17a8ad360fe379">__set_PSP</a>(uint32_t topOfProcStack)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MSR psp, %0\n&quot;</span> : : <span class="stringliteral">&quot;r&quot;</span> (topOfProcStack) : <span class="stringliteral">&quot;sp&quot;</span>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#gac5267c10c9b15b5349eea0a959ea014c">__get_MSP</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keyword">register</span> uint32_t result;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MRS %0, msp\n&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) );</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga1ff33c0b5ed0e687dd7967a1dd283d5f">__set_MSP</a>(uint32_t topOfMainStack)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MSR msp, %0\n&quot;</span> : : <span class="stringliteral">&quot;r&quot;</span> (topOfMainStack) : <span class="stringliteral">&quot;sp&quot;</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#gac9e3a67ff722261b89c77ebe49b6f9a7">__get_PRIMASK</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  uint32_t result;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MRS %0, primask&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) );</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga42e74e3fffe1a2d93db1de04d9260929">__set_PRIMASK</a>(uint32_t priMask)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MSR primask, %0&quot;</span> : : <span class="stringliteral">&quot;r&quot;</span> (priMask) : <span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;}</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#if       (__CORTEX_M &gt;= 0x03U)</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> __enable_fault_irq(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;cpsie f&quot;</span> : : : <span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> __disable_fault_irq(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;cpsid f&quot;</span> : : : <span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  uint32_t result;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MRS %0, basepri&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) );</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> __set_BASEPRI(uint32_t value)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;{</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MSR basepri, %0&quot;</span> : : <span class="stringliteral">&quot;r&quot;</span> (value) : <span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;}</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> __set_BASEPRI_MAX(uint32_t value)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MSR basepri_max, %0&quot;</span> : : <span class="stringliteral">&quot;r&quot;</span> (value) : <span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  uint32_t result;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MRS %0, faultmask&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) );</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> __set_FAULTMASK(uint32_t faultMask)</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;{</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;MSR faultmask, %0&quot;</span> : : <span class="stringliteral">&quot;r&quot;</span> (faultMask) : <span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* (__CORTEX_M &gt;= 0x03U) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">#if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;{</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="preprocessor">#if (__FPU_PRESENT == 1U) &amp;&amp; (__FPU_USED == 1U)</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  uint32_t result;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  <span class="comment">/* Empty asm statement works as a scheduling barrier */</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;VMRS %0, fpscr&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) );</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;   <span class="keywordflow">return</span>(0);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;}</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE <span class="keywordtype">void</span> __set_FPSCR(uint32_t fpscr)</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="preprocessor">#if (__FPU_PRESENT == 1U) &amp;&amp; (__FPU_USED == 1U)</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="comment">/* Empty asm statement works as a scheduling barrier */</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">//  __ASM volatile (&quot;VMSR fpscr, %0&quot; : : &quot;r&quot; (fpscr) : &quot;vfpcc&quot;);          // ARMCC_V6: needs to be checked</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;}</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">/* ##########################  Core Instruction Access  ######################### */</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">/* Define macros for porting to both thumb1 and thumb2.</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"> * For thumb1, use low register (r0-r7), specified by constrant &quot;l&quot;</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"> * Otherwise, use general registers, specified by constrant &quot;r&quot; */</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="preprocessor">#if defined (__thumb__) &amp;&amp; !defined (__thumb2__)</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="preprocessor">#define __CMSIS_GCC_OUT_REG(r) &quot;=l&quot; (r)</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="preprocessor">#define __CMSIS_GCC_USE_REG(r) &quot;l&quot; (r)</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00373"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabc17e391c13c71702366c67cba39c276">  373</a></span>&#160;<span class="preprocessor">#define __CMSIS_GCC_OUT_REG(r) &quot;=r&quot; (r)</span></div><div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga9d94dee7402367961d2cf0accc00fd97">  374</a></span>&#160;<span class="preprocessor">#define __CMSIS_GCC_USE_REG(r) &quot;r&quot; (r)</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga8bb1a07c32b865536006f46d4097fdc0">  381</a></span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga8bb1a07c32b865536006f46d4097fdc0">__NOP</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;{</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;nop&quot;</span>);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga8a55dfb43484b3ed4d181761f92cc2db">  392</a></span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga8a55dfb43484b3ed4d181761f92cc2db">__WFI</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;{</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;wfi&quot;</span>);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabc8691e5435c84f33831dee89ba0b3eb">  403</a></span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabc8691e5435c84f33831dee89ba0b3eb">__WFE</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;{</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;wfe&quot;</span>);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;}</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gac16f26f14c620f2c854cded3b7b1a999">  413</a></span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gac16f26f14c620f2c854cded3b7b1a999">__SEV</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;{</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;sev&quot;</span>);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga8f5af376adcfaea7f2ddb3ef9b6b2544">  425</a></span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga8f5af376adcfaea7f2ddb3ef9b6b2544">__ISB</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;{</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;isb 0xF&quot;</span>:::<span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;}</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga5c7a006f5ba5778972ac9516733a0cc4">  436</a></span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga5c7a006f5ba5778972ac9516733a0cc4">__DSB</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;{</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;dsb 0xF&quot;</span>:::<span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;}</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabf4161df67564feda90581aa4917a515">  447</a></span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabf4161df67564feda90581aa4917a515">__DMB</a>(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;{</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;dmb 0xF&quot;</span>:::<span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;}</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga4396627e66be3b45a9074783d1ca507e">  460</a></span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga4396627e66be3b45a9074783d1ca507e">__REV</a>(uint32_t value)</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;{</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="preprocessor">#if (__GNUC__ &gt; 4) || (__GNUC__ == 4 &amp;&amp; __GNUC_MINOR__ &gt;= 5)</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  <span class="keywordflow">return</span> __builtin_bswap32(value);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  uint32_t result;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;rev %0, %1&quot;</span> : <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabc17e391c13c71702366c67cba39c276">__CMSIS_GCC_OUT_REG</a> (result) : <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga9d94dee7402367961d2cf0accc00fd97">__CMSIS_GCC_USE_REG</a> (value) );</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;}</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gaf2c5bef14a2884d08cace0c784654db6">__REV16</a>(uint32_t value)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;{</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  uint32_t result;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;rev16 %0, %1&quot;</span> : <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabc17e391c13c71702366c67cba39c276">__CMSIS_GCC_OUT_REG</a> (result) : <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga9d94dee7402367961d2cf0accc00fd97">__CMSIS_GCC_USE_REG</a> (value) );</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;}</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;__attribute__((always_inline)) __STATIC_INLINE int32_t <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gadf722e3df4586108e43cce4b757e195b">__REVSH</a>(int32_t value)</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="preprocessor">#if (__GNUC__ &gt; 4) || (__GNUC__ == 4 &amp;&amp; __GNUC_MINOR__ &gt;= 8)</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;  <span class="keywordflow">return</span> (<span class="keywordtype">short</span>)__builtin_bswap16(value);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;  int32_t result;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;revsh %0, %1&quot;</span> : <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabc17e391c13c71702366c67cba39c276">__CMSIS_GCC_OUT_REG</a> (result) : <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga9d94dee7402367961d2cf0accc00fd97">__CMSIS_GCC_USE_REG</a> (value) );</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;}</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gab766d910fae775ead451aa4bafbe682d">__ROR</a>(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;{</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;  <span class="keywordflow">return</span> (op1 &gt;&gt; op2) | (op1 &lt;&lt; (32U - op2));</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga15ea6bd3c507d3e81c3b3a1258e46397">  531</a></span>&#160;<span class="preprocessor">#define __BKPT(value)                       __ASM volatile (&quot;bkpt &quot;#value)</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint32_t <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga03cb1ad07cb0bacb736cc302ebdbcc0c">__RBIT</a>(uint32_t value)</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;{</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;  uint32_t result;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="preprocessor">#if       (__CORTEX_M &gt;= 0x03U) || (__CORTEX_SC &gt;= 300U)</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;rbit %0, %1&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (value) );</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;  int32_t s = 4 <span class="comment">/*sizeof(v)*/</span> * 8 - 1; <span class="comment">// extra shift needed at end</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;  result = value;                      <span class="comment">// r will be reversed bits of v; first get LSB of v</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;  <span class="keywordflow">for</span> (value &gt;&gt;= 1U; value; value &gt;&gt;= 1U)</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;  {</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    result &lt;&lt;= 1U;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    result |= value &amp; 1U;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    s--;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;  }</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  result &lt;&lt;= s;                       <span class="comment">// shift when v&#39;s highest bits are zero</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;}</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno"><a class="line" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga5d5bb1527e042be4a9fa5a33f65cc248">  570</a></span>&#160;<span class="preprocessor">#define __CLZ             __builtin_clz</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="preprocessor">#if       (__CORTEX_M &gt;= 0x03U) || (__CORTEX_SC &gt;= 300U)</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint8_t __LDREXB(volatile uint8_t *addr)</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;{</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    uint32_t result;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="preprocessor">#if (__GNUC__ &gt; 4) || (__GNUC__ == 4 &amp;&amp; __GNUC_MINOR__ &gt;= 8)</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ldrexb %0, %1&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;Q&quot;</span> (*addr) );</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="comment">/* Prior to GCC 4.8, &quot;Q&quot; will be expanded to [rx, #0] which is not</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment">       accepted by assembler. So has to use following less efficient pattern.</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ldrexb %0, [%1]&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (addr) : <span class="stringliteral">&quot;memory&quot;</span> );</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;   <span class="keywordflow">return</span> ((uint8_t) result);    <span class="comment">/* Add explicit type cast here */</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;}</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint16_t __LDREXH(<span class="keyword">volatile</span> uint16_t *addr)</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;{</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    uint32_t result;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="preprocessor">#if (__GNUC__ &gt; 4) || (__GNUC__ == 4 &amp;&amp; __GNUC_MINOR__ &gt;= 8)</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ldrexh %0, %1&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;Q&quot;</span> (*addr) );</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="comment">/* Prior to GCC 4.8, &quot;Q&quot; will be expanded to [rx, #0] which is not</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment">       accepted by assembler. So has to use following less efficient pattern.</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ldrexh %0, [%1]&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (addr) : <span class="stringliteral">&quot;memory&quot;</span> );</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;   <span class="keywordflow">return</span> ((uint16_t) result);    <span class="comment">/* Add explicit type cast here */</span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;}</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint32_t __LDREXW(<span class="keyword">volatile</span> uint32_t *addr)</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;{</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    uint32_t result;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ldrex %0, %1&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;Q&quot;</span> (*addr) );</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;   <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;}</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint32_t __STREXB(uint8_t value, <span class="keyword">volatile</span> uint8_t *addr)</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;{</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;   uint32_t result;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;strexb %0, %2, %1&quot;</span> : <span class="stringliteral">&quot;=&amp;r&quot;</span> (result), <span class="stringliteral">&quot;=Q&quot;</span> (*addr) : <span class="stringliteral">&quot;r&quot;</span> ((uint32_t)value) );</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;   <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;}</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint32_t __STREXH(uint16_t value, <span class="keyword">volatile</span> uint16_t *addr)</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;{</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;   uint32_t result;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;strexh %0, %2, %1&quot;</span> : <span class="stringliteral">&quot;=&amp;r&quot;</span> (result), <span class="stringliteral">&quot;=Q&quot;</span> (*addr) : <span class="stringliteral">&quot;r&quot;</span> ((uint32_t)value) );</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;   <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;}</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint32_t __STREXW(uint32_t value, <span class="keyword">volatile</span> uint32_t *addr)</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;{</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;   uint32_t result;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;strex %0, %2, %1&quot;</span> : <span class="stringliteral">&quot;=&amp;r&quot;</span> (result), <span class="stringliteral">&quot;=Q&quot;</span> (*addr) : <span class="stringliteral">&quot;r&quot;</span> (value) );</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;   <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;}</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> __CLREX(<span class="keywordtype">void</span>)</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;{</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;clrex&quot;</span> ::: <span class="stringliteral">&quot;memory&quot;</span>);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;}</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="preprocessor">#define __SSAT(ARG1,ARG2) \</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="preprocessor">({                          \</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="preprocessor">  uint32_t __RES, __ARG1 = (ARG1); \</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="preprocessor">  __ASM (&quot;ssat %0, %1, %2&quot; : &quot;=r&quot; (__RES) :  &quot;I&quot; (ARG2), &quot;r&quot; (__ARG1) ); \</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="preprocessor">  __RES; \</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="preprocessor"> })</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="preprocessor">#define __USAT(ARG1,ARG2) \</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<span class="preprocessor">({                          \</span></div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="preprocessor">  uint32_t __RES, __ARG1 = (ARG1); \</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="preprocessor">  __ASM (&quot;usat %0, %1, %2&quot; : &quot;=r&quot; (__RES) :  &quot;I&quot; (ARG2), &quot;r&quot; (__ARG1) ); \</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="preprocessor">  __RES; \</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="preprocessor"> })</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint32_t __RRX(uint32_t value)</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;{</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;  uint32_t result;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;rrx %0, %1&quot;</span> : <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabc17e391c13c71702366c67cba39c276">__CMSIS_GCC_OUT_REG</a> (result) : <a class="code" href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga9d94dee7402367961d2cf0accc00fd97">__CMSIS_GCC_USE_REG</a> (value) );</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;}</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint8_t __LDRBT(<span class="keyword">volatile</span> uint8_t *addr)</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;{</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    uint32_t result;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="preprocessor">#if (__GNUC__ &gt; 4) || (__GNUC__ == 4 &amp;&amp; __GNUC_MINOR__ &gt;= 8)</span></div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ldrbt %0, %1&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;Q&quot;</span> (*addr) );</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="comment">/* Prior to GCC 4.8, &quot;Q&quot; will be expanded to [rx, #0] which is not</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment">       accepted by assembler. So has to use following less efficient pattern.</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ldrbt %0, [%1]&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (addr) : <span class="stringliteral">&quot;memory&quot;</span> );</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;   <span class="keywordflow">return</span> ((uint8_t) result);    <span class="comment">/* Add explicit type cast here */</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;}</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint16_t __LDRHT(<span class="keyword">volatile</span> uint16_t *addr)</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;{</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    uint32_t result;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="preprocessor">#if (__GNUC__ &gt; 4) || (__GNUC__ == 4 &amp;&amp; __GNUC_MINOR__ &gt;= 8)</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ldrht %0, %1&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;Q&quot;</span> (*addr) );</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="comment">/* Prior to GCC 4.8, &quot;Q&quot; will be expanded to [rx, #0] which is not</span></div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="comment">       accepted by assembler. So has to use following less efficient pattern.</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ldrht %0, [%1]&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (addr) : <span class="stringliteral">&quot;memory&quot;</span> );</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;   <span class="keywordflow">return</span> ((uint16_t) result);    <span class="comment">/* Add explicit type cast here */</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;}</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;__attribute__((always_inline)) __STATIC_INLINE uint32_t __LDRT(<span class="keyword">volatile</span> uint32_t *addr)</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;{</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    uint32_t result;</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ldrt %0, %1&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;Q&quot;</span> (*addr) );</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;   <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;}</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> __STRBT(uint8_t value, <span class="keyword">volatile</span> uint8_t *addr)</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;{</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;strbt %1, %0&quot;</span> : <span class="stringliteral">&quot;=Q&quot;</span> (*addr) : <span class="stringliteral">&quot;r&quot;</span> ((uint32_t)value) );</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;}</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> __STRHT(uint16_t value, <span class="keyword">volatile</span> uint16_t *addr)</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;{</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;strht %1, %0&quot;</span> : <span class="stringliteral">&quot;=Q&quot;</span> (*addr) : <span class="stringliteral">&quot;r&quot;</span> ((uint32_t)value) );</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;}</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;__attribute__((always_inline)) __STATIC_INLINE <span class="keywordtype">void</span> __STRT(uint32_t value, <span class="keyword">volatile</span> uint32_t *addr)</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;{</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;   __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;strt %1, %0&quot;</span> : <span class="stringliteral">&quot;=Q&quot;</span> (*addr) : <span class="stringliteral">&quot;r&quot;</span> (value) );</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;}</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* (__CORTEX_M &gt;= 0x03U) || (__CORTEX_SC &gt;= 300U) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160; <span class="comment">/* end of group CMSIS_Core_InstructionInterface */</span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="comment">/* ###################  Compiler specific Intrinsics  ########################### */</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="preprocessor">#if (__CORTEX_M &gt;= 0x04)  </span><span class="comment">/* only for Cortex-M4 and above */</span><span class="preprocessor"></span></div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SADD8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;{</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;  uint32_t result;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;sadd8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;}</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;{</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;  uint32_t result;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;qadd8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;}</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHADD8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;{</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;  uint32_t result;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;shadd8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;}</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UADD8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;{</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;  uint32_t result;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uadd8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;}</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQADD8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;{</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;  uint32_t result;</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uqadd8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;}</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHADD8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;{</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;  uint32_t result;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uhadd8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;}</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SSUB8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;{</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;  uint32_t result;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ssub8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;}</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;{</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;  uint32_t result;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;qsub8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;}</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHSUB8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;{</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;  uint32_t result;</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;shsub8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;}</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USUB8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;{</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;  uint32_t result;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;usub8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;}</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQSUB8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;{</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;  uint32_t result;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uqsub8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;}</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHSUB8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;{</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;  uint32_t result;</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uhsub8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;}</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SADD16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;{</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;  uint32_t result;</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;sadd16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;}</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;{</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;  uint32_t result;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;qadd16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;}</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHADD16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;{</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;  uint32_t result;</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;shadd16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;}</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UADD16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;{</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;  uint32_t result;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uadd16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;}</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQADD16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;{</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;  uint32_t result;</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uqadd16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;}</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHADD16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;{</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;  uint32_t result;</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uhadd16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;}</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SSUB16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;{</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;  uint32_t result;</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ssub16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;}</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;{</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;  uint32_t result;</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;qsub16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;}</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHSUB16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;{</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;  uint32_t result;</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;shsub16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;}</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USUB16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;{</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;  uint32_t result;</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;usub16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;}</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQSUB16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;{</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;  uint32_t result;</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uqsub16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;}</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHSUB16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;{</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;  uint32_t result;</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uhsub16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;}</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SASX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;{</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;  uint32_t result;</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;sasx %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;}</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QASX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;{</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;  uint32_t result;</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;qasx %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;}</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHASX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;{</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;  uint32_t result;</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;shasx %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;}</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UASX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;{</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;  uint32_t result;</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uasx %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;}</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQASX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;{</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;  uint32_t result;</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uqasx %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;}</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHASX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;{</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;  uint32_t result;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uhasx %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;}</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SSAX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;{</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;  uint32_t result;</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;ssax %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;}</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSAX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;{</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;  uint32_t result;</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;qsax %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;}</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHSAX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;{</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;  uint32_t result;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;shsax %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;}</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USAX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;{</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;  uint32_t result;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;usax %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;}</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UQSAX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;{</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;  uint32_t result;</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uqsax %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;}</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UHSAX(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;{</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;  uint32_t result;</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uhsax %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;}</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USAD8(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;{</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;  uint32_t result;</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;usad8 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;}</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;{</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;  uint32_t result;</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;usada8 %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2), <span class="stringliteral">&quot;r&quot;</span> (op3) );</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;}</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;<span class="preprocessor">#define __SSAT16(ARG1,ARG2) \</span></div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;<span class="preprocessor">({                          \</span></div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;<span class="preprocessor">  uint32_t __RES, __ARG1 = (ARG1); \</span></div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;<span class="preprocessor">  __ASM (&quot;ssat16 %0, %1, %2&quot; : &quot;=r&quot; (__RES) :  &quot;I&quot; (ARG2), &quot;r&quot; (__ARG1) ); \</span></div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;<span class="preprocessor">  __RES; \</span></div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;<span class="preprocessor"> })</span></div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;<span class="preprocessor">#define __USAT16(ARG1,ARG2) \</span></div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;<span class="preprocessor">({                          \</span></div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="preprocessor">  uint32_t __RES, __ARG1 = (ARG1); \</span></div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;<span class="preprocessor">  __ASM (&quot;usat16 %0, %1, %2&quot; : &quot;=r&quot; (__RES) :  &quot;I&quot; (ARG2), &quot;r&quot; (__ARG1) ); \</span></div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;<span class="preprocessor">  __RES; \</span></div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;<span class="preprocessor"> })</span></div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UXTB16(uint32_t op1)</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;{</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;  uint32_t result;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uxtb16 %0, %1&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1));</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;}</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __UXTAB16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;{</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;  uint32_t result;</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;uxtab16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;}</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SXTB16(uint32_t op1)</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;{</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;  uint32_t result;</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;sxtb16 %0, %1&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1));</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;}</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;{</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;  uint32_t result;</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;sxtab16 %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;}</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;{</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;  uint32_t result;</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smuad %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;}</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUADX (uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;{</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;  uint32_t result;</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smuadx %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;}</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;{</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;  uint32_t result;</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlad %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2), <span class="stringliteral">&quot;r&quot;</span> (op3) );</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;}</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;{</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;  uint32_t result;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smladx %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2), <span class="stringliteral">&quot;r&quot;</span> (op3) );</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;}</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;{</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;  <span class="keyword">union </span>llreg_u{</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    uint32_t w32[2];</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    uint64_t w64;</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;  } llr;</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;  llr.w64 = acc;</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;<span class="preprocessor">#ifndef __ARMEB__   // Little endian</span></div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlald %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[0]), <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[1]): <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) , <span class="stringliteral">&quot;0&quot;</span> (llr.w32[0]), <span class="stringliteral">&quot;1&quot;</span> (llr.w32[1]) );</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;<span class="preprocessor">#else               // Big endian</span></div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlald %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[1]), <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[0]): <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) , <span class="stringliteral">&quot;0&quot;</span> (llr.w32[1]), <span class="stringliteral">&quot;1&quot;</span> (llr.w32[0]) );</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;  <span class="keywordflow">return</span>(llr.w64);</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;}</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;{</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;  <span class="keyword">union </span>llreg_u{</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    uint32_t w32[2];</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    uint64_t w64;</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;  } llr;</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;  llr.w64 = acc;</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;<span class="preprocessor">#ifndef __ARMEB__   // Little endian</span></div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlaldx %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[0]), <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[1]): <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) , <span class="stringliteral">&quot;0&quot;</span> (llr.w32[0]), <span class="stringliteral">&quot;1&quot;</span> (llr.w32[1]) );</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;<span class="preprocessor">#else               // Big endian</span></div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlaldx %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[1]), <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[0]): <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) , <span class="stringliteral">&quot;0&quot;</span> (llr.w32[1]), <span class="stringliteral">&quot;1&quot;</span> (llr.w32[0]) );</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;  <span class="keywordflow">return</span>(llr.w64);</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;}</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUSD  (uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;{</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;  uint32_t result;</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smusd %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;}</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUSDX (uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;{</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;  uint32_t result;</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smusdx %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;}</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;{</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;  uint32_t result;</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlsd %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2), <span class="stringliteral">&quot;r&quot;</span> (op3) );</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;}</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;{</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;  uint32_t result;</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlsdx %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2), <span class="stringliteral">&quot;r&quot;</span> (op3) );</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;}</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;{</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;  <span class="keyword">union </span>llreg_u{</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    uint32_t w32[2];</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    uint64_t w64;</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;  } llr;</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;  llr.w64 = acc;</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;<span class="preprocessor">#ifndef __ARMEB__   // Little endian</span></div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlsld %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[0]), <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[1]): <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) , <span class="stringliteral">&quot;0&quot;</span> (llr.w32[0]), <span class="stringliteral">&quot;1&quot;</span> (llr.w32[1]) );</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;<span class="preprocessor">#else               // Big endian</span></div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlsld %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[1]), <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[0]): <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) , <span class="stringliteral">&quot;0&quot;</span> (llr.w32[1]), <span class="stringliteral">&quot;1&quot;</span> (llr.w32[0]) );</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;  <span class="keywordflow">return</span>(llr.w64);</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;}</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;{</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;  <span class="keyword">union </span>llreg_u{</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    uint32_t w32[2];</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    uint64_t w64;</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;  } llr;</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;  llr.w64 = acc;</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;<span class="preprocessor">#ifndef __ARMEB__   // Little endian</span></div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlsldx %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[0]), <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[1]): <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) , <span class="stringliteral">&quot;0&quot;</span> (llr.w32[0]), <span class="stringliteral">&quot;1&quot;</span> (llr.w32[1]) );</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;<span class="preprocessor">#else               // Big endian</span></div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smlsldx %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[1]), <span class="stringliteral">&quot;=r&quot;</span> (llr.w32[0]): <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) , <span class="stringliteral">&quot;0&quot;</span> (llr.w32[1]), <span class="stringliteral">&quot;1&quot;</span> (llr.w32[0]) );</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;  <span class="keywordflow">return</span>(llr.w64);</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;}</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SEL  (uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;{</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;  uint32_t result;</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;sel %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;}</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QADD(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;{</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;  uint32_t result;</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;qadd %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;}</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB(uint32_t op1, uint32_t op2)</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;{</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;  uint32_t result;</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;  __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;qsub %0, %1, %2&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result) : <span class="stringliteral">&quot;r&quot;</span> (op1), <span class="stringliteral">&quot;r&quot;</span> (op2) );</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;  <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;}</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;<span class="preprocessor">#define __PKHBT(ARG1,ARG2,ARG3) \</span></div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="preprocessor">({                          \</span></div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;<span class="preprocessor">  uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2); \</span></div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;<span class="preprocessor">  __ASM (&quot;pkhbt %0, %1, %2, lsl %3&quot; : &quot;=r&quot; (__RES) :  &quot;r&quot; (__ARG1), &quot;r&quot; (__ARG2), &quot;I&quot; (ARG3)  ); \</span></div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;<span class="preprocessor">  __RES; \</span></div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;<span class="preprocessor"> })</span></div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;<span class="preprocessor">#define __PKHTB(ARG1,ARG2,ARG3) \</span></div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;<span class="preprocessor">({                          \</span></div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;<span class="preprocessor">  uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2); \</span></div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;<span class="preprocessor">  if (ARG3 == 0) \</span></div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;<span class="preprocessor">    __ASM (&quot;pkhtb %0, %1, %2&quot; : &quot;=r&quot; (__RES) :  &quot;r&quot; (__ARG1), &quot;r&quot; (__ARG2)  ); \</span></div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;<span class="preprocessor">  else \</span></div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;<span class="preprocessor">    __ASM (&quot;pkhtb %0, %1, %2, asr %3&quot; : &quot;=r&quot; (__RES) :  &quot;r&quot; (__ARG1), &quot;r&quot; (__ARG2), &quot;I&quot; (ARG3)  ); \</span></div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;<span class="preprocessor">  __RES; \</span></div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;<span class="preprocessor"> })</span></div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;{</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160; int32_t result;</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160; __ASM <span class="keyword">volatile</span> (<span class="stringliteral">&quot;smmla %0, %1, %2, %3&quot;</span> : <span class="stringliteral">&quot;=r&quot;</span> (result): <span class="stringliteral">&quot;r&quot;</span>  (op1), <span class="stringliteral">&quot;r&quot;</span> (op2), <span class="stringliteral">&quot;r&quot;</span> (op3) );</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160; <span class="keywordflow">return</span>(result);</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;}</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* (__CORTEX_M &gt;= 0x04) */</span><span class="preprocessor"></span></div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __CMSIS_GCC_H */</span><span class="preprocessor"></span></div><div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_gaf082254959c727c663f2334021f1a98a"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#gaf082254959c727c663f2334021f1a98a">__get_APSR</a></div><div class="ttdeci">__STATIC_INLINE uint32_t __get_APSR(void)</div><div class="ttdoc">Get APSR Register. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:97</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_ga03cb1ad07cb0bacb736cc302ebdbcc0c"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga03cb1ad07cb0bacb736cc302ebdbcc0c">__RBIT</a></div><div class="ttdeci">__STATIC_INLINE uint32_t __RBIT(uint32_t value)</div><div class="ttdoc">Reverse bit order of value. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:475</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_ga092b96b23f27f6b4258ce84add3b1528"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga092b96b23f27f6b4258ce84add3b1528">__disable_irq</a></div><div class="ttdeci">__STATIC_INLINE void __disable_irq(void)</div><div class="ttdoc">Disable IRQ Interrupts. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc_V6.h:61</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_ga94c675a736d4754a5f73d8748b24aa11"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga94c675a736d4754a5f73d8748b24aa11">__get_xPSR</a></div><div class="ttdeci">__STATIC_INLINE uint32_t __get_xPSR(void)</div><div class="ttdoc">Get xPSR Register. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:110</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_gabf4161df67564feda90581aa4917a515"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabf4161df67564feda90581aa4917a515">__DMB</a></div><div class="ttdeci">__STATIC_INLINE void __DMB(void)</div><div class="ttdoc">Data Memory Barrier. </div><div class="ttdef"><b>Definition:</b> cmsis_gcc.h:447</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_gac9e3a67ff722261b89c77ebe49b6f9a7"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#gac9e3a67ff722261b89c77ebe49b6f9a7">__get_PRIMASK</a></div><div class="ttdeci">__STATIC_INLINE uint32_t __get_PRIMASK(void)</div><div class="ttdoc">Get Priority Mask. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:175</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_ga6fea83fe11c9a07924fb1ef316a9c76c"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga6fea83fe11c9a07924fb1ef316a9c76c">__enable_irq</a></div><div class="ttdeci">__STATIC_INLINE void __enable_irq(void)</div><div class="ttdoc">Enable IRQ Interrupts. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc_V6.h:50</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_ga8bb1a07c32b865536006f46d4097fdc0"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga8bb1a07c32b865536006f46d4097fdc0">__NOP</a></div><div class="ttdeci">__STATIC_INLINE void __NOP(void)</div><div class="ttdoc">No Operation. </div><div class="ttdef"><b>Definition:</b> cmsis_gcc.h:381</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_gaf2c5bef14a2884d08cace0c784654db6"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#gaf2c5bef14a2884d08cace0c784654db6">__REV16</a></div><div class="ttdeci">__STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)</div><div class="ttdoc">Reverse byte order (16 bit) </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:420</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_gac5267c10c9b15b5349eea0a959ea014c"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#gac5267c10c9b15b5349eea0a959ea014c">__get_MSP</a></div><div class="ttdeci">__STATIC_INLINE uint32_t __get_MSP(void)</div><div class="ttdoc">Get Main Stack Pointer. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:149</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_ga4396627e66be3b45a9074783d1ca507e"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga4396627e66be3b45a9074783d1ca507e">__REV</a></div><div class="ttdeci">__STATIC_INLINE uint32_t __REV(uint32_t value)</div><div class="ttdoc">Reverse byte order (32 bit) </div><div class="ttdef"><b>Definition:</b> cmsis_gcc.h:460</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_ga8a55dfb43484b3ed4d181761f92cc2db"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga8a55dfb43484b3ed4d181761f92cc2db">__WFI</a></div><div class="ttdeci">__STATIC_INLINE void __WFI(void)</div><div class="ttdoc">Wait For Interrupt. </div><div class="ttdef"><b>Definition:</b> cmsis_gcc.h:392</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_gadf722e3df4586108e43cce4b757e195b"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#gadf722e3df4586108e43cce4b757e195b">__REVSH</a></div><div class="ttdeci">__STATIC_INLINE __ASM int32_t __REVSH(int32_t value)</div><div class="ttdoc">Reverse byte order in signed short value. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:435</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_ga2c18685a915eb9b7513a907c2b866636"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga2c18685a915eb9b7513a907c2b866636">__get_IPSR</a></div><div class="ttdeci">__STATIC_INLINE uint32_t __get_IPSR(void)</div><div class="ttdoc">Get IPSR Register. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:84</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_ga9d94dee7402367961d2cf0accc00fd97"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga9d94dee7402367961d2cf0accc00fd97">__CMSIS_GCC_USE_REG</a></div><div class="ttdeci">#define __CMSIS_GCC_USE_REG(r)</div><div class="ttdef"><b>Definition:</b> cmsis_gcc.h:374</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_ga8f5af376adcfaea7f2ddb3ef9b6b2544"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga8f5af376adcfaea7f2ddb3ef9b6b2544">__ISB</a></div><div class="ttdeci">__STATIC_INLINE void __ISB(void)</div><div class="ttdoc">Instruction Synchronization Barrier. </div><div class="ttdef"><b>Definition:</b> cmsis_gcc.h:425</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_gab145e35dbaf6868d3a17a8ad360fe379"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#gab145e35dbaf6868d3a17a8ad360fe379">__set_PSP</a></div><div class="ttdeci">__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)</div><div class="ttdoc">Set Process Stack Pointer. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:136</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_gabc17e391c13c71702366c67cba39c276"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabc17e391c13c71702366c67cba39c276">__CMSIS_GCC_OUT_REG</a></div><div class="ttdeci">#define __CMSIS_GCC_OUT_REG(r)</div><div class="ttdef"><b>Definition:</b> cmsis_gcc.h:373</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_ga558df7eeb0a34765e0b54d9853d08484"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga558df7eeb0a34765e0b54d9853d08484">__set_CONTROL</a></div><div class="ttdeci">__STATIC_INLINE void __set_CONTROL(uint32_t control)</div><div class="ttdoc">Set Control Register. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:71</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_ga0c569cbb49336f8d638686f9103047aa"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga0c569cbb49336f8d638686f9103047aa">__get_PSP</a></div><div class="ttdeci">__STATIC_INLINE uint32_t __get_PSP(void)</div><div class="ttdoc">Get Process Stack Pointer. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:123</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_ga42e74e3fffe1a2d93db1de04d9260929"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga42e74e3fffe1a2d93db1de04d9260929">__set_PRIMASK</a></div><div class="ttdeci">__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)</div><div class="ttdoc">Set Priority Mask. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:188</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_gac16f26f14c620f2c854cded3b7b1a999"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#gac16f26f14c620f2c854cded3b7b1a999">__SEV</a></div><div class="ttdeci">__STATIC_INLINE void __SEV(void)</div><div class="ttdoc">Send Event. </div><div class="ttdef"><b>Definition:</b> cmsis_gcc.h:413</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_gabc8691e5435c84f33831dee89ba0b3eb"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#gabc8691e5435c84f33831dee89ba0b3eb">__WFE</a></div><div class="ttdeci">__STATIC_INLINE void __WFE(void)</div><div class="ttdoc">Wait For Event. </div><div class="ttdef"><b>Definition:</b> cmsis_gcc.h:403</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_ga5fe64567d5bf0a81c118374e9a3a4598"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga5fe64567d5bf0a81c118374e9a3a4598">__get_CONTROL</a></div><div class="ttdeci">__STATIC_INLINE uint32_t __get_CONTROL(void)</div><div class="ttdoc">Get Control Register. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:58</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___reg_acc_functions_xhtml_ga1ff33c0b5ed0e687dd7967a1dd283d5f"><div class="ttname"><a href="group___c_m_s_i_s___core___reg_acc_functions.xhtml#ga1ff33c0b5ed0e687dd7967a1dd283d5f">__set_MSP</a></div><div class="ttdeci">__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)</div><div class="ttdoc">Set Main Stack Pointer. </div><div class="ttdef"><b>Definition:</b> cmsis_armcc.h:162</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_gab766d910fae775ead451aa4bafbe682d"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#gab766d910fae775ead451aa4bafbe682d">__ROR</a></div><div class="ttdeci">__STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)</div><div class="ttdoc">Rotate Right in unsigned value (32 bit) </div><div class="ttdef"><b>Definition:</b> cmsis_armcc_V6.h:932</div></div>
<div class="ttc" id="group___c_m_s_i_s___core___instruction_interface_xhtml_ga5c7a006f5ba5778972ac9516733a0cc4"><div class="ttname"><a href="group___c_m_s_i_s___core___instruction_interface.xhtml#ga5c7a006f5ba5778972ac9516733a0cc4">__DSB</a></div><div class="ttdeci">__STATIC_INLINE void __DSB(void)</div><div class="ttdoc">Data Synchronization Barrier. </div><div class="ttdef"><b>Definition:</b> cmsis_gcc.h:436</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
