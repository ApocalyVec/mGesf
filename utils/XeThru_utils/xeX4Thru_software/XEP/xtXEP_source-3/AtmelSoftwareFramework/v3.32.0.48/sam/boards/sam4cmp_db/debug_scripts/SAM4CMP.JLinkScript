/*********************************************************************
*               SEGGER MICROCONTROLLER GmbH & Co KG                  *
*       Solutions for real time microcontroller applications         *
**********************************************************************
*                                                                    *
*       (c) 2011  SEGGER Microcontroller GmbH & Co KG                *
*                                                                    *
*       www.segger.com     Support: support@segger.com               *
*                                                                    *
**********************************************************************
----------------------------------------------------------------------
Purpose : J-Link script file for Atmel AT91SAM4C.
---------------------------END-OF-HEADER------------------------------
*/

/*********************************************************************
*
*       _StoreSelDP
*/
void _StoreSelDP(void) {
  JTAG_StoreIR(0xA);  // DPACC command
  JTAG_StoreClocks(1);
}

/*********************************************************************
*
*       _StoreSelAP
*/
void _StoreSelAP(void) {
  JTAG_StoreIR(0xB);  // APACC command
  JTAG_StoreClocks(1);
}

/*********************************************************************
*
*       _StoreTriggerReadAPDPReg
*
*  Function description
*    Triggers a read of an AP or DP register. Depends on the previous command (DPACC / APACC)
*/
int _StoreTriggerReadAPDPReg(unsigned int RegIndex) {
  __int64 v;        // We need 35 bits: 32 data, 2 bit addr, 1 bit RnW
  int BitPosData;
  //
  // Write 35 bits (32 bits data, 2 bits addr, 1 bit RnW)
  //
  v = 0;
  v |= 1;                // 1 indicates read access
  v |= (RegIndex << 1);
  BitPosData = JTAG_StoreDR(v, 35);
  JTAG_StoreClocks(8);
  return BitPosData;
}

/*********************************************************************
*
*       _StoreWriteAPDPReg
*
*  Function description
*    Writes an AP or DP register. Depends on the previous command (DPACC / APACC)
*/
int _StoreWriteAPDPReg(unsigned int RegIndex, __int64 Data) {
  __int64 v;        // We need 35 bits: 32 data, 2 bit addr, 1 bit RnW
  int BitPosData;
  //
  // Write 35 bits (32 bits data, 2 bits addr, 1 bit RnW)
  //
  v = 0;   // 0 indicates write access
  v |= (RegIndex << 1);
  v |= (Data << 3);
  BitPosData = JTAG_StoreDR(v, 35);
  JTAG_StoreClocks(8);
  return BitPosData;
}

/*********************************************************************
*
*       InitTarget
*
*  Function description
*    Make sure that the device is not in "CoreHoldReset" state.
*    The device enters this state if TCK is LOW while RESET goes HIGH
*    This can also happen if RESET and TCK go HIGH at the same time
*/
void InitTarget(void) {
  __int64 Ctrl;
  int BitPos;
  __int64 Data;

  Report("Perform init for Atmel AT91SAM4C device.");
  JTAG_DRPre  = 0;  // Number of devices closer to TDO than the one we want to talk to
  JTAG_DRPost = 0;  // Number of devices closer to TDI than the one we want to talk to
  JTAG_IRPre  = 0;  // Sum of IRLens of devices closer to TDO than the one we want to talk to
  JTAG_IRPost = 0;  // Sum of IRLens of devices closer to TDI than the one we want to talk to
  JTAG_IRLen  = 4;  // IRLen of the device we want to talk to
  JTAG_Write(0x1F, 0, 6);  // Perform TAP reset to bring TAP controller into a known state
  //

  //
  _StoreSelDP();
  Ctrl = 0
       | (1 << 30)     // System power-up
       | (1 << 28)     // Debug popwer-up
       | (1 << 5)      // Clear STICKYERR
       ;
  _StoreWriteAPDPReg(1, Ctrl);
  _StoreWriteAPDPReg(2, (1 << 24));      // Select AP[1] bank 0 ( CORE1 )
  _StoreSelAP();
   Ctrl = 0
       | (1 << 29)
       | (3 << 24)
       | (2 <<  0)  // Word access
       ;
  _StoreWriteAPDPReg(0, Ctrl);           // AHB-AP CSW, word access, no auto-increment
  _StoreWriteAPDPReg(1, 0xE000EDF0);     // AHB-AP TAR, DHCSR
  _StoreTriggerReadAPDPReg(3);           // Trigger read of AHB-AP DRW
  BitPos = _StoreTriggerReadAPDPReg(3);  // Trigger read of AHB-AP DRW
  Data = JTAG_GetU32(BitPos + 3);
  if ((Data & 1) == 0) {
    Data &= 0xFFFF;
    Data |= 1;                           // Set C_DEBUGEN
    Data |= (0xA05F << 16);
    _StoreWriteAPDPReg(3, Data);
    JTAG_WriteClocks(1);
  }
  _StoreWriteAPDPReg(1, 0xE000EDFC);     // AHB-AP TAR, DEMCR
  _StoreWriteAPDPReg(3, 1);              // DEMCR: VC_CORERESET
  JTAG_WriteClocks(1);

  CPU=CORTEX_M4;
  CORESIGHT_AddAP(0, CORESIGHT_AHB_AP);
  CORESIGHT_AddAP(1, CORESIGHT_AHB_AP);
  CORESIGHT_IndexAHBAPToUse = 1;
  JTAG_WriteClocks(1);                    // Make sure all JTAG buffers are cleared

}

