<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ModuleConnector: Using ModuleConnector with the XeThru X2M200 module</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">ModuleConnector
          &#160;<span id="projectnumber">1.6.2</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Project brief</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Using ModuleConnector with the <a class="el" href="namespace_xe_thru.xhtml">XeThru</a> X2M200 module </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>There are basically two groups of data packets coming from the module, synchronous and asynchronous packets. The synchronous packets are a result of a direct command or query from a host over serial or USB. When calling for example ping(), like in the example below, the method invocation is blocking until either a response (synchronous packet) from the module is receive or a timeout of 2 seconds kicks in. On the other hand asynchronous packets are sent from the module to the host based on internal events in the module. This can be timer events or status change events. Normally this is streaming data of some kind like baseband data or presence single data. In case of the X2M200 module one must subscribe to the asynchronous data to capture them. The subscriptions must be given a name.</p>
<h2>Examples</h2>
<h4>1) Connect to a X2M200 module and record data output from the module to disk</h4>
<div class="fragment"><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="_module_connector_8hpp.xhtml">ModuleConnector.hpp</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="_data_recorder_8hpp.xhtml">DataRecorder.hpp</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="_x2_m200_8hpp.xhtml">X2M200.hpp</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;unistd.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;signal.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespace_xe_thru.xhtml">XeThru</a>;</div><div class="line"></div><div class="line"><span class="keyword">volatile</span> sig_atomic_t stop_recording;</div><div class="line"><span class="keywordtype">void</span> handle_sigint(<span class="keywordtype">int</span> num)</div><div class="line">{</div><div class="line">    stop_recording = 1;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_file_available(<a class="code" href="datatypes_8h.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">XeThru::DataType</a> type, <span class="keyword">const</span> std::string &amp;filename)</div><div class="line">{</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;recorded file available for data type: &quot;</span></div><div class="line">              &lt;&lt; <a class="code" href="class_xe_thru_1_1_data_recorder.xhtml#a8ae81b7bfb01230c62f075905e6651aa">DataRecorder::data_type_to_string</a>(type) &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;file: &quot;</span> &lt;&lt; filename &lt;&lt; std::endl;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> on_meta_file_available(<span class="keyword">const</span> std::string &amp;session_id, <span class="keyword">const</span> std::string &amp;meta_filename)</div><div class="line">{</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;meta file available for recording with id: &quot;</span> &lt;&lt; session_id &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;file: &quot;</span> &lt;&lt; meta_filename &lt;&lt; std::endl;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> record(<span class="keyword">const</span> std::string &amp;device_name)</div><div class="line">{</div><div class="line">    <span class="keyword">using namespace </span><a class="code" href="namespace_xe_thru.xhtml">XeThru</a>;</div><div class="line"></div><div class="line">    <a class="code" href="class_xe_thru_1_1_module_connector.xhtml">ModuleConnector</a> mc(device_name, 3);</div><div class="line">    <a class="code" href="class_xe_thru_1_1_data_recorder.xhtml">DataRecorder</a> &amp;recorder = mc.get_data_recorder();</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <a class="code" href="datatypes_8h.xhtml#afb6eb4f28419b652027fad41104a6d22">DataTypes</a> data_types = BasebandApDataType | SleepDataType;</div><div class="line">    <span class="keyword">const</span> std::string output_directory = <span class="stringliteral">&quot;.&quot;</span>;</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (recorder.<a class="code" href="class_xe_thru_1_1_data_recorder.xhtml#a0c0ec22bd31d182f08452c1bfcaf8cf6">start_recording</a>(data_types, output_directory) != 0) {</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Failed to start recording&quot;</span> &lt;&lt; std::endl;</div><div class="line">        <span class="keywordflow">return</span> 1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Get interface for physical device and enable data output</span></div><div class="line"><span class="comment"></span></div><div class="line">    {</div><div class="line">    <a class="code" href="class_xe_thru_1_1_data_recorder.xhtml#a7c474168931972cfeeb38ed7f08e46bb">DataRecorder::FileAvailableCallback</a> callback = std::bind(&amp;on_file_available,</div><div class="line">                                                             std::placeholders::_1,</div><div class="line">                                                             std::placeholders::_2);</div><div class="line">    recorder.<a class="code" href="class_xe_thru_1_1_data_recorder.xhtml#a24c86f560481264af80cee9b7a5e5b86">subscribe_to_file_available</a>(BasebandApDataType | SleepDataType, callback);</div><div class="line">    }</div><div class="line"></div><div class="line">    {</div><div class="line">    <a class="code" href="class_xe_thru_1_1_data_recorder.xhtml#a8446ecbd31b9267f7b216c6cf9046cbf">DataRecorder::MetaFileAvailableCallback</a> callback = std::bind(&amp;on_meta_file_available,</div><div class="line">                                                                 std::placeholders::_1,</div><div class="line">                                                                 std::placeholders::_2);</div><div class="line">    recorder.<a class="code" href="class_xe_thru_1_1_data_recorder.xhtml#a2972e2177738e2a3404518325e9c4124">subscribe_to_meta_file_available</a>(callback);</div><div class="line">    }</div><div class="line"></div><div class="line">    <a class="code" href="class_xe_thru_1_1_x2_m200.xhtml">X2M200</a> &amp;x2m200 = mc.get_x2m200();</div><div class="line">    x2m200.<a class="code" href="class_xe_thru_1_1_x2_m200.xhtml#a927117597dd01b02dcf1cd09c60044af">load_sleep_profile</a>();</div><div class="line">    x2m200.<a class="code" href="class_xe_thru_1_1_x2_m200.xhtml#a72239884c257737c19d46278ad071655">enable_baseband_ap</a>();</div><div class="line">    x2m200.<a class="code" href="class_xe_thru_1_1_x2_m200.xhtml#a390ddbac48157e215a8b0c3f74bb970c">set_sensor_mode_run</a>();</div><div class="line"></div><div class="line">    <span class="keywordflow">while</span> (!stop_recording) {</div><div class="line">        usleep(1000);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> ** argv)</div><div class="line">{</div><div class="line">    <span class="keywordflow">if</span> (argc &lt; 2) {</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;record &lt;com port or device file&gt;&quot;</span> &lt;&lt; std::endl;</div><div class="line">        <span class="keywordflow">return</span> 1;</div><div class="line">    }</div><div class="line"></div><div class="line">    stop_recording = 0;</div><div class="line">    signal(SIGINT, handle_sigint);</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> record(argv[1]);</div><div class="line">}</div></div><!-- fragment --><h4>2) Read recording from disk, as stored in 2)</h4>
<div class="fragment"><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="_data_reader_8hpp.xhtml">DataReader.hpp</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespace_xe_thru.xhtml">XeThru</a>;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> process_baseband_ap(<span class="keyword">const</span> <a class="code" href="struct_xe_thru_1_1_data_record.xhtml">DataRecord</a> &amp;record)</div><div class="line">{</div><div class="line">    assert(record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a16654cf06464f8810819eb72bd191166">data_type</a> == BasebandApDataType);</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;processing baseband ap data: &quot;</span> &lt;&lt; record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a48acf596179076a1a5c0212650a1c371">data</a>.size() &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">if</span> (record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a12cc84a73f806e5303524bbd880e68f3">is_user_header</a>)</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;  |-- custom user header&quot;</span> &lt;&lt; std::endl;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keywordtype">void</span> process_sleep(<span class="keyword">const</span> <a class="code" href="struct_xe_thru_1_1_data_record.xhtml">DataRecord</a> &amp;record)</div><div class="line">{</div><div class="line">    assert(record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a16654cf06464f8810819eb72bd191166">data_type</a> == SleepDataType);</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;processing sleep data: &quot;</span> &lt;&lt; record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a48acf596179076a1a5c0212650a1c371">data</a>.size() &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">if</span> (record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a12cc84a73f806e5303524bbd880e68f3">is_user_header</a>)</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;  |-- custom user header&quot;</span> &lt;&lt; std::endl;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> read_recording(<span class="keyword">const</span> std::string &amp;meta_filename)</div><div class="line">{</div><div class="line">    <span class="keyword">using namespace </span><a class="code" href="namespace_xe_thru.xhtml">XeThru</a>;</div><div class="line"></div><div class="line">    <a class="code" href="class_xe_thru_1_1_data_reader.xhtml">DataReader</a> reader;</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (reader.<a class="code" href="class_xe_thru_1_1_data_reader.xhtml#a0bdad4516ec41f83dc6aefd0af6adc51">open</a>(meta_filename) != 0) {</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;ERROR: failed to open recording&quot;</span> &lt;&lt; std::endl;</div><div class="line">        <span class="keywordflow">return</span> 1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Only interested in &#39;BasebandApDataType&#39; and &#39;SleepDataType&#39;</span></div><div class="line">    reader.<a class="code" href="class_xe_thru_1_1_data_reader.xhtml#a0003e1d96e165d4095922244de9e726b">set_filter</a>(BasebandApDataType | SleepDataType);</div><div class="line"></div><div class="line">    <span class="comment">// Read all records</span></div><div class="line">    <span class="keywordflow">while</span> (!reader.<a class="code" href="class_xe_thru_1_1_data_reader.xhtml#a45dff9bce58c2fef4ba92846479819dd">at_end</a>()) {</div><div class="line">        <span class="keyword">const</span> <a class="code" href="struct_xe_thru_1_1_data_record.xhtml">DataRecord</a> record = reader.<a class="code" href="class_xe_thru_1_1_data_reader.xhtml#a0d54098add7ad28cf353134daf7951fe">read_record</a>();</div><div class="line">        <span class="keywordflow">if</span> (!record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a838b0261e3b4b676cb7e02a9bbd4e78e">is_valid</a>) {</div><div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;ERROR: failed to read record&quot;</span> &lt;&lt; std::endl;</div><div class="line">            <span class="keywordflow">return</span> 1;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">// record.data contains data fields (bytes) as specified by the</span></div><div class="line">        <span class="comment">// XeThru File Formats document unless record.is_user_header is true.</span></div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;read record of data type: &quot;</span> &lt;&lt; record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a16654cf06464f8810819eb72bd191166">data_type</a></div><div class="line">                  &lt;&lt; <span class="stringliteral">&quot;, size: &quot;</span> &lt;&lt; record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a48acf596179076a1a5c0212650a1c371">data</a>.size() &lt;&lt; std::endl;</div><div class="line">        <span class="keywordflow">if</span> (record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a12cc84a73f806e5303524bbd880e68f3">is_user_header</a>)</div><div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;(custom user header)&quot;</span> &lt;&lt; std::endl;</div><div class="line"></div><div class="line">        <span class="keywordflow">switch</span> (record.<a class="code" href="struct_xe_thru_1_1_data_record.xhtml#a16654cf06464f8810819eb72bd191166">data_type</a>) {</div><div class="line">        <span class="keywordflow">case</span> BasebandApDataType:</div><div class="line">            process_baseband_ap(record);</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        <span class="keywordflow">case</span> SleepDataType:</div><div class="line">            process_sleep(record);</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        <span class="keywordflow">default</span>:</div><div class="line">            assert(<span class="keyword">false</span>);</div><div class="line">            <span class="keywordflow">break</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;--- Seek into the middle of recording ---&quot;</span> &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">if</span> (reader.<a class="code" href="class_xe_thru_1_1_data_reader.xhtml#ab5b5e8f4d82631c3a3e160d4b11eb0fe">seek_byte</a>(reader.<a class="code" href="class_xe_thru_1_1_data_reader.xhtml#adf13744b104619a4941caebb6cb807c7">get_size</a>() / 2) != 0) {</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;ERROR: failed to seek&quot;</span> &lt;&lt; std::endl;</div><div class="line">        <span class="keywordflow">return</span> 1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">const</span> uint32_t max_record_size = reader.<a class="code" href="class_xe_thru_1_1_data_reader.xhtml#a25e24f183f1d515e8aeee3fcf551bd00">get_max_record_size</a>();</div><div class="line">    std::unique_ptr&lt;uint8_t[]&gt; buffer(<span class="keyword">new</span> uint8_t[max_record_size]);</div><div class="line"></div><div class="line">    <span class="keywordflow">while</span> (!reader.<a class="code" href="class_xe_thru_1_1_data_reader.xhtml#a45dff9bce58c2fef4ba92846479819dd">at_end</a>()) {</div><div class="line">        uint32_t record_size;</div><div class="line">        uint32_t data_type;</div><div class="line">        int64_t epoch;</div><div class="line">        uint8_t is_user_header;</div><div class="line"></div><div class="line">        <span class="keywordflow">if</span> (reader.<a class="code" href="class_xe_thru_1_1_data_reader.xhtml#a0d54098add7ad28cf353134daf7951fe">read_record</a>(buffer.get(), max_record_size, &amp;record_size, &amp;data_type, &amp;epoch, &amp;is_user_header) != 0) {</div><div class="line">            std::cout &lt;&lt; <span class="stringliteral">&quot;ERROR: failed to read record&quot;</span> &lt;&lt; std::endl;</div><div class="line">            <span class="keywordflow">return</span> 1;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">// ...</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)</div><div class="line">{</div><div class="line">    <span class="keywordflow">if</span> (argc &lt; 2) {</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;read_recording &lt;xethru recording meta file&gt;&quot;</span> &lt;&lt; std::endl;</div><div class="line">        <span class="keywordflow">return</span> 1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> read_recording(argv[1]);</div><div class="line">}</div></div><!-- fragment --> </div></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
