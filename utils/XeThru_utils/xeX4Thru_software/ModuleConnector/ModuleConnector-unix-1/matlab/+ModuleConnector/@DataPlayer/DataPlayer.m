classdef DataPlayer
    
    % The DataPlayer class allows playback of telegrams / binary packets from a recording
    % generated by DataRecorder.
    %
	% The DataPlayer class is a high level data playback class. It provides the user with
	% the ability to playback recorded data as if it was coming from a physical device.
	% So rather than initialising ModuleConnector with a physical device (serial port),
	% it is possible to construct ModuleConnector with a DataPlayer object and receive
	% telegrams / binary packets as one would normally receive from a physical XeThru device.
	% For example, CSV data on disk is converted back to its original telegram / binary format
	% before it is dispatched via ModuleConnector.
	% 
	% Moreover, it is possible to control the playback via functions such as
	% play, pause, stop, set_playback_rate, set_filter.
	% 
	% Typical usage:
    % player = ModuleConnector.DataPlayer(<path_to_metafile>);
	% 
    % mc = ModuleConnector.ModuleConnector(player);
    % x4m300 = mc.get_x4m300();
    %
    % player.play();
    %
    % iq_data = x4m300.read_message_baseband_iq();
    % 
	% This class uses the DataReader class to read records from disk before it converts
	% them into telegrams / binary packets.
    
    properties
        lib_name = 'libModuleConnector';    % Default library name unless set by constructor.
    end
    
    properties (Constant) % Playback state values.
        StoppedState = 0;
        PlayingState = 1;
        PausedState = 2;
    end
    
    properties (SetAccess = private)
    	dataRecorderInterface,   % Layer one wrapper class for recording API
    	dataPlayer_instance,     % Libpointer to C/C++ library instance    
    end
    
    properties (SetAccess = private, Hidden)
        % Data pointers for get operations
        statePtr = libpointer('uint32Ptr',0);
        filterPtr = libpointer('uint32Ptr',0);
        positionPtr = libpointer('int64Ptr',0);
        ratePtr = libpointer('singlePtr',0.0);
        enabledPtr = libpointer('uint32Ptr',0);
        durationPtr = libpointer('int64Ptr',0);
        
        metaFilenameMaxLength = 512;
        metaFilenamePtr = libpointer('string',blanks(512));
        metaFilenameLengthPtr = libpointer('uint32Ptr',0);
    end
    
    methods
        
        function status = play(this)
            %PLAY Start or resume playback.
            %
            % Convenience function, equivalent to set_state(ModuleConnector.DataPlayer.PlayingState).
            status = this.dataRecorderInterface.data_player_play(this.dataPlayer_instance);
        end
        
        function status = pause(this)
            %PAUSE Pause playback.
            %
            % Convenience function, equivalent to set_state(ModuleConnector.DataPlayer.PausedState).
            status = this.dataRecorderInterface.data_player_pause(this.dataPlayer_instance);
        end
        
        function status = stop(this)
            %STOP Stop playback and reset the play position to the beginning.
            %
            % Convenience function, equivalent to set_state(ModuleConnector.DataPlayer.StoppedState).
            status = this.dataRecorderInterface.data_player_stop(this.dataPlayer_instance);
        end
        
        function status = set_state(this, state)
            %SET_STATE Sets the player's state as specified.
            %
            % By default, the player is in StoppedState.
            %
            % state Specifies the state.
            % see play, pause, stop
            status = this.dataRecorderInterface.data_player_set_state(this.dataPlayer_instance, state);
        end
        
        function [state, status] = get_state(this)
            %GET_STATE Returns the player's current state. By default, the player is in StoppedState.
            status = this.dataRecorderInterface.data_player_get_state(this.dataPlayer_instance, this.statePtr);
            state = this.statePtr.Value;
        end
        
        function status = set_filter(this, data_types)
            %SET_FILTER Specifies which data types to play.
            %
            % By default, the filter is set to all data types.
            %
            % data_types Specifies the filter as a bitmask that consists of a combination of DataType flags.
            % A convenience value AllDataTypes can also be specified.
            %
            % For enumeration of the DataType flags, see
            % ModuleConnector.DataRecorderInterface
            %
            % Returns 0 on success, otherwise returns 1
            % see play
            status = this.dataRecorderInterface.data_player_set_filter(this.dataPlayer_instance, data_types);
        end
        
        function [filter_types, status] = get_filter(this)
            %GET_FILTER Returns the filter used to specify which data types to play.
            %
            % By default this value is all data types.
            status = this.dataRecorderInterface.data_player_get_filter(this.dataPlayer_instance, this.filterPtr);
            filter_types = this.filterPtr.Value;
        end
        
        function status = set_position(this, position)
            %SET_POSITION Sets the current position (ms) as specified.
            %
            % The value must be in range [0, get_duration()].
            % position Specifies the position as number of milliseconds (ms).
            %
            % Returns 0 on success, otherwise returns 1
            % see get_duration
            status = this.dataRecorderInterface.data_player_set_position(this.dataPlayer_instance, position);
        end
        
        function [position, status] = get_position(this)
            %GET_POSITION Returns the player's current position specified as number of milliseconds (ms).
            status = this.dataRecorderInterface.data_player_get_position(this.dataPlayer_instance, this.positionPtr);
            position = this.positionPtr.Value;
        end
        
        function status = set_playback_rate(this, rate)
            %SET_PLAYBACK_RATE Sets the playback rate specified as a multiplier.
            %
            % By default, this value is 1.0 indicating that the player is playing at the standard pace.
            % Values higher than 1.0 will increase the pace, whereas a lower value will decrease the pace.
            % Values less than zero indicate the player should play as fast as possible. Value zero
            % is essentially the same as PausedState.
            %
            % rate Specifies the multiplier for the playback rate.
            % see play
            status = this.dataRecorderInterface.data_player_set_playback_rate(this.dataPlayer_instance, rate);
        end
        
        function [rate, status] = get_playback_rate(this)
            %GET_PLAYBACK_RATE Returns the multiplayer used for the playback rate.
            %
            % By default, this value is 1.0.
            status = this.dataRecorderInterface.data_player_get_playback_rate(this.dataPlayer_instance, this.ratePtr);
            rate = this.ratePtr.Value;
        end
        
        function status = set_loop_mode_enabled(this, enabled)
            %SET_LOOP_MODE_ENABLED Enables or disables loop mode as specified.
            %
            % When loop mode is enabled the, the player's position is reset
            % to the beginning when the player reaches the end. This allows
            % for playback forever.
            %
            % enabled Specifies if loop mode is enabled or disabled. By default, loop mode is
            % disabled (i.e. false).
            status = this.dataRecorderInterface.data_player_set_loop_mode_enabled(this.dataPlayer_instance, enabled);
        end
        
        function [enabled, status] = get_loop_mode_enabled(this)
            %GET_LOOP_MODE_ENABLED Returns true if loop mode is enabled, otherwise returns false.
            %
            % By default, this value is false.
            status = this.dataRecorderInterface.data_player_get_loop_mode_enabled(this.dataPlayer_instance, this.enabledPtr);
            enabled = this.enabledPtr.Value;
        end
        
        function [duration, status] = get_duration(this)
            %GET_DURATION Returns the total duration of the recording specified as number of milliseconds (ms).
            status = this.dataRecorderInterface.data_player_get_duration(this.dataPlayer_instance, this.durationPtr);
            duration = this.durationPtr.Value;
        end
        
        function [metafilename, status] = get_meta_filename(this)
            %GET_META_FILENAME Return the meta filename used when constructing this class.
            status = this.dataRecorderInterface.data_player_get_meta_filename(this.dataPlayer_instance, this.metaFilenamePtr, this.metaFilenameLengthPtr, this.metaFilenameMaxLength);
            metafilename = this.metaFilenamePtr.Value;
        end
        
    end
    
    methods
        
        %% Constructor
        function dp = DataPlayer(metafilename,depth,lib_name)
            % DATAPLAYER Constructs the player and opens the recording specified by the given meta filename.
            % 
            % One recording may contain several meta files, for example as a result of file/directory
            % splitting. The meta file contains information about which files and data types were
            % written to disk during a recording session. Common for all use cases is that
            % *xethru_recording_meta.dat* is always present in the output folder generated by DataRecorder.
            % Use that file as input argument to this constructor.
            % 
            % metafilename Specifies which recording (*xethru_recording_meta.dat*) to open.
            % depth Specifies the number of meta files to open in 'chained mode'. By default,
            % this parameter is -1 (automatically open all files, i.e. the entire recording).
            % lib_name Specifies name of ModuleConnector library. If this
            % is not specified, the default name is used.
            % 
            % Constructor throws an runtime exception if the recording could not be opened.
            if nargin > 2, dp.lib_name = lib_name; end
            if nargin < 2, depth = -1; end
            
            if libisloaded(dp.lib_name)
            	% Get DataRecorderInterface layer one wrapper class.
                dp.dataRecorderInterface = ModuleConnector.DataRecorderInterface(dp.lib_name);
            
                % Get DataPlayer libpointer instance.
                dp.dataPlayer_instance = calllib(dp.lib_name,'data_player_create',metafilename,uint32(length(metafilename)),int32(depth));

            else
                disp('ModuleConnector.DataPlayer requires pre-loading of the dynamically linked library.')
                error(['Cannot find library ',dp.lib_name]);
            end
            
            
        end
            
        %% Destructor
        function delete( this )
            % Destroys the player.
            calllib(this.lib_name, 'data_player_destroy',this.dataPlayer_instance);
            clear('this.dataPlayer_instance');
            clear('this.statePtr','this.filterPtr','this.positionPtr','this.ratePtr','this.enabledPtr','this.durationPtr');
            clear('this.metaFilenamePtr','this.metaFilenameLengthPtr');
        end
        
    end
    
end

