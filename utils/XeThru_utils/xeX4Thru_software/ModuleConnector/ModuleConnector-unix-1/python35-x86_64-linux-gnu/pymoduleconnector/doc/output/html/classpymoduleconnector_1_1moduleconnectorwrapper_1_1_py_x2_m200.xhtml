<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>pymoduleconnector: pymoduleconnector.moduleconnectorwrapper.PyX2M200 Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">pymoduleconnector
          &#160;<span id="projectnumber">1.6.2</span>
        </div>
        <div id="projectbrief" class="col-sm-12">A Python wrapper for XeThru ModuleConnector</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>pymoduleconnector</b></li><li class="navelem"><b>moduleconnectorwrapper</b></li><li class="navelem"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml">PyX2M200</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">pymoduleconnector.moduleconnectorwrapper.PyX2M200 Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Interface to the Xethru X2M200 Application module.  
 <a href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5b649c597d527882b01c40a15b091a92"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a5b649c597d527882b01c40a15b091a92">__init__</a> (self, radar_interface)</td></tr>
<tr class="memdesc:a5b649c597d527882b01c40a15b091a92"><td class="mdescLeft">&#160;</td><td class="mdescRight"><b>init</b>(XeThru::PyX2M200 self, LockedRadarInterfacePtr &amp; radar_interface) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module. ">PyX2M200</a>  <a href="#a5b649c597d527882b01c40a15b091a92">More...</a><br /></td></tr>
<tr class="separator:a5b649c597d527882b01c40a15b091a92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39e22df5876a6a6191dc3d442e656573"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a39e22df5876a6a6191dc3d442e656573">set_debug_level</a> (self, level)</td></tr>
<tr class="memdesc:a39e22df5876a6a6191dc3d442e656573"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_debug_level(PyX2M200 self, unsigned char level)  <a href="#a39e22df5876a6a6191dc3d442e656573">More...</a><br /></td></tr>
<tr class="separator:a39e22df5876a6a6191dc3d442e656573"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eb7c7e255d9691dda635e9a800924b7"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a3eb7c7e255d9691dda635e9a800924b7">set_log_level</a> (self, level)</td></tr>
<tr class="memdesc:a3eb7c7e255d9691dda635e9a800924b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_log_level(PyX2M200 self, unsigned int level)  <a href="#a3eb7c7e255d9691dda635e9a800924b7">More...</a><br /></td></tr>
<tr class="separator:a3eb7c7e255d9691dda635e9a800924b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac60a88e5886ba9169d17794cf5329565"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#ac60a88e5886ba9169d17794cf5329565">ping</a> (self)</td></tr>
<tr class="memdesc:ac60a88e5886ba9169d17794cf5329565"><td class="mdescLeft">&#160;</td><td class="mdescRight">ping(PyX2M200 self) -&gt; unsigned int  <a href="#ac60a88e5886ba9169d17794cf5329565">More...</a><br /></td></tr>
<tr class="separator:ac60a88e5886ba9169d17794cf5329565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a465a516cea86e699e02b1723e3fdd842"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a465a516cea86e699e02b1723e3fdd842">get_item_number</a> (self)</td></tr>
<tr class="memdesc:a465a516cea86e699e02b1723e3fdd842"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_item_number(PyX2M200 self) -&gt; std::string  <a href="#a465a516cea86e699e02b1723e3fdd842">More...</a><br /></td></tr>
<tr class="separator:a465a516cea86e699e02b1723e3fdd842"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d4eaa480b55f97012019019696a036d"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a9d4eaa480b55f97012019019696a036d">get_order_code</a> (self)</td></tr>
<tr class="memdesc:a9d4eaa480b55f97012019019696a036d"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_order_code(PyX2M200 self) -&gt; std::string  <a href="#a9d4eaa480b55f97012019019696a036d">More...</a><br /></td></tr>
<tr class="separator:a9d4eaa480b55f97012019019696a036d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10afd1cd98a04bb203dfc3db50a9a173"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a10afd1cd98a04bb203dfc3db50a9a173">get_firmware_id</a> (self)</td></tr>
<tr class="memdesc:a10afd1cd98a04bb203dfc3db50a9a173"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_firmware_id(PyX2M200 self) -&gt; std::string  <a href="#a10afd1cd98a04bb203dfc3db50a9a173">More...</a><br /></td></tr>
<tr class="separator:a10afd1cd98a04bb203dfc3db50a9a173"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a810e5d07ede824e4d042cfc9523135f7"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a810e5d07ede824e4d042cfc9523135f7">get_firmware_version</a> (self)</td></tr>
<tr class="memdesc:a810e5d07ede824e4d042cfc9523135f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_firmware_version(PyX2M200 self) -&gt; std::string  <a href="#a810e5d07ede824e4d042cfc9523135f7">More...</a><br /></td></tr>
<tr class="separator:a810e5d07ede824e4d042cfc9523135f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7e832229d201de7a41ee2e5cf25ecbf"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#ac7e832229d201de7a41ee2e5cf25ecbf">get_serial_number</a> (self)</td></tr>
<tr class="memdesc:ac7e832229d201de7a41ee2e5cf25ecbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_serial_number(PyX2M200 self) -&gt; std::string  <a href="#ac7e832229d201de7a41ee2e5cf25ecbf">More...</a><br /></td></tr>
<tr class="separator:ac7e832229d201de7a41ee2e5cf25ecbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16616e599b8614986a288bd535d982de"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a16616e599b8614986a288bd535d982de">get_build_info</a> (self)</td></tr>
<tr class="memdesc:a16616e599b8614986a288bd535d982de"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_build_info(PyX2M200 self) -&gt; std::string  <a href="#a16616e599b8614986a288bd535d982de">More...</a><br /></td></tr>
<tr class="separator:a16616e599b8614986a288bd535d982de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab863661b0d2c0a6ef0c5f69c31710808"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#ab863661b0d2c0a6ef0c5f69c31710808">get_app_id_list</a> (self)</td></tr>
<tr class="memdesc:ab863661b0d2c0a6ef0c5f69c31710808"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_app_id_list(PyX2M200 self) -&gt; std::string  <a href="#ab863661b0d2c0a6ef0c5f69c31710808">More...</a><br /></td></tr>
<tr class="separator:ab863661b0d2c0a6ef0c5f69c31710808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4cc47b13396ec86470dc97188521e64"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#af4cc47b13396ec86470dc97188521e64">reset</a> (self)</td></tr>
<tr class="memdesc:af4cc47b13396ec86470dc97188521e64"><td class="mdescLeft">&#160;</td><td class="mdescRight">reset(PyX2M200 self)  <a href="#af4cc47b13396ec86470dc97188521e64">More...</a><br /></td></tr>
<tr class="separator:af4cc47b13396ec86470dc97188521e64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc6e6c7f167e36affd9c58da070cbbd8"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#afc6e6c7f167e36affd9c58da070cbbd8">start_bootloader</a> (self)</td></tr>
<tr class="memdesc:afc6e6c7f167e36affd9c58da070cbbd8"><td class="mdescLeft">&#160;</td><td class="mdescRight">start_bootloader(PyX2M200 self)  <a href="#afc6e6c7f167e36affd9c58da070cbbd8">More...</a><br /></td></tr>
<tr class="separator:afc6e6c7f167e36affd9c58da070cbbd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79b4fa9389e01136ba6134b80059000a"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a79b4fa9389e01136ba6134b80059000a">set_sensor_mode_run</a> (self)</td></tr>
<tr class="memdesc:a79b4fa9389e01136ba6134b80059000a"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_sensor_mode_run(PyX2M200 self)  <a href="#a79b4fa9389e01136ba6134b80059000a">More...</a><br /></td></tr>
<tr class="separator:a79b4fa9389e01136ba6134b80059000a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dcebc52382cfdb72866673257e283fb"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a7dcebc52382cfdb72866673257e283fb">set_sensor_mode_idle</a> (self)</td></tr>
<tr class="memdesc:a7dcebc52382cfdb72866673257e283fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_sensor_mode_idle(PyX2M200 self)  <a href="#a7dcebc52382cfdb72866673257e283fb">More...</a><br /></td></tr>
<tr class="separator:a7dcebc52382cfdb72866673257e283fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a525708f2096309905cf2a5521868847a"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a525708f2096309905cf2a5521868847a">load_sleep_profile</a> (self)</td></tr>
<tr class="memdesc:a525708f2096309905cf2a5521868847a"><td class="mdescLeft">&#160;</td><td class="mdescRight">load_sleep_profile(PyX2M200 self)  <a href="#a525708f2096309905cf2a5521868847a">More...</a><br /></td></tr>
<tr class="separator:a525708f2096309905cf2a5521868847a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac662eeff0026a6218b3a9a3e1b2cc0af"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#ac662eeff0026a6218b3a9a3e1b2cc0af">load_respiration_profile</a> (self)</td></tr>
<tr class="memdesc:ac662eeff0026a6218b3a9a3e1b2cc0af"><td class="mdescLeft">&#160;</td><td class="mdescRight">load_respiration_profile(PyX2M200 self)  <a href="#ac662eeff0026a6218b3a9a3e1b2cc0af">More...</a><br /></td></tr>
<tr class="separator:ac662eeff0026a6218b3a9a3e1b2cc0af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae3fa128e84412b35d983e84fdd5abe4"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#aae3fa128e84412b35d983e84fdd5abe4">enable_baseband_ap</a> (self)</td></tr>
<tr class="memdesc:aae3fa128e84412b35d983e84fdd5abe4"><td class="mdescLeft">&#160;</td><td class="mdescRight">enable_baseband_ap(PyX2M200 self)  <a href="#aae3fa128e84412b35d983e84fdd5abe4">More...</a><br /></td></tr>
<tr class="separator:aae3fa128e84412b35d983e84fdd5abe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ce9ec06d899c750f120943214c6ac88"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a8ce9ec06d899c750f120943214c6ac88">disable_baseband_ap</a> (self)</td></tr>
<tr class="memdesc:a8ce9ec06d899c750f120943214c6ac88"><td class="mdescLeft">&#160;</td><td class="mdescRight">disable_baseband_ap(PyX2M200 self)  <a href="#a8ce9ec06d899c750f120943214c6ac88">More...</a><br /></td></tr>
<tr class="separator:a8ce9ec06d899c750f120943214c6ac88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a689d1c431bc30d65042f9a885e3ceae5"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a689d1c431bc30d65042f9a885e3ceae5">enable_baseband_iq</a> (self)</td></tr>
<tr class="memdesc:a689d1c431bc30d65042f9a885e3ceae5"><td class="mdescLeft">&#160;</td><td class="mdescRight">enable_baseband_iq(PyX2M200 self)  <a href="#a689d1c431bc30d65042f9a885e3ceae5">More...</a><br /></td></tr>
<tr class="separator:a689d1c431bc30d65042f9a885e3ceae5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11a711b72e9350b335dcdd7a052c1591"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a11a711b72e9350b335dcdd7a052c1591">disable_baseband_iq</a> (self)</td></tr>
<tr class="memdesc:a11a711b72e9350b335dcdd7a052c1591"><td class="mdescLeft">&#160;</td><td class="mdescRight">disable_baseband_iq(PyX2M200 self)  <a href="#a11a711b72e9350b335dcdd7a052c1591">More...</a><br /></td></tr>
<tr class="separator:a11a711b72e9350b335dcdd7a052c1591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c0f4ead1bf1cc85246e8ad0493c1f27"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a3c0f4ead1bf1cc85246e8ad0493c1f27">set_detection_zone</a> (self, start, end)</td></tr>
<tr class="memdesc:a3c0f4ead1bf1cc85246e8ad0493c1f27"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_detection_zone(PyX2M200 self, float start, float end)  <a href="#a3c0f4ead1bf1cc85246e8ad0493c1f27">More...</a><br /></td></tr>
<tr class="separator:a3c0f4ead1bf1cc85246e8ad0493c1f27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2718889bd1d8d5fd08fb7764fe27db6c"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a2718889bd1d8d5fd08fb7764fe27db6c">set_sensitivity</a> (self, new_sensitivity)</td></tr>
<tr class="memdesc:a2718889bd1d8d5fd08fb7764fe27db6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_sensitivity(PyX2M200 self, uint32_t new_sensitivity)  <a href="#a2718889bd1d8d5fd08fb7764fe27db6c">More...</a><br /></td></tr>
<tr class="separator:a2718889bd1d8d5fd08fb7764fe27db6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb0f24e9a448f4feb4699032f57587fa"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#adb0f24e9a448f4feb4699032f57587fa">set_led_control</a> (self, mode, intensity)</td></tr>
<tr class="memdesc:adb0f24e9a448f4feb4699032f57587fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_led_control(PyX2M200 self, uint8_t mode, uint8_t intensity)  <a href="#adb0f24e9a448f4feb4699032f57587fa">More...</a><br /></td></tr>
<tr class="separator:adb0f24e9a448f4feb4699032f57587fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e9f4604aff87939e0a0a500bd6a4fee"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a7e9f4604aff87939e0a0a500bd6a4fee">subscribe_to_resp_status</a> (self, name)</td></tr>
<tr class="memdesc:a7e9f4604aff87939e0a0a500bd6a4fee"><td class="mdescLeft">&#160;</td><td class="mdescRight">subscribe_to_resp_status(PyX2M200 self, std::string const &amp; name) -&gt; int  <a href="#a7e9f4604aff87939e0a0a500bd6a4fee">More...</a><br /></td></tr>
<tr class="separator:a7e9f4604aff87939e0a0a500bd6a4fee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacf18c7a963144fc5cd0c12f9e1e0a15"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#aacf18c7a963144fc5cd0c12f9e1e0a15">subscribe_to_sleep_status</a> (self, name)</td></tr>
<tr class="memdesc:aacf18c7a963144fc5cd0c12f9e1e0a15"><td class="mdescLeft">&#160;</td><td class="mdescRight">subscribe_to_sleep_status(PyX2M200 self, std::string const &amp; name) -&gt; int  <a href="#aacf18c7a963144fc5cd0c12f9e1e0a15">More...</a><br /></td></tr>
<tr class="separator:aacf18c7a963144fc5cd0c12f9e1e0a15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00d077c725bdc7bb2195c80f33d71066"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a00d077c725bdc7bb2195c80f33d71066">subscribe_to_baseband_ap</a> (self, name)</td></tr>
<tr class="memdesc:a00d077c725bdc7bb2195c80f33d71066"><td class="mdescLeft">&#160;</td><td class="mdescRight">subscribe_to_baseband_ap(PyX2M200 self, std::string const &amp; name) -&gt; int  <a href="#a00d077c725bdc7bb2195c80f33d71066">More...</a><br /></td></tr>
<tr class="separator:a00d077c725bdc7bb2195c80f33d71066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a894901e71ab517f72c2368f1adc0ad6a"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a894901e71ab517f72c2368f1adc0ad6a">subscribe_to_baseband_iq</a> (self, name)</td></tr>
<tr class="memdesc:a894901e71ab517f72c2368f1adc0ad6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">subscribe_to_baseband_iq(PyX2M200 self, std::string const &amp; name) -&gt; int  <a href="#a894901e71ab517f72c2368f1adc0ad6a">More...</a><br /></td></tr>
<tr class="separator:a894901e71ab517f72c2368f1adc0ad6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4867262b90a15caa85c0749c346bd96"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#ac4867262b90a15caa85c0749c346bd96">unsubscribe</a> (self, name)</td></tr>
<tr class="memdesc:ac4867262b90a15caa85c0749c346bd96"><td class="mdescLeft">&#160;</td><td class="mdescRight">unsubscribe(PyX2M200 self, std::string const &amp; name)  <a href="#ac4867262b90a15caa85c0749c346bd96">More...</a><br /></td></tr>
<tr class="separator:ac4867262b90a15caa85c0749c346bd96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadc4e79571a4b5bc9d96aa828ca6bd54"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#aadc4e79571a4b5bc9d96aa828ca6bd54">disable_resp_output</a> (self)</td></tr>
<tr class="memdesc:aadc4e79571a4b5bc9d96aa828ca6bd54"><td class="mdescLeft">&#160;</td><td class="mdescRight">disable_resp_output(PyX2M200 self)  <a href="#aadc4e79571a4b5bc9d96aa828ca6bd54">More...</a><br /></td></tr>
<tr class="separator:aadc4e79571a4b5bc9d96aa828ca6bd54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6361e4cf75fdcc702a628eba0c060f33"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a6361e4cf75fdcc702a628eba0c060f33">enable_resp_output</a> (self)</td></tr>
<tr class="memdesc:a6361e4cf75fdcc702a628eba0c060f33"><td class="mdescLeft">&#160;</td><td class="mdescRight">enable_resp_output(PyX2M200 self)  <a href="#a6361e4cf75fdcc702a628eba0c060f33">More...</a><br /></td></tr>
<tr class="separator:a6361e4cf75fdcc702a628eba0c060f33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e7a107912a579d2de8584fb7216bac6"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a7e7a107912a579d2de8584fb7216bac6">get_number_of_packets</a> (self, name)</td></tr>
<tr class="memdesc:a7e7a107912a579d2de8584fb7216bac6"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_number_of_packets(PyX2M200 self, std::string const &amp; name) -&gt; unsigned int  <a href="#a7e7a107912a579d2de8584fb7216bac6">More...</a><br /></td></tr>
<tr class="separator:a7e7a107912a579d2de8584fb7216bac6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29d88bed13184a25269861da13441ab5"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a29d88bed13184a25269861da13441ab5">get_packet</a> (self, name)</td></tr>
<tr class="memdesc:a29d88bed13184a25269861da13441ab5"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_packet(PyX2M200 self, std::string const &amp; name) -&gt; ucVector  <a href="#a29d88bed13184a25269861da13441ab5">More...</a><br /></td></tr>
<tr class="separator:a29d88bed13184a25269861da13441ab5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95312b223059c2bb378a3e3b55b3db89"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a95312b223059c2bb378a3e3b55b3db89">get_respiration_data</a> (self, name)</td></tr>
<tr class="memdesc:a95312b223059c2bb378a3e3b55b3db89"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_respiration_data(PyX2M200 self, std::string const name) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_respiration_data.xhtml" title="Represents the respiration status data coming from the module. ">RespirationData</a>  <a href="#a95312b223059c2bb378a3e3b55b3db89">More...</a><br /></td></tr>
<tr class="separator:a95312b223059c2bb378a3e3b55b3db89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69795dfe5404e124ebd24e98826848bf"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a69795dfe5404e124ebd24e98826848bf">get_sleep_data</a> (self, name)</td></tr>
<tr class="memdesc:a69795dfe5404e124ebd24e98826848bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_sleep_data(PyX2M200 self, std::string const name) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_sleep_data.xhtml" title="Represents the sleep status data coming from the module. ">SleepData</a>  <a href="#a69795dfe5404e124ebd24e98826848bf">More...</a><br /></td></tr>
<tr class="separator:a69795dfe5404e124ebd24e98826848bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3279484711dbcf08cc1f6ec71dff869b"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a3279484711dbcf08cc1f6ec71dff869b">get_baseband_ap_data</a> (self, name)</td></tr>
<tr class="memdesc:a3279484711dbcf08cc1f6ec71dff869b"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_baseband_ap_data(PyX2M200 self, std::string const name) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_baseband_ap_data.xhtml">BasebandApData</a>  <a href="#a3279484711dbcf08cc1f6ec71dff869b">More...</a><br /></td></tr>
<tr class="separator:a3279484711dbcf08cc1f6ec71dff869b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2dd35d34f70660ae8c26fc0ee59bf42"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#aa2dd35d34f70660ae8c26fc0ee59bf42">get_baseband_iq_data</a> (self, name)</td></tr>
<tr class="memdesc:aa2dd35d34f70660ae8c26fc0ee59bf42"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_baseband_iq_data(PyX2M200 self, std::string const name) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_baseband_iq_data.xhtml">BasebandIqData</a>  <a href="#aa2dd35d34f70660ae8c26fc0ee59bf42">More...</a><br /></td></tr>
<tr class="separator:aa2dd35d34f70660ae8c26fc0ee59bf42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3cce28334c534a23bb50a42e4b32757"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#ab3cce28334c534a23bb50a42e4b32757">clear</a> (self, name)</td></tr>
<tr class="memdesc:ab3cce28334c534a23bb50a42e4b32757"><td class="mdescLeft">&#160;</td><td class="mdescRight">clear(PyX2M200 self, std::string const &amp; name)  <a href="#ab3cce28334c534a23bb50a42e4b32757">More...</a><br /></td></tr>
<tr class="separator:ab3cce28334c534a23bb50a42e4b32757"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:ab96377b08aa5a1bd286e962141bfa77c"><td class="memItemLeft" align="right" valign="top"><a id="ab96377b08aa5a1bd286e962141bfa77c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>this</b></td></tr>
<tr class="separator:ab96377b08aa5a1bd286e962141bfa77c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Interface to the Xethru X2M200 Application module. </p>
<p>C++ includes: PyX2M200.hpp </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a5b649c597d527882b01c40a15b091a92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b649c597d527882b01c40a15b091a92">&sect;&nbsp;</a></span>__init__()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.__init__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>radar_interface</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><b>init</b>(XeThru::PyX2M200 self, LockedRadarInterfacePtr &amp; radar_interface) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module. ">PyX2M200</a> </p>
<p>Constructor.</p>
<p>Initialized by <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_python_module_connector.xhtml#a3c97acdd3f2e2209fcc9a50b44710b53" title="get_x2m200(PythonModuleConnector self) -&gt; PyX2M200 ">PythonModuleConnector::get_x2m200</a></p>
<h2>Parameters </h2>
<ul>
<li><code>radar_interface</code> : a reference to the internal radar interface </li>
</ul>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab3cce28334c534a23bb50a42e4b32757"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3cce28334c534a23bb50a42e4b32757">&sect;&nbsp;</a></span>clear()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.clear </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>clear(PyX2M200 self, std::string const &amp; name) </p>
<p>Empty the buffer of the named data stream subscription.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of subscription </li>
</ul>

</div>
</div>
<a id="a8ce9ec06d899c750f120943214c6ac88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ce9ec06d899c750f120943214c6ac88">&sect;&nbsp;</a></span>disable_baseband_ap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.disable_baseband_ap </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>disable_baseband_ap(PyX2M200 self) </p>
<p>Disables amplitude/phase baseband output. </p>

</div>
</div>
<a id="a11a711b72e9350b335dcdd7a052c1591"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11a711b72e9350b335dcdd7a052c1591">&sect;&nbsp;</a></span>disable_baseband_iq()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.disable_baseband_iq </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>disable_baseband_iq(PyX2M200 self) </p>
<p>Disables I/Q baseband output. </p>

</div>
</div>
<a id="aadc4e79571a4b5bc9d96aa828ca6bd54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aadc4e79571a4b5bc9d96aa828ca6bd54">&sect;&nbsp;</a></span>disable_resp_output()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.disable_resp_output </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>disable_resp_output(PyX2M200 self) </p>
<p>Turn off respiration status output from the Xethru X2M200 module. </p>

</div>
</div>
<a id="aae3fa128e84412b35d983e84fdd5abe4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae3fa128e84412b35d983e84fdd5abe4">&sect;&nbsp;</a></span>enable_baseband_ap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.enable_baseband_ap </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>enable_baseband_ap(PyX2M200 self) </p>
<p>Enable amplitude/phase baseband output.</p>
<p>For all supported profiles it is possible to turn on Amplitude Phase baseband output. </p>

</div>
</div>
<a id="a689d1c431bc30d65042f9a885e3ceae5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a689d1c431bc30d65042f9a885e3ceae5">&sect;&nbsp;</a></span>enable_baseband_iq()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.enable_baseband_iq </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>enable_baseband_iq(PyX2M200 self) </p>
<p>Enable I/Q baseband output.</p>
<p>For all supported profiles it is possible to turn on IQ baseband output. </p>

</div>
</div>
<a id="a6361e4cf75fdcc702a628eba0c060f33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6361e4cf75fdcc702a628eba0c060f33">&sect;&nbsp;</a></span>enable_resp_output()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.enable_resp_output </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>enable_resp_output(PyX2M200 self) </p>
<p>Turn on respiration status output from the Xethru X2M200 module. </p>

</div>
</div>
<a id="ab863661b0d2c0a6ef0c5f69c31710808"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab863661b0d2c0a6ef0c5f69c31710808">&sect;&nbsp;</a></span>get_app_id_list()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_app_id_list </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_app_id_list(PyX2M200 self) -&gt; std::string </p>
<p>Get a list of supported profiles.</p>
<h2>Returns </h2>
<p>A list of supported profiles as a string. </p>

</div>
</div>
<a id="a3279484711dbcf08cc1f6ec71dff869b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3279484711dbcf08cc1f6ec71dff869b">&sect;&nbsp;</a></span>get_baseband_ap_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_baseband_ap_data </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_baseband_ap_data(PyX2M200 self, std::string const name) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_baseband_ap_data.xhtml">BasebandApData</a> </p>
<p>Get one baseband data message from subscription queue.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of subscription</li>
</ul>
<h2>Returns </h2>
<p>A data object holding the resulting amplitude/phase baseband data. </p>

</div>
</div>
<a id="aa2dd35d34f70660ae8c26fc0ee59bf42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2dd35d34f70660ae8c26fc0ee59bf42">&sect;&nbsp;</a></span>get_baseband_iq_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_baseband_iq_data </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_baseband_iq_data(PyX2M200 self, std::string const name) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_baseband_iq_data.xhtml">BasebandIqData</a> </p>
<p>Get one baseband data message from subscription queue.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of subscription</li>
</ul>
<h2>Returns </h2>
<p>A data object holding the resulting I/Q baseband data. </p>

</div>
</div>
<a id="a16616e599b8614986a288bd535d982de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16616e599b8614986a288bd535d982de">&sect;&nbsp;</a></span>get_build_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_build_info </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_build_info(PyX2M200 self) -&gt; std::string </p>
<p>Get information of the SW build installed on the device.</p>
<h2>Returns </h2>
<p>Build info description. </p>

</div>
</div>
<a id="a10afd1cd98a04bb203dfc3db50a9a173"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10afd1cd98a04bb203dfc3db50a9a173">&sect;&nbsp;</a></span>get_firmware_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_firmware_id </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_firmware_id(PyX2M200 self) -&gt; std::string </p>
<p>Get the installed Firmware ID.</p>
<h2>Returns </h2>
<p>Firmware ID. </p>

</div>
</div>
<a id="a810e5d07ede824e4d042cfc9523135f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a810e5d07ede824e4d042cfc9523135f7">&sect;&nbsp;</a></span>get_firmware_version()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_firmware_version </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_firmware_version(PyX2M200 self) -&gt; std::string </p>
<p>Get the installed Firmware version.</p>
<h2>Returns </h2>
<p>Firmware version. </p>

</div>
</div>
<a id="a465a516cea86e699e02b1723e3fdd842"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a465a516cea86e699e02b1723e3fdd842">&sect;&nbsp;</a></span>get_item_number()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_item_number </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_item_number(PyX2M200 self) -&gt; std::string </p>
<p>Get the Novelda PCBA Item Number, including revision.</p>
<h2>Returns </h2>
<p>PCBA item number and revision. </p>

</div>
</div>
<a id="a7e7a107912a579d2de8584fb7216bac6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e7a107912a579d2de8584fb7216bac6">&sect;&nbsp;</a></span>get_number_of_packets()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_number_of_packets </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_number_of_packets(PyX2M200 self, std::string const &amp; name) -&gt; unsigned int </p>
<p>Get number of packets in a named subscription queue/buffer.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of the subscription </li>
</ul>

</div>
</div>
<a id="a9d4eaa480b55f97012019019696a036d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d4eaa480b55f97012019019696a036d">&sect;&nbsp;</a></span>get_order_code()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_order_code </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_order_code(PyX2M200 self) -&gt; std::string </p>
<p>Get Novelda PCBA Order Code.</p>
<h2>Returns </h2>
<p>PCBA order code. </p>

</div>
</div>
<a id="a29d88bed13184a25269861da13441ab5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29d88bed13184a25269861da13441ab5">&sect;&nbsp;</a></span>get_packet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_packet </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_packet(PyX2M200 self, std::string const &amp; name) -&gt; ucVector </p>
<p>Get one packets of data.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : name of subscription given when during the subscribe.</li>
</ul>
<h2>Returns </h2>
<p>packet the packet data as a vector of bytes. </p>

</div>
</div>
<a id="a95312b223059c2bb378a3e3b55b3db89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95312b223059c2bb378a3e3b55b3db89">&sect;&nbsp;</a></span>get_respiration_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_respiration_data </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_respiration_data(PyX2M200 self, std::string const name) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_respiration_data.xhtml" title="Represents the respiration status data coming from the module. ">RespirationData</a> </p>
<p>Get one respiration data message from subscription queue.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of subscription</li>
</ul>
<h2>Returns </h2>
<p>A data object holding the resulting respiration data. </p>

</div>
</div>
<a id="ac7e832229d201de7a41ee2e5cf25ecbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7e832229d201de7a41ee2e5cf25ecbf">&sect;&nbsp;</a></span>get_serial_number()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_serial_number </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_serial_number(PyX2M200 self) -&gt; std::string </p>
<p>Get the module serial number.</p>
<p>The serial number is unique for each module.</p>
<h2>Returns </h2>
<p>Unique module serial number. </p>

</div>
</div>
<a id="a69795dfe5404e124ebd24e98826848bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69795dfe5404e124ebd24e98826848bf">&sect;&nbsp;</a></span>get_sleep_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.get_sleep_data </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_sleep_data(PyX2M200 self, std::string const name) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_sleep_data.xhtml" title="Represents the sleep status data coming from the module. ">SleepData</a> </p>
<p>Get one sleep data message from subscription queue.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of subscription</li>
</ul>
<h2>Returns </h2>
<p>A data object holding the resulting sleep data. </p>

</div>
</div>
<a id="ac662eeff0026a6218b3a9a3e1b2cc0af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac662eeff0026a6218b3a9a3e1b2cc0af">&sect;&nbsp;</a></span>load_respiration_profile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.load_respiration_profile </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>load_respiration_profile(PyX2M200 self) </p>
<p>Load the respiration profile.</p>
<p>A profile is a preset configuration that makes the module behave in a certain way. The module will not start sending data until a set_sensor_mode_run command is executed. </p>

</div>
</div>
<a id="a525708f2096309905cf2a5521868847a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a525708f2096309905cf2a5521868847a">&sect;&nbsp;</a></span>load_sleep_profile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.load_sleep_profile </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>load_sleep_profile(PyX2M200 self) </p>
<p>Load the sleep profile.</p>
<p>A profile is a preset configuration that makes the module behave in a certain way. The module will not start sending data until a set_sensor_mode_run command is executed. </p>

</div>
</div>
<a id="ac60a88e5886ba9169d17794cf5329565"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac60a88e5886ba9169d17794cf5329565">&sect;&nbsp;</a></span>ping()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.ping </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>ping(PyX2M200 self) -&gt; unsigned int </p>
<p>Send a ping message to the module.</p>
<p>This command is typically used to verify connectivity to the module.</p>
<h2>Returns </h2>
<p>The response. </p>

</div>
</div>
<a id="af4cc47b13396ec86470dc97188521e64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4cc47b13396ec86470dc97188521e64">&sect;&nbsp;</a></span>reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.reset </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>reset(PyX2M200 self) </p>
<p>Reset the module.</p>
<p>This method sends a reset command to the Xethru module. The module will try to reset and come back up again.</p>
<p>During this call the ModuleConnector will try multiple times to reconnect with the rebooted module. </p>

</div>
</div>
<a id="a39e22df5876a6a6191dc3d442e656573"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39e22df5876a6a6191dc3d442e656573">&sect;&nbsp;</a></span>set_debug_level()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.set_debug_level </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>level</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_debug_level(PyX2M200 self, unsigned char level) </p>
<p>Set debug level on the Xethru module.</p>
<h2>Parameters </h2>
<ul>
<li><code>level</code> : New debug level. Legal range [0-9]. </li>
</ul>

</div>
</div>
<a id="a3c0f4ead1bf1cc85246e8ad0493c1f27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c0f4ead1bf1cc85246e8ad0493c1f27">&sect;&nbsp;</a></span>set_detection_zone()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.set_detection_zone </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_detection_zone(PyX2M200 self, float start, float end) </p>
<p>Set the desired detection zone.</p>
<p>The sensor will detect movements within this area.</p>
<h2>Parameters </h2>
<ul>
<li><code>start</code> : Start of detection zone in meters from the radar</li>
<li><code>end</code> : End of detection zone in meters from the radar </li>
</ul>

</div>
</div>
<a id="adb0f24e9a448f4feb4699032f57587fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb0f24e9a448f4feb4699032f57587fa">&sect;&nbsp;</a></span>set_led_control()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.set_led_control </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>intensity</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_led_control(PyX2M200 self, uint8_t mode, uint8_t intensity) </p>
<p>Configures the module LED mode.</p>
<p>The setting survives a power cycle.</p>
<h2>Parameters </h2>
<ul>
<li><code>mode</code> : 0 Off, 1: Simple, 2: Full (default)</li>
<li><code>intensity</code> : intensity of the led </li>
</ul>

</div>
</div>
<a id="a3eb7c7e255d9691dda635e9a800924b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3eb7c7e255d9691dda635e9a800924b7">&sect;&nbsp;</a></span>set_log_level()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.set_log_level </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>level</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_log_level(PyX2M200 self, unsigned int level) </p>
<p>Set log level of ModuleConnector.</p>
<h2>Parameters </h2>
<ul>
<li><code>level</code> : New debug level. Legal range [0-9].</li>
</ul>
<h2>Returns </h2>
<p>status (0==OK) </p>

</div>
</div>
<a id="a2718889bd1d8d5fd08fb7764fe27db6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2718889bd1d8d5fd08fb7764fe27db6c">&sect;&nbsp;</a></span>set_sensitivity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.set_sensitivity </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>new_sensitivity</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_sensitivity(PyX2M200 self, uint32_t new_sensitivity) </p>
<p>Set module sensitivity.</p>
<h2>Parameters </h2>
<ul>
<li><code>new_sensitivity</code> : Sensitivity level from 0 (low) to 9 (high) </li>
</ul>

</div>
</div>
<a id="a7dcebc52382cfdb72866673257e283fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7dcebc52382cfdb72866673257e283fb">&sect;&nbsp;</a></span>set_sensor_mode_idle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.set_sensor_mode_idle </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_sensor_mode_idle(PyX2M200 self) </p>
<p>Set the sensor in idle mode.</p>
<p>The sensor will stop sending data. The sensor can be put back in run mode with the <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x2_m200.xhtml#a79b4fa9389e01136ba6134b80059000a" title="set_sensor_mode_run(PyX2M200 self) ">set_sensor_mode_run()</a>. </p>

</div>
</div>
<a id="a79b4fa9389e01136ba6134b80059000a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79b4fa9389e01136ba6134b80059000a">&sect;&nbsp;</a></span>set_sensor_mode_run()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.set_sensor_mode_run </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_sensor_mode_run(PyX2M200 self) </p>
<p>Set the sensor in run mode.</p>
<p>In run mode the sensor will send a stream of data back to the host. The data in the data stream depends on the current configuration. </p>

</div>
</div>
<a id="afc6e6c7f167e36affd9c58da070cbbd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc6e6c7f167e36affd9c58da070cbbd8">&sect;&nbsp;</a></span>start_bootloader()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.start_bootloader </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>start_bootloader(PyX2M200 self) </p>
<p>Start the bootloader for FW upgrades.</p>
<p>All the Xethru modules have a bootloader. This method instructs the Xethru module to reboot into bootloader mode. </p>

</div>
</div>
<a id="a00d077c725bdc7bb2195c80f33d71066"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00d077c725bdc7bb2195c80f33d71066">&sect;&nbsp;</a></span>subscribe_to_baseband_ap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.subscribe_to_baseband_ap </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>subscribe_to_baseband_ap(PyX2M200 self, std::string const &amp; name) -&gt; int </p>
<p>Adds a subscription for amplitude phase baseband data packets.</p>
<p>Creates a queue/buffer for incoming amplitude phase baseband packet stream. The queue must be given a name.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of the queue/buffer </li>
</ul>

</div>
</div>
<a id="a894901e71ab517f72c2368f1adc0ad6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a894901e71ab517f72c2368f1adc0ad6a">&sect;&nbsp;</a></span>subscribe_to_baseband_iq()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.subscribe_to_baseband_iq </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>subscribe_to_baseband_iq(PyX2M200 self, std::string const &amp; name) -&gt; int </p>
<p>Adds a subscription for IQ baseband data packets.</p>
<p>Creates a queue/buffer for incoming IQ baseband packet stream. The queue must be given a name.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of the buffer/queue </li>
</ul>

</div>
</div>
<a id="a7e9f4604aff87939e0a0a500bd6a4fee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e9f4604aff87939e0a0a500bd6a4fee">&sect;&nbsp;</a></span>subscribe_to_resp_status()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.subscribe_to_resp_status </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>subscribe_to_resp_status(PyX2M200 self, std::string const &amp; name) -&gt; int </p>
<p>Adds a subscription for respiration data packets.</p>
<p>Creates a queue/buffer for incoming respiration packet stream. The queue must be given a name.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of the buffer </li>
</ul>

</div>
</div>
<a id="aacf18c7a963144fc5cd0c12f9e1e0a15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacf18c7a963144fc5cd0c12f9e1e0a15">&sect;&nbsp;</a></span>subscribe_to_sleep_status()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.subscribe_to_sleep_status </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>subscribe_to_sleep_status(PyX2M200 self, std::string const &amp; name) -&gt; int </p>
<p>Adds a subscription for sleep status data packets.</p>
<p>Creates a queue/buffer for incoming sleep packet stream. The queue must be given a name.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of the queue/buffer </li>
</ul>

</div>
</div>
<a id="ac4867262b90a15caa85c0749c346bd96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4867262b90a15caa85c0749c346bd96">&sect;&nbsp;</a></span>unsubscribe()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX2M200.unsubscribe </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>unsubscribe(PyX2M200 self, std::string const &amp; name) </p>
<p>Turns off a named subscription.</p>
<h2>Parameters </h2>
<ul>
<li><code>name</code> : Name of the subscription to disable </li>
</ul>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>pymoduleconnector/moduleconnectorwrapper/__init__.py</li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
