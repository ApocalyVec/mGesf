<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>pymoduleconnector: X2M200_plot_respiration.py</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">pymoduleconnector
          &#160;<span id="projectnumber">1.6.2</span>
        </div>
        <div id="projectbrief" class="col-sm-12">A Python wrapper for XeThru ModuleConnector</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">X2M200_plot_respiration.py</div>  </div>
</div><!--header-->
<div class="contents">
<p>Target module: X2M200Introduction: This is an example of how to set up and read respiration messages from the X2M200 module with the ModuleConnector python wrapper.</p>
<p>Command to run: "python X2M200_read_recording.py -d com8" or "python3 X2M200_read_recording.py -d com8" change "com8" with your device name, using "--help" to see other options.</p>
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">#!/usr/bin/env python</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot; \example X2M200_plot_respiration.py</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="stringliteral">#Target module: X2M200</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="stringliteral">#Introduction: This is an example of how to set up and read respiration messages from the</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="stringliteral">               X2M200 module with the ModuleConnector python wrapper.</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="stringliteral">#Command to run: &quot;python X2M200_read_recording.py -d com8&quot; or &quot;python3 X2M200_read_recording.py -d com8&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="stringliteral">                 change &quot;com8&quot; with your device name, using &quot;--help&quot; to see other options.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> animation</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">from</span> pymoduleconnector <span class="keyword">import</span> ModuleConnector</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">def </span>x2m200_respiration_message_example(device_name, detection_zone=(0.4,1)):</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="stringliteral">&quot;&quot;&quot; X2M200 respiration message example.</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="stringliteral">    This example connects to a X2M200 device, loads the sleep profile,</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="stringliteral">    configures the sensor and plots the respiration message output.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="stringliteral">    Parameters</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="stringliteral">    ----------</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="stringliteral">    * device_name : str</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="stringliteral">        Device name connection string, e.g Windows com4, linux /dev/ttyACM0</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="stringliteral">    * detection_zone : tuple, optional</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="stringliteral">        detection zone start and stop.</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral">    Returns</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral">    -------</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">    The initiated x2m200 object.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    zstart = detection_zone[0]</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    zend = detection_zone[1]</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    mc = ModuleConnector(device_name, log_level=0)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    x2m200 = mc.get_x2m200()</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    x2m200.load_sleep_profile()</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    x2m200.subscribe_to_resp_status(<span class="stringliteral">&#39;resp_status&#39;</span>)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    x2m200.set_detection_zone(zstart, zend)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    x2m200.set_sensor_mode_run()</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    rdata = x2m200.get_respiration_data(<span class="stringliteral">&#39;resp_status&#39;</span>)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    xhist = 500 <span class="comment"># x axis data points</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    fps = 20.0</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    x=np.arange(0,xhist/fps,1/fps)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    qdist = deque([rdata.distance]*xhist, maxlen=xhist)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment"># dict to configure the different plots</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    plotdata = { <span class="stringliteral">&#39;sensor_state&#39;</span> : {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                     <span class="stringliteral">&#39;minmax&#39;</span>   : (0-0.1, 5),</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                     <span class="stringliteral">&#39;isubplot&#39;</span> : 1,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                     <span class="stringliteral">&#39;ylabel&#39;</span>   : <span class="stringliteral">&quot;Sensor state &quot;</span>,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                     },</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                 <span class="stringliteral">&#39;respiration_rate&#39;</span> : {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                         <span class="stringliteral">&#39;minmax&#39;</span>   : (8,20),</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                         <span class="stringliteral">&#39;isubplot&#39;</span> : 2,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                         <span class="stringliteral">&#39;ylabel&#39;</span>   : <span class="stringliteral">&quot;Respiration rate\n(RPM)&quot;</span>,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                         },</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                 <span class="stringliteral">&#39;movement&#39;</span> : {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                     <span class="stringliteral">&#39;minmax&#39;</span>   : (-5, 5),</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                     <span class="stringliteral">&#39;isubplot&#39;</span> : 3,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                     <span class="stringliteral">&#39;ylabel&#39;</span>   : <span class="stringliteral">&quot;Movement\n(mm)&quot;</span>,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                     },</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                 <span class="stringliteral">&#39;distance&#39;</span> : {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                     <span class="stringliteral">&#39;minmax&#39;</span>   : (zstart-0.1, zend+0.1),</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                     <span class="stringliteral">&#39;isubplot&#39;</span> : 4,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                     <span class="stringliteral">&#39;ylabel&#39;</span>   : <span class="stringliteral">&quot;Distance\n(m)&quot;</span>,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                     },</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    fig, axs = plt.subplots(nrows = len(plotdata), ncols = 1, figsize = (10,10))</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    fig.canvas.mpl_connect(<span class="stringliteral">&#39;resize_event&#39;</span>, <span class="keyword">lambda</span> x: plt.tight_layout())</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    fig.suptitle(<span class="stringliteral">&quot;X2M200 respiration message example&quot;</span>, y=0.995)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment"># used by animator, will be filled with all lines to update</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    lines=[]</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">for</span> key, settings <span class="keywordflow">in</span> plotdata.iteritems():</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment"># make data queue</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        qdata = deque([rdata.__getattr__(key)]*xhist, maxlen=xhist)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="comment"># add max/min data for y limits</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        maxmin = settings[<span class="stringliteral">&#39;minmax&#39;</span>]</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        qdata.appendleft(maxmin[0])</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        qdata.appendleft(maxmin[1])</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment"># plot data</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        ax = axs[settings[<span class="stringliteral">&#39;isubplot&#39;</span>]-1]</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        settings[<span class="stringliteral">&#39;line&#39;</span>], = ax.plot(x, qdata)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        settings[<span class="stringliteral">&#39;data&#39;</span>] = qdata</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        lines.append(settings[<span class="stringliteral">&#39;line&#39;</span>])</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        ax.set_title(key)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        ax.set_ylabel(settings[<span class="stringliteral">&#39;ylabel&#39;</span>])</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        ax.grid(1)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    states = [<span class="stringliteral">&#39;Breathing&#39;</span>,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;              <span class="stringliteral">&#39;Movement&#39;</span>,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;              <span class="stringliteral">&#39;Movement, tracking&#39;</span>,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;              <span class="stringliteral">&#39;NoMovement&#39;</span>,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;              <span class="stringliteral">&#39;Initializing&#39;</span>,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;              <span class="stringliteral">&#39;Error&#39;</span>,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;              <span class="stringliteral">&#39;Unknown&#39;</span>]</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    ax = axs[plotdata[<span class="stringliteral">&#39;sensor_state&#39;</span>][<span class="stringliteral">&#39;isubplot&#39;</span>]-1]</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    locs = ax.set_yticks(range(len(states)))</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    labels = ax.set_yticklabels(states)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">def </span>animate(i):</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        rdata = x2m200.get_respiration_data(<span class="stringliteral">&#39;resp_status&#39;</span>)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">for</span> key, settings <span class="keywordflow">in</span> plotdata.iteritems():</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            settings[<span class="stringliteral">&#39;data&#39;</span>].append(rdata.__getattr__(key))</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            settings[<span class="stringliteral">&#39;line&#39;</span>].set_ydata(settings[<span class="stringliteral">&#39;data&#39;</span>])  <span class="comment"># update the data</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">return</span> lines</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">def </span>init():</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines:</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            line.set_ydata(np.ma.array(x, mask=<span class="keyword">True</span>))</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">return</span> lines</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment"># Clear data in the pipe</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    x2m200.clear(<span class="stringliteral">&#39;resp_status&#39;</span>)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    ani = animation.FuncAnimation(fig, animate, frames=<span class="keywordtype">None</span>, init_func=init,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                  interval=1000./(2*fps), blit=<span class="keyword">True</span>)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    plt.tight_layout()</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    plt.show()</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span> x2m200</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">def </span>main():</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">import</span> sys</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    parser = OptionParser()</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    parser.add_option(</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="stringliteral">&quot;-d&quot;</span>,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="stringliteral">&quot;--device&quot;</span>,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        dest=<span class="stringliteral">&quot;device_name&quot;</span>,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        help=<span class="stringliteral">&quot;device file to use, example: python %s -d COM4&quot;</span>%sys.argv[0],</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        metavar=<span class="stringliteral">&quot;FILE&quot;</span>)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    parser.add_option(<span class="stringliteral">&#39;-z&#39;</span>, <span class="stringliteral">&#39;--detection_zone&#39;</span>, nargs=2, type=<span class="stringliteral">&#39;float&#39;</span>,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        help=<span class="stringliteral">&#39;Start and stop of detection zone.&#39;</span>, metavar=<span class="stringliteral">&#39;START STOP&#39;</span>,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        default=(0.4, 1))</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    (options, args) = parser.parse_args()</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> options.device_name:</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        print(<span class="stringliteral">&quot;Please specify a device name, example: python %s -d COM4&quot;</span>%sys.argv[0])</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        sys.exit(1)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    x2m200_respiration_message_example(**vars(options))</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keywordflow">if</span> __name__ == <span class="stringliteral">&quot;__main__&quot;</span>:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    main()</div></div><!-- fragment --> </div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
