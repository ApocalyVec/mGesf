<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ModuleConnector: XeThru::X2M200 Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">ModuleConnector
          &#160;<span id="projectnumber">1.6.2</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Project brief</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_xe_thru.xhtml">XeThru</a></li><li class="navelem"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml">X2M200</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_xe_thru_1_1_x2_m200-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">XeThru::X2M200 Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Interface to the Xethru <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module This interface is used to control the XeThruu X2M20...">X2M200</a> Application module This interface is used to control the XeThruu <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module This interface is used to control the XeThruu X2M20...">X2M200</a> module.  
 <a href="class_xe_thru_1_1_x2_m200.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_x2_m200_8hpp_source.xhtml">X2M200.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a2fa7922f611073bb4968befd80fe2435"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a2fa7922f611073bb4968befd80fe2435">X2M200</a> (LockedRadarInterfacePtr &amp;a_radar_interface)</td></tr>
<tr class="memdesc:a2fa7922f611073bb4968befd80fe2435"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a2fa7922f611073bb4968befd80fe2435">More...</a><br /></td></tr>
<tr class="separator:a2fa7922f611073bb4968befd80fe2435"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4c6e45909dbd0834fbe780cab39d5bc"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#aa4c6e45909dbd0834fbe780cab39d5bc">set_debug_level</a> (unsigned char level)</td></tr>
<tr class="memdesc:aa4c6e45909dbd0834fbe780cab39d5bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets debug level in the Xethru module.  <a href="#aa4c6e45909dbd0834fbe780cab39d5bc">More...</a><br /></td></tr>
<tr class="separator:aa4c6e45909dbd0834fbe780cab39d5bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48694f6519b83d5ad32c166fdb2c7250"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a48694f6519b83d5ad32c166fdb2c7250">set_log_level</a> (unsigned int level)</td></tr>
<tr class="memdesc:a48694f6519b83d5ad32c166fdb2c7250"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set log level of <a class="el" href="class_xe_thru_1_1_module_connector.xhtml" title="This class is responsible for establishing contact with the Xethru module. ">ModuleConnector</a>.  <a href="#a48694f6519b83d5ad32c166fdb2c7250">More...</a><br /></td></tr>
<tr class="separator:a48694f6519b83d5ad32c166fdb2c7250"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0a9dd13483266cd03739b35dfe349cb"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#ad0a9dd13483266cd03739b35dfe349cb">ping</a> (unsigned int *pong)</td></tr>
<tr class="memdesc:ad0a9dd13483266cd03739b35dfe349cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a ping message to the module.  <a href="#ad0a9dd13483266cd03739b35dfe349cb">More...</a><br /></td></tr>
<tr class="separator:ad0a9dd13483266cd03739b35dfe349cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaf11acfc7ae603cea2f3d9b8f5b38bd"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#afaf11acfc7ae603cea2f3d9b8f5b38bd">get_item_number</a> (std::string *item_number)</td></tr>
<tr class="memdesc:afaf11acfc7ae603cea2f3d9b8f5b38bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the Novelda PCBA Item Number, including revision.  <a href="#afaf11acfc7ae603cea2f3d9b8f5b38bd">More...</a><br /></td></tr>
<tr class="separator:afaf11acfc7ae603cea2f3d9b8f5b38bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa852e4be57b804ff782e464b6fafac2e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#aa852e4be57b804ff782e464b6fafac2e">get_order_code</a> (std::string *order_code)</td></tr>
<tr class="memdesc:aa852e4be57b804ff782e464b6fafac2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get Novelda PCBA Order Code.  <a href="#aa852e4be57b804ff782e464b6fafac2e">More...</a><br /></td></tr>
<tr class="separator:aa852e4be57b804ff782e464b6fafac2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afac0abde2d7bbe1bfe1225cd5fb8178c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#afac0abde2d7bbe1bfe1225cd5fb8178c">get_firmware_id</a> (std::string *firmware_id)</td></tr>
<tr class="memdesc:afac0abde2d7bbe1bfe1225cd5fb8178c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the installed Firmware ID.  <a href="#afac0abde2d7bbe1bfe1225cd5fb8178c">More...</a><br /></td></tr>
<tr class="separator:afac0abde2d7bbe1bfe1225cd5fb8178c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae16a1a9f5551ed9d143001c2676ffeeb"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#ae16a1a9f5551ed9d143001c2676ffeeb">get_firmware_version</a> (std::string *version)</td></tr>
<tr class="memdesc:ae16a1a9f5551ed9d143001c2676ffeeb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the installed Firmware version.  <a href="#ae16a1a9f5551ed9d143001c2676ffeeb">More...</a><br /></td></tr>
<tr class="separator:ae16a1a9f5551ed9d143001c2676ffeeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acad5102237267d59a1eb52897a1323dc"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#acad5102237267d59a1eb52897a1323dc">get_serial_number</a> (std::string *serial_number)</td></tr>
<tr class="memdesc:acad5102237267d59a1eb52897a1323dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the module serial number.  <a href="#acad5102237267d59a1eb52897a1323dc">More...</a><br /></td></tr>
<tr class="separator:acad5102237267d59a1eb52897a1323dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a243c58787a9003535b69585d4b663485"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a243c58787a9003535b69585d4b663485">get_build_info</a> (std::string *build_info)</td></tr>
<tr class="memdesc:a243c58787a9003535b69585d4b663485"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get information about the SW build installed on the Xethru module.  <a href="#a243c58787a9003535b69585d4b663485">More...</a><br /></td></tr>
<tr class="separator:a243c58787a9003535b69585d4b663485"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbd2e02c923f4b9e5a664b072a65e8a3"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#acbd2e02c923f4b9e5a664b072a65e8a3">get_app_id_list</a> (std::string *app_id_list)</td></tr>
<tr class="memdesc:acbd2e02c923f4b9e5a664b072a65e8a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a list of supported profiles.  <a href="#acbd2e02c923f4b9e5a664b072a65e8a3">More...</a><br /></td></tr>
<tr class="separator:acbd2e02c923f4b9e5a664b072a65e8a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad19fd6e4b808677cbbc2344f81773850"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#ad19fd6e4b808677cbbc2344f81773850">reset</a> ()</td></tr>
<tr class="memdesc:ad19fd6e4b808677cbbc2344f81773850"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset the module.  <a href="#ad19fd6e4b808677cbbc2344f81773850">More...</a><br /></td></tr>
<tr class="separator:ad19fd6e4b808677cbbc2344f81773850"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dcdafd2d8ef42333ab6400669cc834c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a7dcdafd2d8ef42333ab6400669cc834c">start_bootloader</a> ()</td></tr>
<tr class="separator:a7dcdafd2d8ef42333ab6400669cc834c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a390ddbac48157e215a8b0c3f74bb970c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a390ddbac48157e215a8b0c3f74bb970c">set_sensor_mode_run</a> ()</td></tr>
<tr class="memdesc:a390ddbac48157e215a8b0c3f74bb970c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the sensor in run mode.  <a href="#a390ddbac48157e215a8b0c3f74bb970c">More...</a><br /></td></tr>
<tr class="separator:a390ddbac48157e215a8b0c3f74bb970c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a134af2badcbb71caac089a0b2345c41b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a134af2badcbb71caac089a0b2345c41b">set_sensor_mode_idle</a> ()</td></tr>
<tr class="memdesc:a134af2badcbb71caac089a0b2345c41b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the sensor in idle mode.  <a href="#a134af2badcbb71caac089a0b2345c41b">More...</a><br /></td></tr>
<tr class="separator:a134af2badcbb71caac089a0b2345c41b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a927117597dd01b02dcf1cd09c60044af"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a927117597dd01b02dcf1cd09c60044af">load_sleep_profile</a> ()</td></tr>
<tr class="memdesc:a927117597dd01b02dcf1cd09c60044af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the sleep profile.  <a href="#a927117597dd01b02dcf1cd09c60044af">More...</a><br /></td></tr>
<tr class="separator:a927117597dd01b02dcf1cd09c60044af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9df1cb5539ee37bfa4a8ec63ad5a6279"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a9df1cb5539ee37bfa4a8ec63ad5a6279">load_respiration_profile</a> ()</td></tr>
<tr class="memdesc:a9df1cb5539ee37bfa4a8ec63ad5a6279"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the respiration profile.  <a href="#a9df1cb5539ee37bfa4a8ec63ad5a6279">More...</a><br /></td></tr>
<tr class="separator:a9df1cb5539ee37bfa4a8ec63ad5a6279"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72239884c257737c19d46278ad071655"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a72239884c257737c19d46278ad071655">enable_baseband_ap</a> ()</td></tr>
<tr class="memdesc:a72239884c257737c19d46278ad071655"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable amplitude/phase baseband output.  <a href="#a72239884c257737c19d46278ad071655">More...</a><br /></td></tr>
<tr class="separator:a72239884c257737c19d46278ad071655"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0017e00f2daadaacf4d61397c8351f5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#ae0017e00f2daadaacf4d61397c8351f5">disable_baseband_ap</a> ()</td></tr>
<tr class="memdesc:ae0017e00f2daadaacf4d61397c8351f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables amplitude/phase baseband output.  <a href="#ae0017e00f2daadaacf4d61397c8351f5">More...</a><br /></td></tr>
<tr class="separator:ae0017e00f2daadaacf4d61397c8351f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b3216489e28114882610c4de9468899"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a8b3216489e28114882610c4de9468899">enable_baseband_iq</a> ()</td></tr>
<tr class="memdesc:a8b3216489e28114882610c4de9468899"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable I/Q baseband output.  <a href="#a8b3216489e28114882610c4de9468899">More...</a><br /></td></tr>
<tr class="separator:a8b3216489e28114882610c4de9468899"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4863171bf162f7f7757aa9cc815468e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#ab4863171bf162f7f7757aa9cc815468e">disable_baseband_iq</a> ()</td></tr>
<tr class="memdesc:ab4863171bf162f7f7757aa9cc815468e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables I/Q baseband output.  <a href="#ab4863171bf162f7f7757aa9cc815468e">More...</a><br /></td></tr>
<tr class="separator:ab4863171bf162f7f7757aa9cc815468e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abacb6075489dbfea4f4f06a2d8c5d5c3"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#abacb6075489dbfea4f4f06a2d8c5d5c3">set_detection_zone</a> (float start, float end)</td></tr>
<tr class="memdesc:abacb6075489dbfea4f4f06a2d8c5d5c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the desired detection zone.  <a href="#abacb6075489dbfea4f4f06a2d8c5d5c3">More...</a><br /></td></tr>
<tr class="separator:abacb6075489dbfea4f4f06a2d8c5d5c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a946d95b120cc169737d1ba38381d9f79"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a946d95b120cc169737d1ba38381d9f79">set_sensitivity</a> (uint32_t sensitivity)</td></tr>
<tr class="memdesc:a946d95b120cc169737d1ba38381d9f79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set module sensitivity.  <a href="#a946d95b120cc169737d1ba38381d9f79">More...</a><br /></td></tr>
<tr class="separator:a946d95b120cc169737d1ba38381d9f79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a318669eb1b05d6248961c2d6c5f9885f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a318669eb1b05d6248961c2d6c5f9885f">set_led_control</a> (uint8_t mode, uint8_t intensity)</td></tr>
<tr class="memdesc:a318669eb1b05d6248961c2d6c5f9885f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures the module LED mode.  <a href="#a318669eb1b05d6248961c2d6c5f9885f">More...</a><br /></td></tr>
<tr class="separator:a318669eb1b05d6248961c2d6c5f9885f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4eb4627e55c32b05437956c065335e7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#ac4eb4627e55c32b05437956c065335e7">subscribe_to_resp_status</a> (const std::string &amp;name)</td></tr>
<tr class="memdesc:ac4eb4627e55c32b05437956c065335e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a subscription for respiration data packets.  <a href="#ac4eb4627e55c32b05437956c065335e7">More...</a><br /></td></tr>
<tr class="separator:ac4eb4627e55c32b05437956c065335e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4512906b488073f13242c42c8f358f26"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a4512906b488073f13242c42c8f358f26">subscribe_to_resp_status</a> (const std::string &amp;name, std::function&lt; bool(Bytes)&gt; callback)</td></tr>
<tr class="memdesc:a4512906b488073f13242c42c8f358f26"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a subscription for respiration data packets.  <a href="#a4512906b488073f13242c42c8f358f26">More...</a><br /></td></tr>
<tr class="separator:a4512906b488073f13242c42c8f358f26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f3e626bb4612d83f6edef2e0800d9f8"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a6f3e626bb4612d83f6edef2e0800d9f8">subscribe_to_sleep_status</a> (const std::string &amp;name)</td></tr>
<tr class="memdesc:a6f3e626bb4612d83f6edef2e0800d9f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a subscription for sleep status data packets.  <a href="#a6f3e626bb4612d83f6edef2e0800d9f8">More...</a><br /></td></tr>
<tr class="separator:a6f3e626bb4612d83f6edef2e0800d9f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcbc70fa38b9feb178c6b6ef4e6d4903"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#adcbc70fa38b9feb178c6b6ef4e6d4903">subscribe_to_sleep_status</a> (const std::string &amp;name, std::function&lt; bool(Bytes)&gt; callback)</td></tr>
<tr class="memdesc:adcbc70fa38b9feb178c6b6ef4e6d4903"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a subscription for sleep data packets.  <a href="#adcbc70fa38b9feb178c6b6ef4e6d4903">More...</a><br /></td></tr>
<tr class="separator:adcbc70fa38b9feb178c6b6ef4e6d4903"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add20943f2535b9b129e7a221e8a61dc1"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#add20943f2535b9b129e7a221e8a61dc1">subscribe_to_baseband_ap</a> (const std::string &amp;name)</td></tr>
<tr class="memdesc:add20943f2535b9b129e7a221e8a61dc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a subscription for amplitude phase baseband data packets.  <a href="#add20943f2535b9b129e7a221e8a61dc1">More...</a><br /></td></tr>
<tr class="separator:add20943f2535b9b129e7a221e8a61dc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebc6f10833152b9603bbba4b75a2bfc7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#aebc6f10833152b9603bbba4b75a2bfc7">subscribe_to_baseband_ap</a> (const std::string &amp;name, std::function&lt; bool(Bytes)&gt; callback)</td></tr>
<tr class="memdesc:aebc6f10833152b9603bbba4b75a2bfc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a subscription for amplitude phase baseband data packets.  <a href="#aebc6f10833152b9603bbba4b75a2bfc7">More...</a><br /></td></tr>
<tr class="separator:aebc6f10833152b9603bbba4b75a2bfc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a150e3619d868140c1fbfb732cd62773d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a150e3619d868140c1fbfb732cd62773d">subscribe_to_baseband_iq</a> (const std::string &amp;name)</td></tr>
<tr class="memdesc:a150e3619d868140c1fbfb732cd62773d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a subscription for IQ baseband data packets.  <a href="#a150e3619d868140c1fbfb732cd62773d">More...</a><br /></td></tr>
<tr class="separator:a150e3619d868140c1fbfb732cd62773d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad75fa2344b89d80a7ca3ee39d2e8454f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#ad75fa2344b89d80a7ca3ee39d2e8454f">subscribe_to_baseband_iq</a> (const std::string &amp;name, std::function&lt; bool(Bytes)&gt; callback)</td></tr>
<tr class="memdesc:ad75fa2344b89d80a7ca3ee39d2e8454f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a subscription for IQ baseband data packets.  <a href="#ad75fa2344b89d80a7ca3ee39d2e8454f">More...</a><br /></td></tr>
<tr class="separator:ad75fa2344b89d80a7ca3ee39d2e8454f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af53f6ec4d5e443b8b8c38e73c5f7fd30"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#af53f6ec4d5e443b8b8c38e73c5f7fd30">unsubscribe</a> (const std::string &amp;name)</td></tr>
<tr class="memdesc:af53f6ec4d5e443b8b8c38e73c5f7fd30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Turns off a named subscription.  <a href="#af53f6ec4d5e443b8b8c38e73c5f7fd30">More...</a><br /></td></tr>
<tr class="separator:af53f6ec4d5e443b8b8c38e73c5f7fd30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a820600edfe94be84400124fcc00022ed"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a820600edfe94be84400124fcc00022ed">disable_resp_output</a> ()</td></tr>
<tr class="memdesc:a820600edfe94be84400124fcc00022ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Turn off respiration status output from the Xethru <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module This interface is used to control the XeThruu X2M20...">X2M200</a> module.  <a href="#a820600edfe94be84400124fcc00022ed">More...</a><br /></td></tr>
<tr class="separator:a820600edfe94be84400124fcc00022ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eec995be1236886753c1900b674697d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a4eec995be1236886753c1900b674697d">enable_resp_output</a> ()</td></tr>
<tr class="memdesc:a4eec995be1236886753c1900b674697d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Turn on respiration status output from the Xethru <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module This interface is used to control the XeThruu X2M20...">X2M200</a> module.  <a href="#a4eec995be1236886753c1900b674697d">More...</a><br /></td></tr>
<tr class="separator:a4eec995be1236886753c1900b674697d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70dc264eda89c26ffa28fb8fa8e5f8e8"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a70dc264eda89c26ffa28fb8fa8e5f8e8">get_number_of_packets</a> (const std::string &amp;name)</td></tr>
<tr class="memdesc:a70dc264eda89c26ffa28fb8fa8e5f8e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get number of packets in a named subscription queue/buffer.  <a href="#a70dc264eda89c26ffa28fb8fa8e5f8e8">More...</a><br /></td></tr>
<tr class="separator:a70dc264eda89c26ffa28fb8fa8e5f8e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfa5df8511f09ee31533c0db9ee08830"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#adfa5df8511f09ee31533c0db9ee08830">get_respiration_data</a> (const std::string name, <a class="el" href="class_xe_thru_1_1_respiration_data.xhtml">RespirationData</a> *respiration_data)</td></tr>
<tr class="memdesc:adfa5df8511f09ee31533c0db9ee08830"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get one respiration data message from subscription queue.  <a href="#adfa5df8511f09ee31533c0db9ee08830">More...</a><br /></td></tr>
<tr class="separator:adfa5df8511f09ee31533c0db9ee08830"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78f8780bb03930600caa368d1f587e79"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a78f8780bb03930600caa368d1f587e79">get_sleep_data</a> (const std::string name, <a class="el" href="class_xe_thru_1_1_sleep_data.xhtml">SleepData</a> *sleep_data)</td></tr>
<tr class="memdesc:a78f8780bb03930600caa368d1f587e79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get one sleep data message from subscription queue.  <a href="#a78f8780bb03930600caa368d1f587e79">More...</a><br /></td></tr>
<tr class="separator:a78f8780bb03930600caa368d1f587e79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59fecd0b1eba176295a1415f8449d0c1"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a59fecd0b1eba176295a1415f8449d0c1">get_baseband_ap_data</a> (const std::string name, <a class="el" href="class_xe_thru_1_1_baseband_ap_data.xhtml">BasebandApData</a> *baseband_ap_data)</td></tr>
<tr class="memdesc:a59fecd0b1eba176295a1415f8449d0c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get one baseband data message from subscription queue.  <a href="#a59fecd0b1eba176295a1415f8449d0c1">More...</a><br /></td></tr>
<tr class="separator:a59fecd0b1eba176295a1415f8449d0c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae05eb33261c8ce1bf38ef015bd477f29"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#ae05eb33261c8ce1bf38ef015bd477f29">get_baseband_iq_data</a> (const std::string name, <a class="el" href="class_xe_thru_1_1_baseband_iq_data.xhtml">BasebandIqData</a> *baseband_iq_data)</td></tr>
<tr class="memdesc:ae05eb33261c8ce1bf38ef015bd477f29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get one baseband data message from subscription queue.  <a href="#ae05eb33261c8ce1bf38ef015bd477f29">More...</a><br /></td></tr>
<tr class="separator:ae05eb33261c8ce1bf38ef015bd477f29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20cf9bce35a3de767ffba16b11b3c109"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a20cf9bce35a3de767ffba16b11b3c109">clear</a> (const std::string &amp;name)</td></tr>
<tr class="memdesc:a20cf9bce35a3de767ffba16b11b3c109"><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty the buffer of the named data stream subscription.  <a href="#a20cf9bce35a3de767ffba16b11b3c109">More...</a><br /></td></tr>
<tr class="separator:a20cf9bce35a3de767ffba16b11b3c109"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Interface to the Xethru <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module This interface is used to control the XeThruu X2M20...">X2M200</a> Application module This interface is used to control the XeThruu <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module This interface is used to control the XeThruu X2M20...">X2M200</a> module. </p>
<p>See the data sheet of the <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module This interface is used to control the XeThruu X2M20...">X2M200</a> module for more information on the <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module This interface is used to control the XeThruu X2M20...">X2M200</a> module. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a2fa7922f611073bb4968befd80fe2435"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fa7922f611073bb4968befd80fe2435">&sect;&nbsp;</a></span>X2M200()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XeThru::X2M200::X2M200 </td>
          <td>(</td>
          <td class="paramtype">LockedRadarInterfacePtr &amp;&#160;</td>
          <td class="paramname"><em>a_radar_interface</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a_radar_interface</td><td>a reference to the internal radar interface </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a20cf9bce35a3de767ffba16b11b3c109"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20cf9bce35a3de767ffba16b11b3c109">&sect;&nbsp;</a></span>clear()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XeThru::X2M200::clear </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Empty the buffer of the named data stream subscription. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>Name of subscription </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae0017e00f2daadaacf4d61397c8351f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0017e00f2daadaacf4d61397c8351f5">&sect;&nbsp;</a></span>disable_baseband_ap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::disable_baseband_ap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disables amplitude/phase baseband output. </p>
<dl class="section return"><dt>Returns</dt><dd>0 on success, otherwise returns 1. </dd></dl>

</div>
</div>
<a id="ab4863171bf162f7f7757aa9cc815468e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4863171bf162f7f7757aa9cc815468e">&sect;&nbsp;</a></span>disable_baseband_iq()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::disable_baseband_iq </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disables I/Q baseband output. </p>
<dl class="section return"><dt>Returns</dt><dd>0 on success, otherwise returns 1. </dd></dl>

</div>
</div>
<a id="a820600edfe94be84400124fcc00022ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a820600edfe94be84400124fcc00022ed">&sect;&nbsp;</a></span>disable_resp_output()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::disable_resp_output </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Turn off respiration status output from the Xethru <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module This interface is used to control the XeThruu X2M20...">X2M200</a> module. </p>
<p>This setting does not survive a power cycle</p>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a72239884c257737c19d46278ad071655"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72239884c257737c19d46278ad071655">&sect;&nbsp;</a></span>enable_baseband_ap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::enable_baseband_ap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable amplitude/phase baseband output. </p>
<p>For all supported profiles it is possible to turn on Amplitude Phase baseband output.</p>
<p>This setting does not survive a power cycle</p>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a8b3216489e28114882610c4de9468899"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b3216489e28114882610c4de9468899">&sect;&nbsp;</a></span>enable_baseband_iq()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::enable_baseband_iq </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable I/Q baseband output. </p>
<p>For all supported profiles it is possible to turn on IQ baseband output.</p>
<p>This setting does not survive a power cycle</p>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a4eec995be1236886753c1900b674697d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4eec995be1236886753c1900b674697d">&sect;&nbsp;</a></span>enable_resp_output()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::enable_resp_output </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Turn on respiration status output from the Xethru <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml" title="Interface to the Xethru X2M200 Application module This interface is used to control the XeThruu X2M20...">X2M200</a> module. </p>
<p>This setting does not survive a power cycle</p>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="acbd2e02c923f4b9e5a664b072a65e8a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbd2e02c923f4b9e5a664b072a65e8a3">&sect;&nbsp;</a></span>get_app_id_list()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_app_id_list </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>app_id_list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a list of supported profiles. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">app_id_list</td><td>Pointer to where to assign the resulting list of supported app ids as a string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a59fecd0b1eba176295a1415f8449d0c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59fecd0b1eba176295a1415f8449d0c1">&sect;&nbsp;</a></span>get_baseband_ap_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_baseband_ap_data </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_xe_thru_1_1_baseband_ap_data.xhtml">BasebandApData</a> *&#160;</td>
          <td class="paramname"><em>baseband_ap_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get one baseband data message from subscription queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">name</td><td>Name of subscription </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">baseband_ap_data</td><td>A data object holding the resulting amplitude/phase baseband data.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="ae05eb33261c8ce1bf38ef015bd477f29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae05eb33261c8ce1bf38ef015bd477f29">&sect;&nbsp;</a></span>get_baseband_iq_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_baseband_iq_data </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_xe_thru_1_1_baseband_iq_data.xhtml">BasebandIqData</a> *&#160;</td>
          <td class="paramname"><em>baseband_iq_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get one baseband data message from subscription queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">name</td><td>Name of subscription </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">baseband_iq_data</td><td>A data object holding the resulting Inphase Quadrature baseband data.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a243c58787a9003535b69585d4b663485"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a243c58787a9003535b69585d4b663485">&sect;&nbsp;</a></span>get_build_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_build_info </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>build_info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get information about the SW build installed on the Xethru module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">build_info</td><td>Pointer to where to assign the resulting build info as a string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="afac0abde2d7bbe1bfe1225cd5fb8178c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afac0abde2d7bbe1bfe1225cd5fb8178c">&sect;&nbsp;</a></span>get_firmware_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_firmware_id </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>firmware_id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the installed Firmware ID. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">firmware_id</td><td>Pointer to where to assign the resulting firmware id as a string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="ae16a1a9f5551ed9d143001c2676ffeeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae16a1a9f5551ed9d143001c2676ffeeb">&sect;&nbsp;</a></span>get_firmware_version()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_firmware_version </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>version</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the installed Firmware version. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">version</td><td>Pointer to where to assign the resulting firmware version as a string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="afaf11acfc7ae603cea2f3d9b8f5b38bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afaf11acfc7ae603cea2f3d9b8f5b38bd">&sect;&nbsp;</a></span>get_item_number()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_item_number </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>item_number</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the Novelda PCBA Item Number, including revision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">item_number</td><td>Pointer to where to assign the resulting string response. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a70dc264eda89c26ffa28fb8fa8e5f8e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70dc264eda89c26ffa28fb8fa8e5f8e8">&sect;&nbsp;</a></span>get_number_of_packets()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int XeThru::X2M200::get_number_of_packets </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get number of packets in a named subscription queue/buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of subscription </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Number of packets in the queue </dd></dl>

</div>
</div>
<a id="aa852e4be57b804ff782e464b6fafac2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa852e4be57b804ff782e464b6fafac2e">&sect;&nbsp;</a></span>get_order_code()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_order_code </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>order_code</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get Novelda PCBA Order Code. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">order_code</td><td>Pointer to where to assign the resulting string response. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="adfa5df8511f09ee31533c0db9ee08830"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfa5df8511f09ee31533c0db9ee08830">&sect;&nbsp;</a></span>get_respiration_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_respiration_data </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_xe_thru_1_1_respiration_data.xhtml">RespirationData</a> *&#160;</td>
          <td class="paramname"><em>respiration_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get one respiration data message from subscription queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">name</td><td>Name of subscription </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">respiration_data</td><td>A data object holding the resulting respiration data.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="acad5102237267d59a1eb52897a1323dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acad5102237267d59a1eb52897a1323dc">&sect;&nbsp;</a></span>get_serial_number()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_serial_number </td>
          <td>(</td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>serial_number</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the module serial number. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">serial_number</td><td>Pointer to where to assign the resulting serial number as a string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a78f8780bb03930600caa368d1f587e79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78f8780bb03930600caa368d1f587e79">&sect;&nbsp;</a></span>get_sleep_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::get_sleep_data </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_xe_thru_1_1_sleep_data.xhtml">SleepData</a> *&#160;</td>
          <td class="paramname"><em>sleep_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get one sleep data message from subscription queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">name</td><td>Name of subscription </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">sleep_data</td><td>A data object holding the resulting respiration data.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a9df1cb5539ee37bfa4a8ec63ad5a6279"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9df1cb5539ee37bfa4a8ec63ad5a6279">&sect;&nbsp;</a></span>load_respiration_profile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::load_respiration_profile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load the respiration profile. </p>
<p>A profile is a preset configuration that makes the module behave in a certain way. The module will not start sending data until a set_sensor_mode_run command is executed.</p>
<p>This setting survives a power cycle</p>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a927117597dd01b02dcf1cd09c60044af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a927117597dd01b02dcf1cd09c60044af">&sect;&nbsp;</a></span>load_sleep_profile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::load_sleep_profile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load the sleep profile. </p>
<p>A profile is a preset configuration that makes the module behave in a certain way. The module will not start sending data until a set_sensor_mode_run command is executed.</p>
<p>This setting survives a power cycle</p>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="ad0a9dd13483266cd03739b35dfe349cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0a9dd13483266cd03739b35dfe349cb">&sect;&nbsp;</a></span>ping()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::ping </td>
          <td>(</td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>pong</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a ping message to the module. </p>
<p>This command is typically used to verify connectivity to the module.</p>
<p>This setting does not survive a power cycle</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pong</td><td>Pointer to where to assign the resulting unsigned int response. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="ad19fd6e4b808677cbbc2344f81773850"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad19fd6e4b808677cbbc2344f81773850">&sect;&nbsp;</a></span>reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::reset </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reset the module. </p>
<p>This method sends a reset command to the Xethru module. The module will try to reset and come back up again. During this call the <a class="el" href="class_xe_thru_1_1_module_connector.xhtml" title="This class is responsible for establishing contact with the Xethru module. ">ModuleConnector</a> will try multiple times to reconnect with the rebooted module.</p>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="aa4c6e45909dbd0834fbe780cab39d5bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4c6e45909dbd0834fbe780cab39d5bc">&sect;&nbsp;</a></span>set_debug_level()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::set_debug_level </td>
          <td>(</td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>level</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets debug level in the Xethru module. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">level</td><td>New debug level. Legal range [0-9]. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="abacb6075489dbfea4f4f06a2d8c5d5c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abacb6075489dbfea4f4f06a2d8c5d5c3">&sect;&nbsp;</a></span>set_detection_zone()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::set_detection_zone </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the desired detection zone. </p>
<p>The sensor will detect movements within this area.</p>
<p>This setting survives a power cycle</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">start</td><td>Start of detection zone in meters from the radar. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>End of detection zone in meters from the radar. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a318669eb1b05d6248961c2d6c5f9885f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a318669eb1b05d6248961c2d6c5f9885f">&sect;&nbsp;</a></span>set_led_control()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::set_led_control </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>intensity</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configures the module LED mode. </p>
<p>This setting survives a power cycle.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mode</td><td>0: Off, 1: Simple, 2: Full (default). </td></tr>
    <tr><td class="paramname">intensity</td><td>intensity of the led</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a48694f6519b83d5ad32c166fdb2c7250"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48694f6519b83d5ad32c166fdb2c7250">&sect;&nbsp;</a></span>set_log_level()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::set_log_level </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>level</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set log level of <a class="el" href="class_xe_thru_1_1_module_connector.xhtml" title="This class is responsible for establishing contact with the Xethru module. ">ModuleConnector</a>. </p>
<p>This setting does not survive a power cycle</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">level</td><td>New debug level. Legal range [0-9]. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a946d95b120cc169737d1ba38381d9f79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a946d95b120cc169737d1ba38381d9f79">&sect;&nbsp;</a></span>set_sensitivity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::set_sensitivity </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>sensitivity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set module sensitivity. </p>
<p>This setting survives a power cycle.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sensitivity</td><td>Sensitivity level from 0 (low) to 9 (high). </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a134af2badcbb71caac089a0b2345c41b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a134af2badcbb71caac089a0b2345c41b">&sect;&nbsp;</a></span>set_sensor_mode_idle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::set_sensor_mode_idle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the sensor in idle mode. </p>
<p>The sensor will stop sending data. The sensor can be put back in run mode with the <a class="el" href="class_xe_thru_1_1_x2_m200.xhtml#a390ddbac48157e215a8b0c3f74bb970c" title="Set the sensor in run mode. ">set_sensor_mode_run()</a>.</p>
<p>This setting survives a power cycle</p>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a390ddbac48157e215a8b0c3f74bb970c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a390ddbac48157e215a8b0c3f74bb970c">&sect;&nbsp;</a></span>set_sensor_mode_run()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::set_sensor_mode_run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the sensor in run mode. </p>
<p>In run mode the sensor will send a stream of data back to the host. The data in the data stream depends on the current configuration.</p>
<p>This setting survives a power cycle</p>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a7dcdafd2d8ef42333ab6400669cc834c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7dcdafd2d8ef42333ab6400669cc834c">&sect;&nbsp;</a></span>start_bootloader()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::start_bootloader </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<ul>
<li>Enter the bootloader for FW upgrades.</li>
</ul>
<p>All the Xethru modules have a bootloader. This method instructs the Xethru module to reboot into bootloader mode.</p>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="add20943f2535b9b129e7a221e8a61dc1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add20943f2535b9b129e7a221e8a61dc1">&sect;&nbsp;</a></span>subscribe_to_baseband_ap() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::subscribe_to_baseband_ap </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a subscription for amplitude phase baseband data packets. </p>
<p>Creates a queue/buffer for incoming amplitude phase baseband packet stream. The queue must be given a name.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the queue/buffer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="aebc6f10833152b9603bbba4b75a2bfc7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebc6f10833152b9603bbba4b75a2bfc7">&sect;&nbsp;</a></span>subscribe_to_baseband_ap() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::subscribe_to_baseband_ap </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(Bytes)&gt;&#160;</td>
          <td class="paramname"><em>callback</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a subscription for amplitude phase baseband data packets. </p>
<p>Create a subscription for incoming amplitude phase baseband packet stream. callback will be called for each incoming amplitude phase baseband packet.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the buffer </td></tr>
    <tr><td class="paramname">callback</td><td>The callback to invoke for each amplitude phase baseband packet</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a150e3619d868140c1fbfb732cd62773d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a150e3619d868140c1fbfb732cd62773d">&sect;&nbsp;</a></span>subscribe_to_baseband_iq() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::subscribe_to_baseband_iq </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a subscription for IQ baseband data packets. </p>
<p>Creates a queue/buffer for incoming IQ baseband packet stream. The queue must be given a name.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the queue/buffer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="ad75fa2344b89d80a7ca3ee39d2e8454f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad75fa2344b89d80a7ca3ee39d2e8454f">&sect;&nbsp;</a></span>subscribe_to_baseband_iq() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::subscribe_to_baseband_iq </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(Bytes)&gt;&#160;</td>
          <td class="paramname"><em>callback</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a subscription for IQ baseband data packets. </p>
<p>Create a subscription for incoming IQ baseband packet stream. callback will be called for each incoming IQ baseband packet.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the buffer </td></tr>
    <tr><td class="paramname">callback</td><td>The callback to invoke for each IQ baseband packet</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="ac4eb4627e55c32b05437956c065335e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4eb4627e55c32b05437956c065335e7">&sect;&nbsp;</a></span>subscribe_to_resp_status() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::subscribe_to_resp_status </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a subscription for respiration data packets. </p>
<p>Creates a queue/buffer for incoming respiration packet stream. The queue must be given a name.</p>
<p>This setting survives a power cycle</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the buffer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a4512906b488073f13242c42c8f358f26"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4512906b488073f13242c42c8f358f26">&sect;&nbsp;</a></span>subscribe_to_resp_status() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::subscribe_to_resp_status </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(Bytes)&gt;&#160;</td>
          <td class="paramname"><em>callback</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a subscription for respiration data packets. </p>
<p>Create a subscription for for incoming respiration packet stream. callback will be called for each incoming respiration packet.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the buffer </td></tr>
    <tr><td class="paramname">callback</td><td>The callback to invoke for each packet</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="a6f3e626bb4612d83f6edef2e0800d9f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f3e626bb4612d83f6edef2e0800d9f8">&sect;&nbsp;</a></span>subscribe_to_sleep_status() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::subscribe_to_sleep_status </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a subscription for sleep status data packets. </p>
<p>Creates a queue/buffer for incoming sleep packet stream. The queue must be given a name.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the queue/buffer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="adcbc70fa38b9feb178c6b6ef4e6d4903"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcbc70fa38b9feb178c6b6ef4e6d4903">&sect;&nbsp;</a></span>subscribe_to_sleep_status() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::X2M200::subscribe_to_sleep_status </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(Bytes)&gt;&#160;</td>
          <td class="paramname"><em>callback</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a subscription for sleep data packets. </p>
<p>Create a subscription for for incoming sleep packet stream. callback will be called for each incoming sleep packet.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the buffer </td></tr>
    <tr><td class="paramname">callback</td><td>The callback to invoke for each sleep packet</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>status : success in case of 0 / failure in any other case </dd></dl>

</div>
</div>
<a id="af53f6ec4d5e443b8b8c38e73c5f7fd30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af53f6ec4d5e443b8b8c38e73c5f7fd30">&sect;&nbsp;</a></span>unsubscribe()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XeThru::X2M200::unsubscribe </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Turns off a named subscription. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the subscription to disable </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/<a class="el" href="_x2_m200_8hpp_source.xhtml">X2M200.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
