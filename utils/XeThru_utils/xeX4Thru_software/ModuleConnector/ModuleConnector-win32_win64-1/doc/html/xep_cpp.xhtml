<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ModuleConnector: Using ModuleConnector with the XeThru XEP module</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">ModuleConnector
          &#160;<span id="projectnumber">1.6.2</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Project brief</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Using ModuleConnector with the <a class="el" href="namespace_xe_thru.xhtml">XeThru</a> XEP module </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>The XEP interface is used for low level detailed control of the <a class="el" href="namespace_xe_thru.xhtml">XeThru</a> X4 radar chip. This will enable complete control over all the X4 settings. See the X4 chip documentation for more info.</p>
<h2>Example</h2>
<div class="fragment"><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;stdint.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;unistd.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;stdlib.h&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_x_e_p_8hpp.xhtml">XEP.hpp</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_data_8hpp.xhtml">Data.hpp</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;xtid.h&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_x4_m300_8hpp.xhtml">X4M300.hpp</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_module_connector_8hpp.xhtml">ModuleConnector.hpp</a>&quot;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespace_xe_thru.xhtml">XeThru</a>;</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> usage()</div><div class="line">{</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Enter the port number of the device&quot;</span> &lt;&lt; std::endl;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> handle_error(std::string message)</div><div class="line">{</div><div class="line">    std::cerr &lt;&lt; <span class="stringliteral">&quot;ERROR: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">return</span> 1;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> xep_app_init(<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml">XEP</a>* xep)</div><div class="line">{</div><div class="line">    <span class="keywordtype">char</span> configure;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Would you like to customize XEP configurations(y/n)? &quot;</span>;</div><div class="line">    std::cin &gt;&gt; configure;</div><div class="line">    xep-&gt;<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#ad7b3014b432d966b91e4f3103997d12e">x4driver_init</a>();</div><div class="line"></div><div class="line">    <span class="comment">//Setting default values for XEP</span></div><div class="line">    <span class="keywordtype">int</span> dac_min = 949;</div><div class="line">    <span class="keywordtype">int</span> dac_max = 1100;</div><div class="line">    <span class="keywordtype">int</span> iteration = 32;</div><div class="line">    <span class="keywordtype">int</span> pps = 150;</div><div class="line">    <span class="keywordtype">int</span> fps = 17;</div><div class="line">    <span class="keywordtype">float</span> offset = 0.18;</div><div class="line">    <span class="keywordtype">float</span> fa1 = 0.4;</div><div class="line">    <span class="keywordtype">float</span> fa2 = 5.0;</div><div class="line">    <span class="keywordtype">int</span> dc = 0;</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span> (configure == <span class="charliteral">&#39;y&#39;</span>) {</div><div class="line">        <span class="comment">//Getting user input for configuration of xep</span></div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Set dac min: &quot;</span>&lt;&lt; std::endl; std::cin &gt;&gt; dac_min;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Set dac max: &quot;</span>&lt;&lt; std::endl; std::cin &gt;&gt; dac_max;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Set iterations: &quot;</span>&lt;&lt; std::endl; std::cin &gt;&gt; iteration;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Set pulse per step: &quot;</span>&lt;&lt; std::endl; std::cin &gt;&gt; pps;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Set fps: &quot;</span>&lt;&lt; std::endl; std::cin &gt;&gt; fps;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Set frame area offset: &quot;</span>&lt;&lt; std::endl; std::cin &gt;&gt; offset;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Set frame area closest: &quot;</span>&lt;&lt; std::endl; std::cin &gt;&gt; fa1;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Set frame area furthest: &quot;</span>&lt;&lt; std::endl; std::cin &gt;&gt; fa2;</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Would you like to enable downconversion (1/0): &quot;</span> &lt;&lt; std::endl; std::cin &gt;&gt; dc;</div><div class="line">        std::cout &lt;&lt; std::endl;</div><div class="line">        <span class="comment">//Configure custom XEP</span></div><div class="line">    }</div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Configuring XEP&quot;</span> &lt;&lt; std::endl;</div><div class="line">    <span class="comment">//Writing to module XEP</span></div><div class="line">    xep-&gt;<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#af32e45649bd91d13588a72e1b3a68f1a">x4driver_set_dac_min</a>(dac_min);</div><div class="line">    xep-&gt;<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#a3ded649d232ede4a73a7f6f75957450b">x4driver_set_dac_max</a>(dac_max);</div><div class="line">    xep-&gt;<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#a374525416885f85a9aa23d2b01b41f13">x4driver_set_iterations</a>(iteration);</div><div class="line">    xep-&gt;<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#adb248233c6df1f90c1787ee10b571ddc">x4driver_set_pulses_per_step</a>(pps);</div><div class="line">    xep-&gt;<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#adfea3e9ba403e4de7749516a4ecb6f41">x4driver_set_fps</a>(fps);</div><div class="line">    xep-&gt;<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#a02ea403a5b48084a3554851873cdd6f1">x4driver_set_frame_area_offset</a>(offset);</div><div class="line">    xep-&gt;<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#a5b4decc26ac4890faef2cb2b4ede0240">x4driver_set_frame_area</a>(fa1, fa2);</div><div class="line">    xep-&gt;<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#aa3683254e413e5fb0cbbad72c28328ab">x4driver_set_downconversion</a>(dc);</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keywordtype">int</span> read_frame(<span class="keyword">const</span> std::string &amp; device_name)</div><div class="line">{</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> log_level = 0;</div><div class="line">    <a class="code" href="class_xe_thru_1_1_module_connector.xhtml">ModuleConnector</a> mc(device_name, log_level);</div><div class="line">    <a class="code" href="class_xe_thru_1_1_x_e_p.xhtml">XEP</a> &amp; xep = mc.get_xep();</div><div class="line"></div><div class="line">    std::string FWID;</div><div class="line">    <span class="comment">//If the module is a X4M200 or X4M300 it needs to be put in manual mode</span></div><div class="line">    xep.<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#af80e7037177b9625ba5d3e5330dccc73">get_system_info</a>(0x02, &amp;FWID);</div><div class="line">    <span class="keywordflow">if</span> (FWID != <span class="stringliteral">&quot;XEP&quot;</span>) {</div><div class="line">        <span class="comment">//Module X4M300 or X4M200</span></div><div class="line">        std::string Module;</div><div class="line">        <a class="code" href="class_xe_thru_1_1_x4_m300.xhtml">X4M300</a> &amp; x4m300 = mc.get_x4m300();</div><div class="line">        x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#a566ab01887a1144ffc88b47d344bbbf5">set_sensor_mode</a>(XTID_SM_STOP,0);</div><div class="line">        x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#a566ab01887a1144ffc88b47d344bbbf5">set_sensor_mode</a>(XTID_SM_MANUAL,0);</div><div class="line">        xep.<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#af80e7037177b9625ba5d3e5330dccc73">get_system_info</a>(0x01, &amp;Module);</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Module &quot;</span> &lt;&lt; Module &lt;&lt; <span class="stringliteral">&quot; set to XEP mode&quot;</span>&lt;&lt; std::endl;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Configure XEP</span></div><div class="line">    xep_app_init(&amp;xep);</div><div class="line">    <span class="comment">// DataFloat</span></div><div class="line">    <a class="code" href="struct_xe_thru_1_1_data_float.xhtml">XeThru::DataFloat</a> test;</div><div class="line">    <span class="comment">// Check packets queue</span></div><div class="line">    <span class="keywordtype">int</span> packets = xep.<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#acbbc9b3d54ab859c1cc07c6426d5dedc">peek_message_data_float</a>();</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Packets in queue: &quot;</span> &lt;&lt; packets&lt;&lt;<span class="charliteral">&#39;\n&#39;</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Printing output until KeyboardInterrupt</span></div><div class="line">    <span class="comment">// This data is not readable.</span></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Printing out data: &quot;</span> &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;</div><div class="line">    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line">        <span class="keywordflow">if</span> (xep.<a class="code" href="class_xe_thru_1_1_x_e_p.xhtml#aa72d1aef5490d264ddd63f753f3fc347">read_message_data_float</a>(&amp;test)) {</div><div class="line">            <span class="keywordflow">return</span> handle_error(<span class="stringliteral">&quot;read_message_data_float failed&quot;</span>);</div><div class="line">        }</div><div class="line">        std::vector&lt;float&gt; outData = test.<a class="code" href="struct_xe_thru_1_1_data_float.xhtml#a9e3bebc2742200c6728d68f5f2870944">data</a>;</div><div class="line">        <span class="keywordtype">int</span> sz = outData.size();</div><div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = 0; x &lt; sz; ++x) {</div><div class="line">            <span class="comment">//printing out unreadable RF-data</span></div><div class="line">            std::cout &lt;&lt; test.<a class="code" href="struct_xe_thru_1_1_data_float.xhtml#a9e3bebc2742200c6728d68f5f2870944">data</a>[x] &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line">        }</div><div class="line">        std::cout &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;</div><div class="line">    }</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> ** argv)</div><div class="line">{</div><div class="line">    <span class="keywordflow">if</span> (argc &lt; 2) {</div><div class="line">        usage();</div><div class="line">        <span class="keywordflow">return</span> 2;</div><div class="line">    }</div><div class="line">    <span class="keyword">const</span> std::string device_name = argv[1];</div><div class="line">    <span class="keywordflow">return</span> read_frame(device_name);</div><div class="line">}</div></div><!-- fragment --> </div></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
