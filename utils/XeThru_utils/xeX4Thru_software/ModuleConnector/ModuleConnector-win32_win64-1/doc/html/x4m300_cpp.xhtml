<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ModuleConnector: Using ModuleConnector with the XeThru X4M300 and X4M200 modules</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">ModuleConnector
          &#160;<span id="projectnumber">1.6.2</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Project brief</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Using ModuleConnector with the <a class="el" href="namespace_xe_thru.xhtml">XeThru</a> X4M300 and X4M200 modules </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>There are basically two groups of data packets coming from the module, synchronous and asynchronous packets. The synchronous packets are a result of a direct command or query from a host over serial or USB. When calling for example ping(), like in the example below, the method invocation is blocking until either a response (synchronous packet) from the module is receive or a timeout of 2 seconds kicks in. On the other hand asynchronous packets are sent from the module to the host based on internal events in the module. This can be timer events or status change events. Normally this is streaming data of some kind like baseband data or presence single data. All the asynchronous packets are collected in buffers or queues upon arrival on the host. It is possible to check number of packets in a buffer by calling the peek_.. messages. To read asynchronous messages use the read_... methods. The read_... methods are blocking if the queue is empty.</p>
<h2>Examples</h2>
<h4>1) Connect to a X4M300 module and ping it.</h4>
<div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_module_connector_8hpp.xhtml">ModuleConnector.hpp</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_x4_m300_8hpp.xhtml">X4M300.hpp</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespace_xe_thru.xhtml">XeThru</a>;</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> usage()</div><div class="line">{</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;ping &lt;com port or device file&gt;&quot;</span> &lt;&lt; std::endl;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keywordtype">int</span> ping(<span class="keyword">const</span> std::string &amp; device_name)</div><div class="line">{</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> log_level = 5;</div><div class="line">    <a class="code" href="class_xe_thru_1_1_module_connector.xhtml">ModuleConnector</a> mc(device_name, log_level);</div><div class="line">    <a class="code" href="class_xe_thru_1_1_x4_m300.xhtml">X4M300</a> &amp; x4m300 = mc.get_x4m300();</div><div class="line">    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pong = 0;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> status = x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#ac344832954bf56cbc5420ba08fb0514f">ping</a>(&amp;pong);</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span>(status != 0) {</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Something went wrong - error code: &quot;</span> &lt;&lt; status &lt;&lt; std::endl;</div><div class="line">        <span class="keywordflow">return</span> status;</div><div class="line">    }</div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;pong: &quot;</span> &lt;&lt; pong &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> ** argv)</div><div class="line">{</div><div class="line">    <span class="keywordflow">if</span> (argc &lt; 2) {</div><div class="line">        usage();</div><div class="line">        <span class="keywordflow">return</span> -1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">const</span> std::string device_name = argv[1];</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> ping(device_name);</div><div class="line">}</div></div><!-- fragment --><h4>2) Connect to a X4M300 module and get presence single packets.</h4>
<div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_module_connector_8hpp.xhtml">ModuleConnector.hpp</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_x4_m300_8hpp.xhtml">X4M300.hpp</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;xtid.h&quot;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespace_xe_thru.xhtml">XeThru</a>;</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> usage()</div><div class="line">{</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;presence_single &lt;com port or device file&gt;&quot;</span> &lt;&lt; std::endl;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> handle_error(std::string message)</div><div class="line">{</div><div class="line">    std::cerr &lt;&lt; <span class="stringliteral">&quot;ERROR: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">return</span> 1;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordtype">int</span> presence_single(<span class="keyword">const</span> std::string &amp; device_name)</div><div class="line">{</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> log_level = 0;</div><div class="line">    <a class="code" href="class_xe_thru_1_1_module_connector.xhtml">ModuleConnector</a> mc(device_name, log_level);</div><div class="line">    <a class="code" href="class_xe_thru_1_1_x4_m300.xhtml">X4M300</a> &amp; x4m300 = mc.get_x4m300();</div><div class="line"></div><div class="line">    <span class="comment">// ignore status. This might fail and that is ok.</span></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Stop the module&quot;</span> &lt;&lt; std::endl;</div><div class="line">    x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#a566ab01887a1144ffc88b47d344bbbf5">set_sensor_mode</a>(XTID_SM_STOP, 0);</div><div class="line"></div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Load presence profile&quot;</span> &lt;&lt; std::endl;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ProfileID = 0x014d4ab8;</div><div class="line">    <span class="keywordflow">if</span> (x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#aace86c93e998280f19ae64cbd05801d5">load_profile</a>(ProfileID)) {</div><div class="line">        <span class="keywordflow">return</span> handle_error(<span class="stringliteral">&quot;load_profile failed&quot;</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Turn on presence single packages&quot;</span> &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">if</span> (x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#a62e832113822e712facfb6a9bd9c9482">set_output_control</a>(XTS_ID_PRESENCE_SINGLE, XTID_OUTPUT_CONTROL_ENABLE)) {</div><div class="line">        <span class="keywordflow">return</span> handle_error(<span class="stringliteral">&quot;set output controll failed&quot;</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// start the module and profile</span></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Set the module in RUN state&quot;</span> &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">if</span> (x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#a566ab01887a1144ffc88b47d344bbbf5">set_sensor_mode</a>(XTID_SM_RUN, 0)) {</div><div class="line">        <span class="keywordflow">return</span> handle_error(<span class="stringliteral">&quot;Set sensor mode to running failed&quot;</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Block until first package of presence arrives&quot;</span> &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;This may take some time...&quot;</span> &lt;&lt; std::endl;</div><div class="line">    <a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml">XeThru::PresenceSingleData</a> presence_single;</div><div class="line">    <span class="keywordflow">if</span> (x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#ab58ed9fdfae12dbd3080432a5355809a">read_message_presence_single</a>(&amp;presence_single)) {</div><div class="line">        <span class="keywordflow">return</span> handle_error(<span class="stringliteral">&quot;set output controll failed&quot;</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;frame_counter:  &quot;</span> &lt;&lt; presence_single.<a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml#a8991758b7e240c0650221f34c8fc2b37">frame_counter</a> &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;presence_state: &quot;</span> &lt;&lt; presence_single.<a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml#af88d82b91801e7e310858af7de190899">presence_state</a> &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;distance:       &quot;</span> &lt;&lt; presence_single.<a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml#a2aa829942b73832a58f38a244420fbc2">distance</a> &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;direction:      &quot;</span> &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(presence_single.<a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml#adc7324e2501ad4332895be22b9e97cc1">direction</a>) &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;signal_quality: &quot;</span> &lt;&lt; presence_single.<a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml#a87d4faa952ea8eee1546a418a3bfb098">signal_quality</a> &lt;&lt; std::endl;</div><div class="line"></div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Wait for another one presence package&quot;</span> &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">if</span> (x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#ab58ed9fdfae12dbd3080432a5355809a">read_message_presence_single</a>(&amp;presence_single)) {</div><div class="line">        <span class="keywordflow">return</span> handle_error(<span class="stringliteral">&quot;set output controll failed&quot;</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;frame_counter:  &quot;</span> &lt;&lt; presence_single.<a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml#a8991758b7e240c0650221f34c8fc2b37">frame_counter</a> &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;presence_state: &quot;</span> &lt;&lt; presence_single.<a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml#af88d82b91801e7e310858af7de190899">presence_state</a> &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;distance:       &quot;</span> &lt;&lt; presence_single.<a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml#a2aa829942b73832a58f38a244420fbc2">distance</a> &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;direction:      &quot;</span> &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(presence_single.<a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml#adc7324e2501ad4332895be22b9e97cc1">direction</a>) &lt;&lt; std::endl;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;signal_quality: &quot;</span> &lt;&lt; presence_single.<a class="code" href="class_xe_thru_1_1_presence_single_data.xhtml#a87d4faa952ea8eee1546a418a3bfb098">signal_quality</a> &lt;&lt; std::endl;</div><div class="line"></div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Set the module in STOP state&quot;</span> &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">if</span> (x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#a566ab01887a1144ffc88b47d344bbbf5">set_sensor_mode</a>(XTID_SM_STOP, 0)) {</div><div class="line">        <span class="keywordflow">return</span> handle_error(<span class="stringliteral">&quot;set output controll failed&quot;</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> ** argv)</div><div class="line">{</div><div class="line">    <span class="keywordflow">if</span> (argc &lt; 2) {</div><div class="line">        usage();</div><div class="line">        <span class="keywordflow">return</span> -1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">const</span> std::string device_name = argv[1];</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> presence_single(device_name);</div><div class="line">}</div></div><!-- fragment --><h4>3) Connect to a X4M300 module over TCP/IP</h4>
<div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_module_connector_8hpp.xhtml">ModuleConnector.hpp</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="_x4_m300_8hpp.xhtml">X4M300.hpp</a>&quot;</span></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Create a server with, for example, connecting a module to a raspberry pi,</span></div><div class="line"><span class="comment"> * installing socat on it (&quot;sudo apt-get install socat&quot;) and running:</span></div><div class="line"><span class="comment"> * &quot;socat TCP4-LISTEN:3000,fork,reuseaddr GOPEN:/dev/ttyACM0,rawer&quot;.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespace_xe_thru.xhtml">XeThru</a>;</div><div class="line"></div><div class="line"><span class="keywordtype">void</span> usage()</div><div class="line">{</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;ping &lt;ipv4&gt; &lt;tcp port&gt;&quot;</span> &lt;&lt; std::endl;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keywordtype">int</span> ping(in_addr_t ip, in_port_t port)</div><div class="line">{</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> log_level = 5;</div><div class="line">    <a class="code" href="class_xe_thru_1_1_module_connector.xhtml">ModuleConnector</a> mc(ip, port, log_level);</div><div class="line">    <a class="code" href="class_xe_thru_1_1_x4_m300.xhtml">X4M300</a> &amp; x4m300 = mc.get_x4m300();</div><div class="line">    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pong = 0;</div><div class="line">    <span class="keyword">const</span> <span class="keywordtype">int</span> status = x4m300.<a class="code" href="class_xe_thru_1_1_x4_m300.xhtml#ac344832954bf56cbc5420ba08fb0514f">ping</a>(&amp;pong);</div><div class="line"></div><div class="line">    <span class="keywordflow">if</span>(status != 0) {</div><div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot;Something went wrong - error code: &quot;</span> &lt;&lt; status &lt;&lt; std::endl;</div><div class="line">        <span class="keywordflow">return</span> status;</div><div class="line">    }</div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;pong: &quot;</span> &lt;&lt; pong &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> ** argv)</div><div class="line">{</div><div class="line">    <span class="keywordflow">if</span> (argc &lt; 3) {</div><div class="line">        usage();</div><div class="line">        <span class="keywordflow">return</span> 1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keywordtype">int</span> a, b, c, d;</div><div class="line">    <span class="keywordflow">if</span> (sscanf(argv[1], <span class="stringliteral">&quot;%d.%d.%d.%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d) != 4) {</div><div class="line">        usage();</div><div class="line">        <span class="keywordflow">return</span> 1;</div><div class="line">    }</div><div class="line">    <span class="keywordtype">short</span> <span class="keywordtype">int</span> port = atoi(argv[2]);</div><div class="line"></div><div class="line">    <span class="keywordflow">return</span> ping(htonl(a &lt;&lt; 24 | b &lt;&lt; 16 | c &lt;&lt; 8 | d), htons(port));</div><div class="line">}</div></div><!-- fragment --> </div></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
