<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ModuleConnector: XeThru::RecordingOptions Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">ModuleConnector
          &#160;<span id="projectnumber">1.6.2</span>
        </div>
        <div id="projectbrief" class="col-sm-12">Project brief</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_xe_thru.xhtml">XeThru</a></li><li class="navelem"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_xe_thru_1_1_recording_options-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">XeThru::RecordingOptions Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The <a class="el" href="class_xe_thru_1_1_recording_options.xhtml" title="The RecordingOptions class allows specifying options for recording. ">RecordingOptions</a> class allows specifying options for recording.  
 <a href="class_xe_thru_1_1_recording_options.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_recording_options_8hpp_source.xhtml">RecordingOptions.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1abda7a1511605e4145c4a4e347a9d19"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a1abda7a1511605e4145c4a4e347a9d19">RecordingOptions</a> ()</td></tr>
<tr class="memdesc:a1abda7a1511605e4145c4a4e347a9d19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs options.  <a href="#a1abda7a1511605e4145c4a4e347a9d19">More...</a><br /></td></tr>
<tr class="separator:a1abda7a1511605e4145c4a4e347a9d19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac8c8ab74329745bed3010f2d6b391bf"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#aac8c8ab74329745bed3010f2d6b391bf">RecordingOptions</a> (const <a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a> &amp;other)</td></tr>
<tr class="memdesc:aac8c8ab74329745bed3010f2d6b391bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#aac8c8ab74329745bed3010f2d6b391bf">More...</a><br /></td></tr>
<tr class="separator:aac8c8ab74329745bed3010f2d6b391bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44b4f664db53bfdabc2c8f367c4cd7c8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a44b4f664db53bfdabc2c8f367c4cd7c8">RecordingOptions</a> (<a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a> &amp;&amp;other)</td></tr>
<tr class="memdesc:a44b4f664db53bfdabc2c8f367c4cd7c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructor.  <a href="#a44b4f664db53bfdabc2c8f367c4cd7c8">More...</a><br /></td></tr>
<tr class="separator:a44b4f664db53bfdabc2c8f367c4cd7c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fcd170ddca69eda95881dcc347af324"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a7fcd170ddca69eda95881dcc347af324">~RecordingOptions</a> ()</td></tr>
<tr class="memdesc:a7fcd170ddca69eda95881dcc347af324"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys options.  <a href="#a7fcd170ddca69eda95881dcc347af324">More...</a><br /></td></tr>
<tr class="separator:a7fcd170ddca69eda95881dcc347af324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc21fccb62a4ec3a3432ead88ce746d3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#acc21fccb62a4ec3a3432ead88ce746d3">set_session_id</a> (const std::string &amp;id)</td></tr>
<tr class="memdesc:acc21fccb62a4ec3a3432ead88ce746d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the session id as specified, overriding the default constructed value which is an universally unique identifier (UUID).  <a href="#acc21fccb62a4ec3a3432ead88ce746d3">More...</a><br /></td></tr>
<tr class="separator:acc21fccb62a4ec3a3432ead88ce746d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab102585b104a4d9373931d6b51e67fae"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#ab102585b104a4d9373931d6b51e67fae">get_session_id</a> () const</td></tr>
<tr class="memdesc:ab102585b104a4d9373931d6b51e67fae"><td class="mdescLeft">&#160;</td><td class="mdescRight">By default, this function returns an universally unique identifier (UUID) if no custom id is set.  <a href="#ab102585b104a4d9373931d6b51e67fae">More...</a><br /></td></tr>
<tr class="separator:ab102585b104a4d9373931d6b51e67fae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25d6ae15bd799ae9b2e489914ecced88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a25d6ae15bd799ae9b2e489914ecced88">set_file_split_size</a> (const <a class="el" href="class_xe_thru_1_1_preferred_split_size.xhtml">PreferredSplitSize</a> &amp;size)</td></tr>
<tr class="memdesc:a25d6ae15bd799ae9b2e489914ecced88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the preferred file split size as specified.  <a href="#a25d6ae15bd799ae9b2e489914ecced88">More...</a><br /></td></tr>
<tr class="separator:a25d6ae15bd799ae9b2e489914ecced88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a638543d0a37ede018a53dc1c2318ca73"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_xe_thru_1_1_preferred_split_size.xhtml">PreferredSplitSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a638543d0a37ede018a53dc1c2318ca73">get_file_split_size</a> () const</td></tr>
<tr class="memdesc:a638543d0a37ede018a53dc1c2318ca73"><td class="mdescLeft">&#160;</td><td class="mdescRight">By default, this function returns a default constructed value (no file split size) if no custom size is set.  <a href="#a638543d0a37ede018a53dc1c2318ca73">More...</a><br /></td></tr>
<tr class="separator:a638543d0a37ede018a53dc1c2318ca73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bfbfbd44e2c7f134b763698c6abdce4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a7bfbfbd44e2c7f134b763698c6abdce4">set_directory_split_size</a> (const <a class="el" href="class_xe_thru_1_1_preferred_split_size.xhtml">PreferredSplitSize</a> &amp;size)</td></tr>
<tr class="memdesc:a7bfbfbd44e2c7f134b763698c6abdce4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the preferred directory split size as specified.  <a href="#a7bfbfbd44e2c7f134b763698c6abdce4">More...</a><br /></td></tr>
<tr class="separator:a7bfbfbd44e2c7f134b763698c6abdce4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92b4357a61d0685a46cc0d217412f5a9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_xe_thru_1_1_preferred_split_size.xhtml">PreferredSplitSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a92b4357a61d0685a46cc0d217412f5a9">get_directory_split_size</a> () const</td></tr>
<tr class="memdesc:a92b4357a61d0685a46cc0d217412f5a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">By default, this function returns a default constructed value (no directory split size) if no custom size is set.  <a href="#a92b4357a61d0685a46cc0d217412f5a9">More...</a><br /></td></tr>
<tr class="separator:a92b4357a61d0685a46cc0d217412f5a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1853582818a0264cce6a7344fabb23e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a1853582818a0264cce6a7344fabb23e4">set_data_rate_limit</a> (int limit)</td></tr>
<tr class="memdesc:a1853582818a0264cce6a7344fabb23e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the data rate (ms) the recorder will read data from the module.  <a href="#a1853582818a0264cce6a7344fabb23e4">More...</a><br /></td></tr>
<tr class="separator:a1853582818a0264cce6a7344fabb23e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99aa1ef16d8f49664ec172e37b09cd9b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a99aa1ef16d8f49664ec172e37b09cd9b">get_data_rate_limit</a> () const</td></tr>
<tr class="separator:a99aa1ef16d8f49664ec172e37b09cd9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c62c00c220961615648a80770c3c79f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a2c62c00c220961615648a80770c3c79f">set_user_header</a> (const Bytes &amp;header)</td></tr>
<tr class="memdesc:a2c62c00c220961615648a80770c3c79f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a custom header applied to the beginning of the recorded file.  <a href="#a2c62c00c220961615648a80770c3c79f">More...</a><br /></td></tr>
<tr class="separator:a2c62c00c220961615648a80770c3c79f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a3b5113a58740e65671324dbf8dc19a"><td class="memItemLeft" align="right" valign="top">Bytes&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a5a3b5113a58740e65671324dbf8dc19a">get_user_header</a> () const</td></tr>
<tr class="separator:a5a3b5113a58740e65671324dbf8dc19a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae597f9b7191284ffbb49bf6561d17656"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#ae597f9b7191284ffbb49bf6561d17656">set_flush_on_write</a> (bool do_flush)</td></tr>
<tr class="memdesc:ae597f9b7191284ffbb49bf6561d17656"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specify whether to flush on every write.  <a href="#ae597f9b7191284ffbb49bf6561d17656">More...</a><br /></td></tr>
<tr class="separator:ae597f9b7191284ffbb49bf6561d17656"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c75df7d16595eae7dfba135cd8febac"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a1c75df7d16595eae7dfba135cd8febac">get_flush_on_write</a> () const</td></tr>
<tr class="separator:a1c75df7d16595eae7dfba135cd8febac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1709ab65743101539283cf5f3a7f9ef8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a1709ab65743101539283cf5f3a7f9ef8">operator=</a> (const <a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a> &amp;other)</td></tr>
<tr class="memdesc:a1709ab65743101539283cf5f3a7f9ef8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <a href="#a1709ab65743101539283cf5f3a7f9ef8">More...</a><br /></td></tr>
<tr class="separator:a1709ab65743101539283cf5f3a7f9ef8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36a3c0107fddf78a1a0eef9599e66bf8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#a36a3c0107fddf78a1a0eef9599e66bf8">operator=</a> (<a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a> &amp;&amp;other)</td></tr>
<tr class="memdesc:a36a3c0107fddf78a1a0eef9599e66bf8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assignment operator.  <a href="#a36a3c0107fddf78a1a0eef9599e66bf8">More...</a><br /></td></tr>
<tr class="separator:a36a3c0107fddf78a1a0eef9599e66bf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The <a class="el" href="class_xe_thru_1_1_recording_options.xhtml" title="The RecordingOptions class allows specifying options for recording. ">RecordingOptions</a> class allows specifying options for recording. </p>
<p>The <a class="el" href="class_xe_thru_1_1_recording_options.xhtml" title="The RecordingOptions class allows specifying options for recording. ">RecordingOptions</a> class contains more advance options for recording. It can be used to specify things like splitting of files and directories.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="class_xe_thru_1_1_data_recorder.xhtml" title="The DataRecorder class allows recording of xethru data types to disk. ">DataRecorder</a> </dd></dl>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a1abda7a1511605e4145c4a4e347a9d19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1abda7a1511605e4145c4a4e347a9d19">&sect;&nbsp;</a></span>RecordingOptions() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XeThru::RecordingOptions::RecordingOptions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructs options. </p>

</div>
</div>
<a id="aac8c8ab74329745bed3010f2d6b391bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac8c8ab74329745bed3010f2d6b391bf">&sect;&nbsp;</a></span>RecordingOptions() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XeThru::RecordingOptions::RecordingOptions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy constructor. </p>

</div>
</div>
<a id="a44b4f664db53bfdabc2c8f367c4cd7c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44b4f664db53bfdabc2c8f367c4cd7c8">&sect;&nbsp;</a></span>RecordingOptions() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XeThru::RecordingOptions::RecordingOptions </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Move constructor. </p>

</div>
</div>
<a id="a7fcd170ddca69eda95881dcc347af324"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fcd170ddca69eda95881dcc347af324">&sect;&nbsp;</a></span>~RecordingOptions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XeThru::RecordingOptions::~RecordingOptions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destroys options. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a99aa1ef16d8f49664ec172e37b09cd9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99aa1ef16d8f49664ec172e37b09cd9b">&sect;&nbsp;</a></span>get_data_rate_limit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int XeThru::RecordingOptions::get_data_rate_limit </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the data rate (ms) the recorder will read data from the module if set, otherwise returns -1 (no data rate limit). A value of 1000 ms means data is read every second. Data in between is discarded. </dd></dl>

</div>
</div>
<a id="a92b4357a61d0685a46cc0d217412f5a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92b4357a61d0685a46cc0d217412f5a9">&sect;&nbsp;</a></span>get_directory_split_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_xe_thru_1_1_preferred_split_size.xhtml">PreferredSplitSize</a> XeThru::RecordingOptions::get_directory_split_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>By default, this function returns a default constructed value (no directory split size) if no custom size is set. </p>
<dl class="section return"><dt>Returns</dt><dd>the preferred directory split size </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="class_xe_thru_1_1_preferred_split_size.xhtml" title="The PreferredSplitSize class allows specifying a split size. ">PreferredSplitSize</a> </dd></dl>

</div>
</div>
<a id="a638543d0a37ede018a53dc1c2318ca73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a638543d0a37ede018a53dc1c2318ca73">&sect;&nbsp;</a></span>get_file_split_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_xe_thru_1_1_preferred_split_size.xhtml">PreferredSplitSize</a> XeThru::RecordingOptions::get_file_split_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>By default, this function returns a default constructed value (no file split size) if no custom size is set. </p>
<dl class="section return"><dt>Returns</dt><dd>the preferred file split size </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="class_xe_thru_1_1_preferred_split_size.xhtml" title="The PreferredSplitSize class allows specifying a split size. ">PreferredSplitSize</a> </dd></dl>

</div>
</div>
<a id="a1c75df7d16595eae7dfba135cd8febac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c75df7d16595eae7dfba135cd8febac">&sect;&nbsp;</a></span>get_flush_on_write()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool XeThru::RecordingOptions::get_flush_on_write </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Whether flushing for every write to file is enabled. </dd></dl>

</div>
</div>
<a id="ab102585b104a4d9373931d6b51e67fae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab102585b104a4d9373931d6b51e67fae">&sect;&nbsp;</a></span>get_session_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string XeThru::RecordingOptions::get_session_id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>By default, this function returns an universally unique identifier (UUID) if no custom id is set. </p>
<dl class="section return"><dt>Returns</dt><dd>the session id </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#acc21fccb62a4ec3a3432ead88ce746d3" title="Sets the session id as specified, overriding the default constructed value which is an universally un...">set_session_id</a> </dd></dl>

</div>
</div>
<a id="a5a3b5113a58740e65671324dbf8dc19a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a3b5113a58740e65671324dbf8dc19a">&sect;&nbsp;</a></span>get_user_header()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Bytes XeThru::RecordingOptions::get_user_header </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the custom user header. By default, this parameter is Bytes() (no custom header). </dd></dl>

</div>
</div>
<a id="a1709ab65743101539283cf5f3a7f9ef8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1709ab65743101539283cf5f3a7f9ef8">&sect;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a>&amp; XeThru::RecordingOptions::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy assignment operator. </p>

</div>
</div>
<a id="a36a3c0107fddf78a1a0eef9599e66bf8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36a3c0107fddf78a1a0eef9599e66bf8">&sect;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a>&amp; XeThru::RecordingOptions::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_xe_thru_1_1_recording_options.xhtml">RecordingOptions</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Move assignment operator. </p>

</div>
</div>
<a id="a1853582818a0264cce6a7344fabb23e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1853582818a0264cce6a7344fabb23e4">&sect;&nbsp;</a></span>set_data_rate_limit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XeThru::RecordingOptions::set_data_rate_limit </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>limit</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the data rate (ms) the recorder will read data from the module. </p>
<p>A value of 1000 ms means data is read every second. Data in between is discarded. By default, this parameter is -1 (no data rate limit). </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">limit</td><td>Specifies the data rate limit </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7bfbfbd44e2c7f134b763698c6abdce4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bfbfbd44e2c7f134b763698c6abdce4">&sect;&nbsp;</a></span>set_directory_split_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XeThru::RecordingOptions::set_directory_split_size </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_xe_thru_1_1_preferred_split_size.xhtml">PreferredSplitSize</a> &amp;&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the preferred directory split size as specified. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>Specifies the preferred split size </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a25d6ae15bd799ae9b2e489914ecced88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25d6ae15bd799ae9b2e489914ecced88">&sect;&nbsp;</a></span>set_file_split_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XeThru::RecordingOptions::set_file_split_size </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_xe_thru_1_1_preferred_split_size.xhtml">PreferredSplitSize</a> &amp;&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the preferred file split size as specified. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>Specifies the preferred split size </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae597f9b7191284ffbb49bf6561d17656"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae597f9b7191284ffbb49bf6561d17656">&sect;&nbsp;</a></span>set_flush_on_write()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XeThru::RecordingOptions::set_flush_on_write </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>do_flush</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Specify whether to flush on every write. </p>
<p>Note that this will impact the performance and should only be used for debugging purposes. The default is false. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">do_flush</td><td>If true, recording files are flushed after every write. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="acc21fccb62a4ec3a3432ead88ce746d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc21fccb62a4ec3a3432ead88ce746d3">&sect;&nbsp;</a></span>set_session_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XeThru::RecordingOptions::set_session_id </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the session id as specified, overriding the default constructed value which is an universally unique identifier (UUID). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">id</td><td>Specifies the new id </td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="class_xe_thru_1_1_recording_options.xhtml#ab102585b104a4d9373931d6b51e67fae" title="By default, this function returns an universally unique identifier (UUID) if no custom id is set...">get_session_id</a> </dd></dl>

</div>
</div>
<a id="a2c62c00c220961615648a80770c3c79f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c62c00c220961615648a80770c3c79f">&sect;&nbsp;</a></span>set_user_header()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void XeThru::RecordingOptions::set_user_header </td>
          <td>(</td>
          <td class="paramtype">const Bytes &amp;&#160;</td>
          <td class="paramname"><em>header</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets a custom header applied to the beginning of the recorded file. </p>
<p>By default, this parameter is Bytes() (no custom header). </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">header</td><td>Specifies the header </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/<a class="el" href="_recording_options_8hpp_source.xhtml">RecordingOptions.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
