#
# file regmap_autogen.py
# This content of file has been autogenerated by PyGen.rb
from .regmap import Reg, RegMap, RegBlock, RegmapError

import logging
# PIF Register firmware_version
class FirmwareVersion(Reg):

  name    = "firmware_version"
  address = 0
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.firmware_version")

  @classmethod
  def set_firmware_version(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_firmware_version(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register gpio_out
class GpioOut(Reg):

  name    = "gpio_out"
  address = 6
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.gpio_out")

  @classmethod
  def set_gpio_o(cls, map, value):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_gpio_o(cls, map):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register gpio_in
class GpioIn(Reg):

  name    = "gpio_in"
  address = 11
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.gpio_in")

  @classmethod
  def set_gpio_i(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_gpio_i(cls, map):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register gpio_oe
class GpioOe(Reg):

  name    = "gpio_oe"
  address = 13
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.gpio_oe")

  @classmethod
  def set_gpio_output_enable(cls, map, value):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_gpio_output_enable(cls, map):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_mframes
class RxMframes(Reg):

  name    = "rx_mframes"
  address = 14
  default = 128
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_mframes")

  @classmethod
  def set_rx_mframes(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_mframes(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register smpl_mode
class SmplMode(Reg):

  name    = "smpl_mode"
  address = 15
  default = 2
  action  = False
  logger  = logging.getLogger("x4regmap.pif.smpl_mode")

  @classmethod
  def set_hpf_disable_feedforward(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_hpf_disable_feedforward(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_powerdown_sampler(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_powerdown_sampler(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_downconversion_enable(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_downconversion_enable(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_downconversion_coeff_i1
class RxDownconversionCoeffI1(Reg):

  name    = "rx_downconversion_coeff_i1"
  address = 16
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_downconversion_coeff_i1")

  @classmethod
  def set_rx_downconversion_coeff_i1(cls, map, value):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_downconversion_coeff_i1(cls, map):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_downconversion_coeff_i2
class RxDownconversionCoeffI2(Reg):

  name    = "rx_downconversion_coeff_i2"
  address = 17
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_downconversion_coeff_i2")

  @classmethod
  def set_rx_downconversion_coeff_i2(cls, map, value):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_downconversion_coeff_i2(cls, map):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_downconversion_coeff_q1
class RxDownconversionCoeffQ1(Reg):

  name    = "rx_downconversion_coeff_q1"
  address = 20
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_downconversion_coeff_q1")

  @classmethod
  def set_rx_downconversion_coeff_q1(cls, map, value):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_downconversion_coeff_q1(cls, map):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_downconversion_coeff_q2
class RxDownconversionCoeffQ2(Reg):

  name    = "rx_downconversion_coeff_q2"
  address = 21
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_downconversion_coeff_q2")

  @classmethod
  def set_rx_downconversion_coeff_q2(cls, map, value):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_downconversion_coeff_q2(cls, map):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_ram_write_offset_msb
class RxRamWriteOffsetMsb(Reg):

  name    = "rx_ram_write_offset_msb"
  address = 22
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_ram_write_offset_msb")

  @classmethod
  def set_rx_ram_write_offset_msb(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_ram_write_offset_msb(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_ram_line_first_msb
class RxRamLineFirstMsb(Reg):

  name    = "rx_ram_line_first_msb"
  address = 23
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_ram_line_first_msb")

  @classmethod
  def set_rx_ram_line_first_msb(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_ram_line_first_msb(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_ram_line_last_msb
class RxRamLineLastMsb(Reg):

  name    = "rx_ram_line_last_msb"
  address = 24
  default = 191
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_ram_line_last_msb")

  @classmethod
  def set_rx_ram_line_last_msb(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_ram_line_last_msb(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_ram_lsbs
class RxRamLsbs(Reg):

  name    = "rx_ram_lsbs"
  address = 25
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_ram_lsbs")

  @classmethod
  def set_rx_ram_write_offset_lsb(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_ram_write_offset_lsb(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_ram_line_first_lsb(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_ram_line_first_lsb(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_ram_line_last_lsb(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_ram_line_last_lsb(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_counter_num_bytes
class RxCounterNumBytes(Reg):

  name    = "rx_counter_num_bytes"
  address = 27
  default = 3
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_counter_num_bytes")

  @classmethod
  def set_rx_counter_num_bytes(cls, map, value):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_counter_num_bytes(cls, map):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_counter_lsb
class RxCounterLsb(Reg):

  name    = "rx_counter_lsb"
  address = 28
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_counter_lsb")

  @classmethod
  def set_rx_counter_lsb(cls, map, value):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_counter_lsb(cls, map):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register radar_data_pif
class RadarDataPif(Reg):

  name    = "radar_data_pif"
  address = 31
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.radar_data_pif")

  @classmethod
  def set_radar_data_pif(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_radar_data_pif(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register radar_data_pif_status
class RadarDataPifStatus(Reg):

  name    = "radar_data_pif_status"
  address = 33
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.pif.radar_data_pif_status")

  @classmethod
  def set_pif_radar_data_pif_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_radar_data_pif_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_radar_data_pif_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_radar_data_pif_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_radar_data_spi_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_radar_data_spi_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_radar_data_spi_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_radar_data_spi_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_radar_data_pif_fifo_empty(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_radar_data_pif_fifo_empty(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register pif_radar_data_clear_status
class PifRadarDataClearStatus(Reg):

  name    = "pif_radar_data_clear_status"
  address = 34
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.pif_radar_data_clear_status")

  @classmethod
  def set_pif_clear_radar_data_pif_fifo_overflow(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_radar_data_pif_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_radar_data_pif_fifo_underflow(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_radar_data_pif_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_radar_data_spi_fifo_overflow(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_radar_data_spi_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_radar_data_spi_fifo_underflow(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_radar_data_spi_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register pif_radar_data0_fifo_status
class PifRadarData0FifoStatus(Reg):

  name    = "pif_radar_data0_fifo_status"
  address = 35
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.pif_radar_data0_fifo_status")

  @classmethod
  def set_pif_radar_data0_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_radar_data0_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_radar_data0_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_radar_data0_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_fifo_ram_word0_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_fifo_ram_word0_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_fifo_ram_word0_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_fifo_ram_word0_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_fifo_sample0_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_fifo_sample0_overflow(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_fifo_sample0_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_fifo_sample0_underflow(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register pif_radar_data0_clear_status
class PifRadarData0ClearStatus(Reg):

  name    = "pif_radar_data0_clear_status"
  address = 36
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.pif_radar_data0_clear_status")

  @classmethod
  def set_pif_clear_radar_data0_fifo_overflow(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_radar_data0_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_radar_data0_fifo_underflow(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_radar_data0_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_fifo_ram_word0_overflow(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_fifo_ram_word0_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_fifo_ram_word0_underflow(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_fifo_ram_word0_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_fifo_sample0_overflow(cls, map, value):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_fifo_sample0_overflow(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_fifo_sample0_underflow(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_fifo_sample0_underflow(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register pif_radar_data1_fifo_status
class PifRadarData1FifoStatus(Reg):

  name    = "pif_radar_data1_fifo_status"
  address = 37
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.pif_radar_data1_fifo_status")

  @classmethod
  def set_pif_radar_data1_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_radar_data1_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_radar_data1_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_radar_data1_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_fifo_ram_word1_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_fifo_ram_word1_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_fifo_ram_word1_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_fifo_ram_word1_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_fifo_sample1_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_fifo_sample1_overflow(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_fifo_sample1_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_fifo_sample1_underflow(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register pif_radar_data1_clear_status
class PifRadarData1ClearStatus(Reg):

  name    = "pif_radar_data1_clear_status"
  address = 38
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.pif_radar_data1_clear_status")

  @classmethod
  def set_pif_clear_radar_data1_fifo_overflow(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_radar_data1_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_radar_data1_fifo_underflow(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_radar_data1_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_fifo_ram_word1_overflow(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_fifo_ram_word1_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_fifo_ram_word1_underflow(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_fifo_ram_word1_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_fifo_sample1_overflow(cls, map, value):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_fifo_sample1_overflow(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_fifo_sample1_underflow(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_fifo_sample1_underflow(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register ram_select
class RamSelect(Reg):

  name    = "ram_select"
  address = 39
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.ram_select")

  @classmethod
  def set_ram_select(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_ram_select(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register radar_readout_idle
class RadarReadoutIdle(Reg):

  name    = "radar_readout_idle"
  address = 42
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.pif.radar_readout_idle")

  @classmethod
  def set_radar_readout_idle(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_radar_readout_idle(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_clocks_per_pulse
class TrxClocksPerPulse(Reg):

  name    = "trx_clocks_per_pulse"
  address = 44
  default = 16
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_clocks_per_pulse")

  @classmethod
  def set_trx_clocks_per_pulse(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_clocks_per_pulse(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_mframes_coarse
class RxMframesCoarse(Reg):

  name    = "rx_mframes_coarse"
  address = 45
  default = 16
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_mframes_coarse")

  @classmethod
  def set_rx_mframes_coarse(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_mframes_coarse(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_pulses_per_step_msb
class TrxPulsesPerStepMsb(Reg):

  name    = "trx_pulses_per_step_msb"
  address = 46
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_pulses_per_step_msb")

  @classmethod
  def set_trx_pulses_per_step_msb(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_pulses_per_step_msb(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_pulses_per_step_lsb
class TrxPulsesPerStepLsb(Reg):

  name    = "trx_pulses_per_step_lsb"
  address = 47
  default = 20
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_pulses_per_step_lsb")

  @classmethod
  def set_trx_pulses_per_step_lsb(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_pulses_per_step_lsb(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_dac_max_h
class TrxDacMaxH(Reg):

  name    = "trx_dac_max_h"
  address = 48
  default = 255
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_dac_max_h")

  @classmethod
  def set_trx_dac_max_h(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_dac_max_h(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_dac_max_l
class TrxDacMaxL(Reg):

  name    = "trx_dac_max_l"
  address = 49
  default = 7
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_dac_max_l")

  @classmethod
  def set_trx_dac_max_l(cls, map, value):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_dac_max_l(cls, map):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_dac_min_h
class TrxDacMinH(Reg):

  name    = "trx_dac_min_h"
  address = 50
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_dac_min_h")

  @classmethod
  def set_trx_dac_min_h(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_dac_min_h(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_dac_min_l
class TrxDacMinL(Reg):

  name    = "trx_dac_min_l"
  address = 51
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_dac_min_l")

  @classmethod
  def set_trx_dac_min_l(cls, map, value):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_dac_min_l(cls, map):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_dac_step
class TrxDacStep(Reg):

  name    = "trx_dac_step"
  address = 52
  default = 32
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_dac_step")

  @classmethod
  def set_trx_auto_bidir_enable(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_auto_bidir_enable(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_sweep_phase(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_sweep_phase(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_dac_settle_clog2(cls, map, value):
    start = 3
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_dac_settle_clog2(cls, map):
    start = 3
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_dac_step_clog2(cls, map, value):
    start = 1
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_dac_step_clog2(cls, map):
    start = 1
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_iterations
class TrxIterations(Reg):

  name    = "trx_iterations"
  address = 53
  default = 10
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_iterations")

  @classmethod
  def set_trx_iterations(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_iterations(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_ctrl_done
class TrxCtrlDone(Reg):

  name    = "trx_ctrl_done"
  address = 55
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_ctrl_done")

  @classmethod
  def set_trx_ctrl_done(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_trx_ctrl_done(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_backend_done
class TrxBackendDone(Reg):

  name    = "trx_backend_done"
  address = 58
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_backend_done")

  @classmethod
  def set_trx_backend_done(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_trx_backend_done(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_ctrl_mode
class TrxCtrlMode(Reg):

  name    = "trx_ctrl_mode"
  address = 59
  default = 192
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_ctrl_mode")

  @classmethod
  def set_tx_strobe_enable(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_strobe_enable(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_strobe_enable(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_strobe_enable(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_phase_override(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_phase_override(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_phase_override_val(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_phase_override_val(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_send_every_pulse(cls, map, value):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_send_every_pulse(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_constant_clocks_per_pulse(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_constant_clocks_per_pulse(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_ctrl_slave_mode(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_ctrl_slave_mode(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_start_sync_negedge(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_start_sync_negedge(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_lfsr_taps_0
class TrxLfsrTaps0(Reg):

  name    = "trx_lfsr_taps_0"
  address = 60
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_lfsr_taps_0")

  @classmethod
  def set_trx_lfsr_taps_0(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_lfsr_taps_0(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_lfsr_taps_1
class TrxLfsrTaps1(Reg):

  name    = "trx_lfsr_taps_1"
  address = 61
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_lfsr_taps_1")

  @classmethod
  def set_trx_lfsr_taps_1(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_lfsr_taps_1(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_lfsr_taps_2
class TrxLfsrTaps2(Reg):

  name    = "trx_lfsr_taps_2"
  address = 62
  default = 25
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_lfsr_taps_2")

  @classmethod
  def set_noiseless_ghost_order(cls, map, value):
    start = 6
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_noiseless_ghost_order(cls, map):
    start = 6
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_lfsr_taps_2(cls, map, value):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_lfsr_taps_2(cls, map):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_wait
class RxWait(Reg):

  name    = "rx_wait"
  address = 66
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_wait")

  @classmethod
  def set_rx_wait(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_wait(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register tx_wait
class TxWait(Reg):

  name    = "tx_wait"
  address = 67
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.tx_wait")

  @classmethod
  def set_tx_wait(cls, map, value):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_wait(cls, map):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_dac_override_h
class TrxDacOverrideH(Reg):

  name    = "trx_dac_override_h"
  address = 68
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_dac_override_h")

  @classmethod
  def set_trx_dac_override_enable(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_dac_override_enable(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_dac_override_val_h(cls, map, value):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_dac_override_val_h(cls, map):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register trx_dac_override_l
class TrxDacOverrideL(Reg):

  name    = "trx_dac_override_l"
  address = 69
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.trx_dac_override_l")

  @classmethod
  def set_trx_dac_override_val_l(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_dac_override_val_l(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register cpu_spi_master_clk_ctrl
class CpuSpiMasterClkCtrl(Reg):

  name    = "cpu_spi_master_clk_ctrl"
  address = 71
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.cpu_spi_master_clk_ctrl")

  @classmethod
  def set_spi_master_clk_div(cls, map, value):
    start = 7
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_master_clk_div(cls, map):
    start = 7
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_master_clk_sel(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_master_clk_sel(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_cpuclk_div(cls, map, value):
    start = 3
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_cpuclk_div(cls, map):
    start = 3
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_cpuclk_sel(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_cpuclk_sel(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register mclk_trx_backend_clk_ctrl
class MclkTrxBackendClkCtrl(Reg):

  name    = "mclk_trx_backend_clk_ctrl"
  address = 73
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.mclk_trx_backend_clk_ctrl")

  @classmethod
  def set_mclk_sel(cls, map, value):
    start = 7
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_mclk_sel(cls, map):
    start = 7
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_backend_clk_prescale(cls, map, value):
    start = 5
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_backend_clk_prescale(cls, map):
    start = 5
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_backend_clk_div(cls, map, value):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_backend_clk_div(cls, map):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register osc_ctrl
class OscCtrl(Reg):

  name    = "osc_ctrl"
  address = 74
  default = 72
  action  = False
  logger  = logging.getLogger("x4regmap.pif.osc_ctrl")

  @classmethod
  def set_auxclk_sel(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_auxclk_sel(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_sysclk_sel(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_sysclk_sel(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_xosc_bypass(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_xosc_bypass(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_xosc_dislvl(cls, map, value):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_xosc_dislvl(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_xosc_discap(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_xosc_discap(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_xosc_en(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_xosc_en(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_lpclk_disable(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lpclk_disable(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register io_ctrl_1
class IoCtrl1(Reg):

  name    = "io_ctrl_1"
  address = 75
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.io_ctrl_1")

  @classmethod
  def set_spiclk_ren(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spiclk_ren(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spio_ren(cls, map, value):
    start = 6
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spio_ren(cls, map):
    start = 6
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_io_ren(cls, map, value):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io_ren(cls, map):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register io_ctrl_2
class IoCtrl2(Reg):

  name    = "io_ctrl_2"
  address = 76
  default = 12
  action  = False
  logger  = logging.getLogger("x4regmap.pif.io_ctrl_2")

  @classmethod
  def set_lvds_rt_cal(cls, map, value):
    start = 7
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lvds_rt_cal(cls, map):
    start = 7
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_lvds_rt_en(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lvds_rt_en(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_lvcmos_schmitt_en(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lvcmos_schmitt_en(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_io6_lvcmos_ie(cls, map, value):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io6_lvcmos_ie(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_io5_lvcmos_ie(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io5_lvcmos_ie(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_lvds_rx_en(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lvds_rx_en(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_sub_lvds_en(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_sub_lvds_en(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register io_ctrl_3
class IoCtrl3(Reg):

  name    = "io_ctrl_3"
  address = 77
  default = 102
  action  = False
  logger  = logging.getLogger("x4regmap.pif.io_ctrl_3")

  @classmethod
  def set_lvds_tx_en(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lvds_tx_en(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_io_gpio_sel(cls, map, value):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io_gpio_sel(cls, map):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register io_ctrl_4
class IoCtrl4(Reg):

  name    = "io_ctrl_4"
  address = 78
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.io_ctrl_4")

  @classmethod
  def set_lvds_clkout_sel(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lvds_clkout_sel(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_io6_clkout_sel(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io6_clkout_sel(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_io5_clkout_sel(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io5_clkout_sel(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_extclk_sel(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_extclk_sel(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_lvds_txdrv(cls, map, value):
    start = 3
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lvds_txdrv(cls, map):
    start = 3
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_lvds_biastrim(cls, map, value):
    start = 1
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lvds_biastrim(cls, map):
    start = 1
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register io_ctrl_5
class IoCtrl5(Reg):

  name    = "io_ctrl_5"
  address = 79
  default = 5
  action  = False
  logger  = logging.getLogger("x4regmap.pif.io_ctrl_5")

  @classmethod
  def set_lpclk_trim(cls, map, value):
    start = 7
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lpclk_trim(cls, map):
    start = 7
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_io3_spi_sel(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io3_spi_sel(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_sync_source_sel(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_sync_source_sel(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_io1_spi_sel(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io1_spi_sel(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register io_ctrl_6
class IoCtrl6(Reg):

  name    = "io_ctrl_6"
  address = 81
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.io_ctrl_6")

  @classmethod
  def set_io2_test_sel(cls, map, value):
    start = 4
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io2_test_sel(cls, map):
    start = 4
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_io6_clkout_oe(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io6_clkout_oe(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_io5_clkout_oe(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_io5_clkout_oe(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register spi_config_pif
class SpiConfigPif(Reg):

  name    = "spi_config_pif"
  address = 127
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.spi_config_pif")

  @classmethod
  def set_spi_mode_pif(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_mode_pif(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register pif_mb_fifo_status
class PifMbFifoStatus(Reg):

  name    = "pif_mb_fifo_status"
  address = 82
  default = 4
  action  = False
  logger  = logging.getLogger("x4regmap.pif.pif_mb_fifo_status")

  @classmethod
  def set_pif_to_cpu_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_to_cpu_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_to_cpu_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_to_cpu_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_from_cpu_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_from_cpu_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_from_cpu_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_from_cpu_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_from_cpu_fifo_empty(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_from_cpu_fifo_empty(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_to_cpu_data_valid(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_to_cpu_data_valid(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_from_cpu_fifo_full(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_from_cpu_fifo_full(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register to_cpu_read_data
class ToCpuReadData(Reg):

  name    = "to_cpu_read_data"
  address = 83
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.to_cpu_read_data")

  @classmethod
  def set_to_cpu_read_data(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_to_cpu_read_data(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register from_cpu_write_data
class FromCpuWriteData(Reg):

  name    = "from_cpu_write_data"
  address = 84
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.from_cpu_write_data")

  @classmethod
  def set_from_cpu_write_data(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_from_cpu_write_data(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register pif_mb_clear_status
class PifMbClearStatus(Reg):

  name    = "pif_mb_clear_status"
  address = 85
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.pif_mb_clear_status")

  @classmethod
  def set_pif_clear_to_cpu_fifo_overflow(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_to_cpu_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_to_cpu_fifo_underflow(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_to_cpu_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_from_cpu_fifo_overflow(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_from_cpu_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_from_cpu_fifo_underflow(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_from_cpu_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register pif_mem_fifo_status
class PifMemFifoStatus(Reg):

  name    = "pif_mem_fifo_status"
  address = 86
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.pif_mem_fifo_status")

  @classmethod
  def set_pif_to_mem_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_to_mem_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_to_mem_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_to_mem_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_from_mem_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_from_mem_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_from_mem_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_pif_from_mem_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register pif_mem_clear_status
class PifMemClearStatus(Reg):

  name    = "pif_mem_clear_status"
  address = 87
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.pif_mem_clear_status")

  @classmethod
  def set_pif_clear_to_mem_fifo_overflow(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_to_mem_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_to_mem_fifo_underflow(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_to_mem_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_from_mem_fifo_overflow(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_from_mem_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pif_clear_from_mem_fifo_underflow(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pif_clear_from_mem_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register spi_master_send
class SpiMasterSend(Reg):

  name    = "spi_master_send"
  address = 88
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.spi_master_send")

  @classmethod
  def set_spi_master_send(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_master_send(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register spi_master_idle
class SpiMasterIdle(Reg):

  name    = "spi_master_idle"
  address = 90
  default = 3
  action  = False
  logger  = logging.getLogger("x4regmap.pif.spi_master_idle")

  @classmethod
  def set_spi_master_nss(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_master_nss(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_master_idle(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_master_idle(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register spi_master_mode
class SpiMasterMode(Reg):

  name    = "spi_master_mode"
  address = 91
  default = 144
  action  = False
  logger  = logging.getLogger("x4regmap.pif.spi_master_mode")

  @classmethod
  def set_spi_master_radar_burst_size_msb(cls, map, value):
    start = 7
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_master_radar_burst_size_msb(cls, map):
    start = 7
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_slave_sel(cls, map, value):
    start = 2
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_slave_sel(cls, map):
    start = 2
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_master_mode(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_master_mode(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register spi_master_radar_burst_size_lsb
class SpiMasterRadarBurstSizeLsb(Reg):

  name    = "spi_master_radar_burst_size_lsb"
  address = 92
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.spi_master_radar_burst_size_lsb")

  @classmethod
  def set_spi_master_radar_burst_size_lsb(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_master_radar_burst_size_lsb(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register otp_ctrl
class OtpCtrl(Reg):

  name    = "otp_ctrl"
  address = 93
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.pif.otp_ctrl")

  @classmethod
  def set_otp_ctrl_load(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_otp_ctrl_load(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register boot_from_otp_pif
class BootFromOtpPif(Reg):

  name    = "boot_from_otp_pif"
  address = 94
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.pif.boot_from_otp_pif")

  @classmethod
  def set_boot_from_otp_pif(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_boot_from_otp_pif(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_pll_ctrl_1
class RxPllCtrl1(Reg):

  name    = "rx_pll_ctrl_1"
  address = 95
  default = 96
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_pll_ctrl_1")

  @classmethod
  def set_rx_pll_fbdiv(cls, map, value):
    start = 6
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_fbdiv(cls, map):
    start = 6
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_pll_foutt_sel(cls, map, value):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_foutt_sel(cls, map):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_pll_ctrl_2
class RxPllCtrl2(Reg):

  name    = "rx_pll_ctrl_2"
  address = 97
  default = 7
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_pll_ctrl_2")

  @classmethod
  def set_rx_pll_postdiv(cls, map, value):
    start = 5
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_postdiv(cls, map):
    start = 5
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_pll_powerdown(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_powerdown(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_pll_powerdown_foutdiv(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_powerdown_foutdiv(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_pll_powerdown_foutt(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_powerdown_foutt(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_pll_skew_ctrl
class RxPllSkewCtrl(Reg):

  name    = "rx_pll_skew_ctrl"
  address = 98
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_pll_skew_ctrl")

  @classmethod
  def set_rx_pll_skewfastcal(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_skewfastcal(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_pll_skewcalcnt(cls, map, value):
    start = 4
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_skewcalcnt(cls, map):
    start = 4
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_pll_skewcalbyp(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_skewcalbyp(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_pll_skewcalen(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_skewcalen(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_pll_skewcalin
class RxPllSkewcalin(Reg):

  name    = "rx_pll_skewcalin"
  address = 99
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_pll_skewcalin")

  @classmethod
  def set_rx_pll_skewcalin(cls, map, value):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_pll_skewcalin(cls, map):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register rx_pll_status
class RxPllStatus(Reg):

  name    = "rx_pll_status"
  address = 100
  default = 128
  action  = False
  logger  = logging.getLogger("x4regmap.pif.rx_pll_status")

  @classmethod
  def set_rx_pll_lock(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_rx_pll_lock(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_rx_pll_skewcalout(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_rx_pll_skewcalout(cls, map):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register tx_pll_ctrl_1
class TxPllCtrl1(Reg):

  name    = "tx_pll_ctrl_1"
  address = 101
  default = 48
  action  = False
  logger  = logging.getLogger("x4regmap.pif.tx_pll_ctrl_1")

  @classmethod
  def set_tx_pll_fbdiv(cls, map, value):
    start = 6
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_fbdiv(cls, map):
    start = 6
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_tx_pll_foutt_sel(cls, map, value):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_foutt_sel(cls, map):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register tx_pll_ctrl_2
class TxPllCtrl2(Reg):

  name    = "tx_pll_ctrl_2"
  address = 102
  default = 7
  action  = False
  logger  = logging.getLogger("x4regmap.pif.tx_pll_ctrl_2")

  @classmethod
  def set_tx_pll_postdiv(cls, map, value):
    start = 5
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_postdiv(cls, map):
    start = 5
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_tx_pll_powerdown(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_powerdown(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_tx_pll_powerdown_foutdiv(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_powerdown_foutdiv(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_tx_pll_powerdown_foutt(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_powerdown_foutt(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register tx_pll_skew_ctrl
class TxPllSkewCtrl(Reg):

  name    = "tx_pll_skew_ctrl"
  address = 103
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.pif.tx_pll_skew_ctrl")

  @classmethod
  def set_tx_pll_skewfastcal(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_skewfastcal(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_tx_pll_skewcalcnt(cls, map, value):
    start = 4
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_skewcalcnt(cls, map):
    start = 4
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_tx_pll_skewcalbyp(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_skewcalbyp(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_tx_pll_skewcalen(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_skewcalen(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register tx_pll_skewcalin
class TxPllSkewcalin(Reg):

  name    = "tx_pll_skewcalin"
  address = 104
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.tx_pll_skewcalin")

  @classmethod
  def set_tx_pll_skewcalin(cls, map, value):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_pll_skewcalin(cls, map):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register tx_pll_status
class TxPllStatus(Reg):

  name    = "tx_pll_status"
  address = 105
  default = 128
  action  = False
  logger  = logging.getLogger("x4regmap.pif.tx_pll_status")

  @classmethod
  def set_tx_pll_lock(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_tx_pll_lock(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_tx_pll_skewcalout(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_tx_pll_skewcalout(cls, map):
    start = 6
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register common_pll_ctrl_1
class CommonPllCtrl1(Reg):

  name    = "common_pll_ctrl_1"
  address = 106
  default = 224
  action  = False
  logger  = logging.getLogger("x4regmap.pif.common_pll_ctrl_1")

  @classmethod
  def set_common_pll_powerdown(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_powerdown(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_common_pll_dsmpd(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_dsmpd(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_common_pll_dacpd(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_dacpd(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_common_pll_internal_bypass(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_internal_bypass(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_common_pll_fbdiv_msb(cls, map, value):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_fbdiv_msb(cls, map):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register common_pll_ctrl_2
class CommonPllCtrl2(Reg):

  name    = "common_pll_ctrl_2"
  address = 107
  default = 18
  action  = False
  logger  = logging.getLogger("x4regmap.pif.common_pll_ctrl_2")

  @classmethod
  def set_common_pll_fbdiv_lsb(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_fbdiv_lsb(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register common_pll_ctrl_3
class CommonPllCtrl3(Reg):

  name    = "common_pll_ctrl_3"
  address = 108
  default = 65
  action  = False
  logger  = logging.getLogger("x4regmap.pif.common_pll_ctrl_3")

  @classmethod
  def set_common_pll_foutpostdivpd(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_foutpostdivpd(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_common_pll_foutvcopd(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_foutvcopd(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_common_pll_refdiv(cls, map, value):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_refdiv(cls, map):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register common_pll_ctrl_4
class CommonPllCtrl4(Reg):

  name    = "common_pll_ctrl_4"
  address = 109
  default = 17
  action  = False
  logger  = logging.getLogger("x4regmap.pif.common_pll_ctrl_4")

  @classmethod
  def set_common_pll_fout4phasepd(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_fout4phasepd(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_common_pll_external_bypass(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_external_bypass(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_common_pll_postdiv1(cls, map, value):
    start = 5
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_postdiv1(cls, map):
    start = 5
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_common_pll_postdiv2(cls, map, value):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_postdiv2(cls, map):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register common_pll_frac_2
class CommonPllFrac2(Reg):

  name    = "common_pll_frac_2"
  address = 110
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.common_pll_frac_2")

  @classmethod
  def set_common_pll_frac_2(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_frac_2(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register common_pll_frac_1
class CommonPllFrac1(Reg):

  name    = "common_pll_frac_1"
  address = 111
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.common_pll_frac_1")

  @classmethod
  def set_common_pll_frac_1(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_frac_1(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register common_pll_frac_0
class CommonPllFrac0(Reg):

  name    = "common_pll_frac_0"
  address = 113
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.common_pll_frac_0")

  @classmethod
  def set_common_pll_frac_0(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_common_pll_frac_0(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register lock_status
class LockStatus(Reg):

  name    = "lock_status"
  address = 114
  default = 128
  action  = False
  logger  = logging.getLogger("x4regmap.pif.lock_status")

  @classmethod
  def set_common_pll_lock(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_common_pll_lock(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_xosc_lock(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_xosc_lock(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register clkout_sel
class ClkoutSel(Reg):

  name    = "clkout_sel"
  address = 115
  default = 48
  action  = False
  logger  = logging.getLogger("x4regmap.pif.clkout_sel")

  @classmethod
  def set_cmu_clkout_sel(cls, map, value):
    start = 7
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_cmu_clkout_sel(cls, map):
    start = 7
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_pllauxclk_sel(cls, map, value):
    start = 5
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_pllauxclk_sel(cls, map):
    start = 5
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_clkout_1_sel(cls, map, value):
    start = 3
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_clkout_1_sel(cls, map):
    start = 3
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_trx_clkout_2_sel(cls, map, value):
    start = 1
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_trx_clkout_2_sel(cls, map):
    start = 1
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register apc_dvdd_testmode
class ApcDvddTestmode(Reg):

  name    = "apc_dvdd_testmode"
  address = 116
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.apc_dvdd_testmode")

  @classmethod
  def set_apc_testmode(cls, map, value):
    start = 7
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_apc_testmode(cls, map):
    start = 7
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_testmode(cls, map, value):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dvdd_testmode(cls, map):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register misc_ctrl
class MiscCtrl(Reg):

  name    = "misc_ctrl"
  address = 117
  default = 16
  action  = False
  logger  = logging.getLogger("x4regmap.pif.misc_ctrl")

  @classmethod
  def set_tx_bandsel(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_bandsel(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_tx_power(cls, map, value):
    start = 6
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_tx_power(cls, map):
    start = 6
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_trim(cls, map, value):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dvdd_trim(cls, map):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register dvdd_rx_ctrl
class DvddRxCtrl(Reg):

  name    = "dvdd_rx_ctrl"
  address = 118
  default = 83
  action  = False
  logger  = logging.getLogger("x4regmap.pif.dvdd_rx_ctrl")

  @classmethod
  def set_dvdd_rx_disable(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dvdd_rx_disable(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_rx_disable_pulldown(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dvdd_rx_disable_pulldown(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_rx_trim(cls, map, value):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dvdd_rx_trim(cls, map):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register dvdd_tx_ctrl
class DvddTxCtrl(Reg):

  name    = "dvdd_tx_ctrl"
  address = 120
  default = 80
  action  = False
  logger  = logging.getLogger("x4regmap.pif.dvdd_tx_ctrl")

  @classmethod
  def set_dvdd_tx_disable(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dvdd_tx_disable(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_tx_disable_pulldown(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dvdd_tx_disable_pulldown(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_tx_trim(cls, map, value):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dvdd_tx_trim(cls, map):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register dvdd_testmode
class DvddTestmode(Reg):

  name    = "dvdd_testmode"
  address = 121
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.dvdd_testmode")

  @classmethod
  def set_dvdd_rx_testmode(cls, map, value):
    start = 7
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dvdd_rx_testmode(cls, map):
    start = 7
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_tx_testmode(cls, map, value):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dvdd_tx_testmode(cls, map):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register avdd_rx_ctrl
class AvddRxCtrl(Reg):

  name    = "avdd_rx_ctrl"
  address = 122
  default = 83
  action  = False
  logger  = logging.getLogger("x4regmap.pif.avdd_rx_ctrl")

  @classmethod
  def set_avdd_rx_disable(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_avdd_rx_disable(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_avdd_rx_disable_pulldown(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_avdd_rx_disable_pulldown(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_avdd_rx_trim(cls, map, value):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_avdd_rx_trim(cls, map):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register avdd_tx_ctrl
class AvddTxCtrl(Reg):

  name    = "avdd_tx_ctrl"
  address = 123
  default = 72
  action  = False
  logger  = logging.getLogger("x4regmap.pif.avdd_tx_ctrl")

  @classmethod
  def set_avdd_tx_disable(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_avdd_tx_disable(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_avdd_tx_disable_pulldown(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_avdd_tx_disable_pulldown(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_avdd_tx_trim(cls, map, value):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_avdd_tx_trim(cls, map):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register avdd_testmode
class AvddTestmode(Reg):

  name    = "avdd_testmode"
  address = 124
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.avdd_testmode")

  @classmethod
  def set_avdd_rx_testmode(cls, map, value):
    start = 7
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_avdd_rx_testmode(cls, map):
    start = 7
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_avdd_tx_testmode(cls, map, value):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_avdd_tx_testmode(cls, map):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register ldo_status_1
class LdoStatus1(Reg):

  name    = "ldo_status_1"
  address = 125
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.ldo_status_1")

  @classmethod
  def set_avdd_rx_anatestreq(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_avdd_rx_anatestreq(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_avdd_rx_digtestbus(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_avdd_rx_digtestbus(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_avdd_tx_anatestreq(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_avdd_tx_anatestreq(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_avdd_tx_digtestbus(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_avdd_tx_digtestbus(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_rx_anatestreq(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_dvdd_rx_anatestreq(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_rx_digtestbus(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_dvdd_rx_digtestbus(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_tx_anatestreq(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_dvdd_tx_anatestreq(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_tx_digtestbus(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_dvdd_tx_digtestbus(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Register ldo_status_2
class LdoStatus2(Reg):

  name    = "ldo_status_2"
  address = 126
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.pif.ldo_status_2")

  @classmethod
  def set_dvdd_anatestreq(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_dvdd_anatestreq(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_digtestbus(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_dvdd_digtestbus(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_apc_anatestreq(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_apc_anatestreq(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_apc_digtestbus(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_apc_digtestbus(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_rx_power_good(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_dvdd_rx_power_good(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dvdd_tx_power_good(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_dvdd_tx_power_good(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_avdd_rx_power_good(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_avdd_rx_power_good(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_avdd_tx_power_good(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_avdd_tx_power_good(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# PIF Action fetch_radar_data_spi
class FetchRadarDataSpi(Reg):

  name    = "fetch_radar_data_spi"
  address = 29
  default = 0
  action  = True
  logger  = logging.getLogger("x4regmap.pif.fetch_radar_data_spi")

  @classmethod
  def set_fetch_radar_data_spi(cls, map, value):
    cls.write(map, 0, 1, 1, value)

  @classmethod
  def get_fetch_radar_data_spi(cls, map):
    raise RegmapError("Attempted to read to a action segment")




# PIF Action fetch_radar_data_pif
class FetchRadarDataPif(Reg):

  name    = "fetch_radar_data_pif"
  address = 30
  default = 0
  action  = True
  logger  = logging.getLogger("x4regmap.pif.fetch_radar_data_pif")

  @classmethod
  def set_fetch_radar_data_pif(cls, map, value):
    cls.write(map, 0, 1, 1, value)

  @classmethod
  def get_fetch_radar_data_pif(cls, map):
    raise RegmapError("Attempted to read to a action segment")




# PIF Action rx_reset_counters
class RxResetCounters(Reg):

  name    = "rx_reset_counters"
  address = 43
  default = 0
  action  = True
  logger  = logging.getLogger("x4regmap.pif.rx_reset_counters")

  @classmethod
  def set_rx_reset_counters(cls, map, value):
    cls.write(map, 0, 1, 1, value)

  @classmethod
  def get_rx_reset_counters(cls, map):
    raise RegmapError("Attempted to read to a action segment")




# PIF Action trx_start
class TrxStart(Reg):

  name    = "trx_start"
  address = 54
  default = 0
  action  = True
  logger  = logging.getLogger("x4regmap.pif.trx_start")

  @classmethod
  def set_trx_start(cls, map, value):
    cls.write(map, 0, 1, 1, value)

  @classmethod
  def get_trx_start(cls, map):
    raise RegmapError("Attempted to read to a action segment")




# PIF Action trx_lfsr_reset
class TrxLfsrReset(Reg):

  name    = "trx_lfsr_reset"
  address = 65
  default = 0
  action  = True
  logger  = logging.getLogger("x4regmap.pif.trx_lfsr_reset")

  @classmethod
  def set_trx_lfsr_reset(cls, map, value):
    cls.write(map, 0, 1, 1, value)

  @classmethod
  def get_trx_lfsr_reset(cls, map):
    raise RegmapError("Attempted to read to a action segment")




# PIF Action trx_dac_override_load
class TrxDacOverrideLoad(Reg):

  name    = "trx_dac_override_load"
  address = 70
  default = 0
  action  = True
  logger  = logging.getLogger("x4regmap.pif.trx_dac_override_load")

  @classmethod
  def set_trx_dac_override_load(cls, map, value):
    cls.write(map, 0, 1, 1, value)

  @classmethod
  def get_trx_dac_override_load(cls, map):
    raise RegmapError("Attempted to read to a action segment")




# PIF Action spi_master_radar_burst_kick
class SpiMasterRadarBurstKick(Reg):

  name    = "spi_master_radar_burst_kick"
  address = 89
  default = 0
  action  = True
  logger  = logging.getLogger("x4regmap.pif.spi_master_radar_burst_kick")

  @classmethod
  def set_spi_master_radar_burst_kick(cls, map, value):
    cls.write(map, 0, 1, 1, value)

  @classmethod
  def get_spi_master_radar_burst_kick(cls, map):
    raise RegmapError("Attempted to read to a action segment")




# SPI Register force_zero
class ForceZero(Reg):

  name    = "force_zero"
  address = 0
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.force_zero")

  @classmethod
  def set_force_zero(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_force_zero(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register force_one
class ForceOne(Reg):

  name    = "force_one"
  address = 1
  default = 255
  action  = False
  logger  = logging.getLogger("x4regmap.spi.force_one")

  @classmethod
  def set_force_one(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_force_one(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register chip_id_dig
class ChipIdDig(Reg):

  name    = "chip_id_dig"
  address = 2
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.spi.chip_id_dig")

  @classmethod
  def set_chip_id_dig(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_chip_id_dig(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register chip_id_sys
class ChipIdSys(Reg):

  name    = "chip_id_sys"
  address = 3
  default = 2
  action  = False
  logger  = logging.getLogger("x4regmap.spi.chip_id_sys")

  @classmethod
  def set_chip_id_sys(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_chip_id_sys(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register debug
class Debug(Reg):

  name    = "debug"
  address = 4
  default = 170
  action  = False
  logger  = logging.getLogger("x4regmap.spi.debug")

  @classmethod
  def set_debug(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_debug(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register radar_data_spi
class RadarDataSpi(Reg):

  name    = "radar_data_spi"
  address = 5
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.radar_data_spi")

  @classmethod
  def set_radar_data_spi(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_radar_data_spi(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register radar_data_spi_status
class RadarDataSpiStatus(Reg):

  name    = "radar_data_spi_status"
  address = 6
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.spi.radar_data_spi_status")

  @classmethod
  def set_spi_radar_data_spi_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_radar_data_spi_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_radar_data_spi_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_radar_data_spi_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_radar_data_pif_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_radar_data_pif_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_radar_data_pif_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_radar_data_pif_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_radar_data_spi_fifo_empty(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_radar_data_spi_fifo_empty(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register spi_radar_data_clear_status
class SpiRadarDataClearStatus(Reg):

  name    = "spi_radar_data_clear_status"
  address = 7
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.spi_radar_data_clear_status")

  @classmethod
  def set_spi_clear_radar_data_spi_fifo_overflow(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_radar_data_spi_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_radar_data_spi_fifo_underflow(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_radar_data_spi_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_radar_data_pif_fifo_overflow(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_radar_data_pif_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_radar_data_pif_fifo_underflow(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_radar_data_pif_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register spi_radar_data0_fifo_status
class SpiRadarData0FifoStatus(Reg):

  name    = "spi_radar_data0_fifo_status"
  address = 8
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.spi_radar_data0_fifo_status")

  @classmethod
  def set_spi_radar_data0_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_radar_data0_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_radar_data0_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_radar_data0_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_fifo_ram_word0_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_fifo_ram_word0_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_fifo_ram_word0_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_fifo_ram_word0_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_fifo_sample0_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_fifo_sample0_overflow(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_fifo_sample0_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_fifo_sample0_underflow(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register spi_radar_data0_clear_status
class SpiRadarData0ClearStatus(Reg):

  name    = "spi_radar_data0_clear_status"
  address = 9
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.spi_radar_data0_clear_status")

  @classmethod
  def set_spi_clear_radar_data0_fifo_overflow(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_radar_data0_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_radar_data0_fifo_underflow(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_radar_data0_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_fifo_ram_word0_overflow(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_fifo_ram_word0_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_fifo_ram_word0_underflow(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_fifo_ram_word0_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_fifo_sample0_overflow(cls, map, value):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_fifo_sample0_overflow(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_fifo_sample0_underflow(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_fifo_sample0_underflow(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register spi_radar_data1_fifo_status
class SpiRadarData1FifoStatus(Reg):

  name    = "spi_radar_data1_fifo_status"
  address = 10
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.spi_radar_data1_fifo_status")

  @classmethod
  def set_spi_radar_data1_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_radar_data1_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_radar_data1_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_radar_data1_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_fifo_ram_word1_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_fifo_ram_word1_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_fifo_ram_word1_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_fifo_ram_word1_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_fifo_sample1_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_fifo_sample1_overflow(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_fifo_sample1_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_fifo_sample1_underflow(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register spi_radar_data1_clear_status
class SpiRadarData1ClearStatus(Reg):

  name    = "spi_radar_data1_clear_status"
  address = 11
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.spi_radar_data1_clear_status")

  @classmethod
  def set_spi_clear_radar_data1_fifo_overflow(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_radar_data1_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_radar_data1_fifo_underflow(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_radar_data1_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_fifo_ram_word1_overflow(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_fifo_ram_word1_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_fifo_ram_word1_underflow(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_fifo_ram_word1_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_fifo_sample1_overflow(cls, map, value):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_fifo_sample1_overflow(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_fifo_sample1_underflow(cls, map, value):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_fifo_sample1_underflow(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register radar_bist_ctrl
class RadarBistCtrl(Reg):

  name    = "radar_bist_ctrl"
  address = 12
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.radar_bist_ctrl")

  @classmethod
  def set_smpl_ram1_bist_en(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_smpl_ram1_bist_en(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_smpl_ram0_bist_en(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_smpl_ram0_bist_en(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register radar_bist_status
class RadarBistStatus(Reg):

  name    = "radar_bist_status"
  address = 13
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.radar_bist_status")

  @classmethod
  def set_smpl_ram1_bist_pass(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_smpl_ram1_bist_pass(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_smpl_ram1_bist_done(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_smpl_ram1_bist_done(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_smpl_ram0_bist_pass(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_smpl_ram0_bist_pass(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_smpl_ram0_bist_done(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_smpl_ram0_bist_done(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register firmware_version_spi
class FirmwareVersionSpi(Reg):

  name    = "firmware_version_spi"
  address = 14
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.firmware_version_spi")

  @classmethod
  def set_firmware_version_spi(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_firmware_version_spi(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register to_cpu_write_data
class ToCpuWriteData(Reg):

  name    = "to_cpu_write_data"
  address = 15
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.to_cpu_write_data")

  @classmethod
  def set_to_cpu_write_data(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_to_cpu_write_data(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register spi_mb_fifo_status
class SpiMbFifoStatus(Reg):

  name    = "spi_mb_fifo_status"
  address = 16
  default = 4
  action  = False
  logger  = logging.getLogger("x4regmap.spi.spi_mb_fifo_status")

  @classmethod
  def set_spi_to_cpu_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_to_cpu_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_to_cpu_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_to_cpu_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_from_cpu_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_from_cpu_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_from_cpu_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_from_cpu_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_to_cpu_fifo_empty(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_to_cpu_fifo_empty(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_from_cpu_data_valid(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_from_cpu_data_valid(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_to_cpu_fifo_full(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_to_cpu_fifo_full(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register from_cpu_read_data
class FromCpuReadData(Reg):

  name    = "from_cpu_read_data"
  address = 17
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.from_cpu_read_data")

  @classmethod
  def set_from_cpu_read_data(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_from_cpu_read_data(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register spi_mb_clear_status
class SpiMbClearStatus(Reg):

  name    = "spi_mb_clear_status"
  address = 18
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.spi_mb_clear_status")

  @classmethod
  def set_spi_clear_to_cpu_fifo_overflow(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_to_cpu_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_to_cpu_fifo_underflow(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_to_cpu_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_from_cpu_fifo_overflow(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_from_cpu_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_from_cpu_fifo_underflow(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_from_cpu_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register to_mem_write_data
class ToMemWriteData(Reg):

  name    = "to_mem_write_data"
  address = 19
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.to_mem_write_data")

  @classmethod
  def set_to_mem_write_data(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_to_mem_write_data(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register spi_mem_fifo_status
class SpiMemFifoStatus(Reg):

  name    = "spi_mem_fifo_status"
  address = 20
  default = 2
  action  = False
  logger  = logging.getLogger("x4regmap.spi.spi_mem_fifo_status")

  @classmethod
  def set_spi_to_mem_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_to_mem_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_to_mem_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_to_mem_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_from_mem_fifo_overflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_from_mem_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_from_mem_fifo_underflow(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_spi_from_mem_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_from_mem_data_valid(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_from_mem_data_valid(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_to_mem_fifo_empty(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_to_mem_fifo_empty(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_to_mem_fifo_full(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_to_mem_fifo_full(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register from_mem_read_data
class FromMemReadData(Reg):

  name    = "from_mem_read_data"
  address = 21
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.from_mem_read_data")

  @classmethod
  def set_from_mem_read_data(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_from_mem_read_data(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register spi_mem_clear_status
class SpiMemClearStatus(Reg):

  name    = "spi_mem_clear_status"
  address = 22
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.spi_mem_clear_status")

  @classmethod
  def set_spi_clear_to_mem_fifo_overflow(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_to_mem_fifo_overflow(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_to_mem_fifo_underflow(cls, map, value):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_to_mem_fifo_underflow(cls, map):
    start = 6
    stop  = 6
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_from_mem_fifo_overflow(cls, map, value):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_from_mem_fifo_overflow(cls, map):
    start = 5
    stop  = 5
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_spi_clear_from_mem_fifo_underflow(cls, map, value):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_clear_from_mem_fifo_underflow(cls, map):
    start = 4
    stop  = 4
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register mem_mode
class MemMode(Reg):

  name    = "mem_mode"
  address = 23
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.mem_mode")

  @classmethod
  def set_mem_readback_mode(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_mem_readback_mode(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_mem_programming_mode(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_mem_programming_mode(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register mem_first_addr_msb
class MemFirstAddrMsb(Reg):

  name    = "mem_first_addr_msb"
  address = 24
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.mem_first_addr_msb")

  @classmethod
  def set_mem_first_addr_msb(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_mem_first_addr_msb(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register mem_first_addr_lsb
class MemFirstAddrLsb(Reg):

  name    = "mem_first_addr_lsb"
  address = 25
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.mem_first_addr_lsb")

  @classmethod
  def set_mem_first_addr_lsb(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_mem_first_addr_lsb(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register boot_from_otp_spi
class BootFromOtpSpi(Reg):

  name    = "boot_from_otp_spi"
  address = 26
  default = 1
  action  = False
  logger  = logging.getLogger("x4regmap.spi.boot_from_otp_spi")

  @classmethod
  def set_boot_from_otp_spi(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_boot_from_otp_spi(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register mcu_bist_ctrl
class McuBistCtrl(Reg):

  name    = "mcu_bist_ctrl"
  address = 27
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.mcu_bist_ctrl")

  @classmethod
  def set_progmem_bist_en(cls, map, value):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_progmem_bist_en(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_intram_bist_en(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_intram_bist_en(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register mcu_bist_status
class McuBistStatus(Reg):

  name    = "mcu_bist_status"
  address = 28
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.mcu_bist_status")

  @classmethod
  def set_progmem_bist_pass(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_progmem_bist_pass(cls, map):
    start = 3
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_progmem_bist_done(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_progmem_bist_done(cls, map):
    start = 2
    stop  = 2
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_intram_bist_pass(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_intram_bist_pass(cls, map):
    start = 1
    stop  = 1
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_intram_bist_done(cls, map, value):
    raise RegmapError("Attempted to write to a readonly segment")

  @classmethod
  def get_intram_bist_done(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register spi_config
class SpiConfig(Reg):

  name    = "spi_config"
  address = 29
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.spi_config")

  @classmethod
  def set_spi_mode(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_spi_mode(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# SPI Register cpu_reset
class CpuReset(Reg):

  name    = "cpu_reset"
  address = 127
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.spi.cpu_reset")

  @classmethod
  def set_cpu_reset(cls, map, value):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_cpu_reset(cls, map):
    start = 0
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register debug_xif
class DebugXif(Reg):

  name    = "debug_xif"
  address = 0
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.debug_xif")

  @classmethod
  def set_debug_xif(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_debug_xif(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register sampler_preset_msb
class SamplerPresetMsb(Reg):

  name    = "sampler_preset_msb"
  address = 1
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.sampler_preset_msb")

  @classmethod
  def set_sampler_preset_en(cls, map, value):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_sampler_preset_en(cls, map):
    start = 7
    stop  = 7
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_sampler_preset_val_msb(cls, map, value):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_sampler_preset_val_msb(cls, map):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register sampler_preset_lsb
class SamplerPresetLsb(Reg):

  name    = "sampler_preset_lsb"
  address = 2
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.sampler_preset_lsb")

  @classmethod
  def set_sampler_preset_val_lsb(cls, map, value):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_sampler_preset_val_lsb(cls, map):
    start = 7
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register dac_trim
class DacTrim(Reg):

  name    = "dac_trim"
  address = 3
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.dac_trim")

  @classmethod
  def set_dac_trim_a(cls, map, value):
    start = 5
    stop  = 3
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dac_trim_a(cls, map):
    start = 5
    stop  = 3
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val

  @classmethod
  def set_dac_trim_b(cls, map, value):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dac_trim_b(cls, map):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register preamp_trim
class PreampTrim(Reg):

  name    = "preamp_trim"
  address = 4
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.preamp_trim")

  @classmethod
  def set_preamp_trim(cls, map, value):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_preamp_trim(cls, map):
    start = 3
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register rx_fe_anatestreq
class RxFeAnatestreq(Reg):

  name    = "rx_fe_anatestreq"
  address = 5
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.rx_fe_anatestreq")

  @classmethod
  def set_rx_fe_anatestreq(cls, map, value):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_rx_fe_anatestreq(cls, map):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register lna_anatestreq
class LnaAnatestreq(Reg):

  name    = "lna_anatestreq"
  address = 6
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.lna_anatestreq")

  @classmethod
  def set_lna_anatestreq(cls, map, value):
    start = 1
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_lna_anatestreq(cls, map):
    start = 1
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register dac_anatestreq
class DacAnatestreq(Reg):

  name    = "dac_anatestreq"
  address = 7
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.dac_anatestreq")

  @classmethod
  def set_dac_anatestreq(cls, map, value):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_dac_anatestreq(cls, map):
    start = 5
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register vref_trim
class VrefTrim(Reg):

  name    = "vref_trim"
  address = 8
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.vref_trim")

  @classmethod
  def set_vref_trim(cls, map, value):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_vref_trim(cls, map):
    start = 4
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register iref_trim
class IrefTrim(Reg):

  name    = "iref_trim"
  address = 9
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.iref_trim")

  @classmethod
  def set_iref_trim(cls, map, value):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_iref_trim(cls, map):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




# XIF Register apc_temp_trim
class ApcTempTrim(Reg):

  name    = "apc_temp_trim"
  address = 10
  default = 0
  action  = False
  logger  = logging.getLogger("x4regmap.xif.apc_temp_trim")

  @classmethod
  def set_apc_temp_trim(cls, map, value):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    if value < 2**(size):
      cls.logger.debug("Setting segment value to %s" % value)
      cls.write(map, start, stop, size, value)
    else:
      raise RegmapError("Attempted to set a %s bit register segment to %s." % (size, value))

  @classmethod
  def get_apc_temp_trim(cls, map):
    start = 2
    stop  = 0
    size  = 1 + start - stop
    regval = cls.read(map)
    val = (regval >> stop) & (0xFF>>(8-size))
    cls.logger.debug("Extracted segment value %s from register value: %s" % (bin(val), bin(regval)))
    return val




class PIF(RegMap):


  def __set__firmware_version(self,value): FirmwareVersion.set_firmware_version(self, value)
  def __get__firmware_version(self): return FirmwareVersion.get_firmware_version(self)
  firmware_version = property(__get__firmware_version,__set__firmware_version,None,'')

  def __set__gpio_o(self,value): GpioOut.set_gpio_o(self, value)
  def __get__gpio_o(self): return GpioOut.get_gpio_o(self)
  gpio_o = property(__get__gpio_o,__set__gpio_o,None,'')

  def __set__gpio_i(self,value): GpioIn.set_gpio_i(self, value)
  def __get__gpio_i(self): return GpioIn.get_gpio_i(self)
  gpio_i = property(__get__gpio_i,__set__gpio_i,None,'')

  def __set__gpio_output_enable(self,value): GpioOe.set_gpio_output_enable(self, value)
  def __get__gpio_output_enable(self): return GpioOe.get_gpio_output_enable(self)
  gpio_output_enable = property(__get__gpio_output_enable,__set__gpio_output_enable,None,'')

  def __set__rx_mframes(self,value): RxMframes.set_rx_mframes(self, value)
  def __get__rx_mframes(self): return RxMframes.get_rx_mframes(self)
  rx_mframes = property(__get__rx_mframes,__set__rx_mframes,None,'')

  def __set__hpf_disable_feedforward(self,value): SmplMode.set_hpf_disable_feedforward(self, value)
  def __get__hpf_disable_feedforward(self): return SmplMode.get_hpf_disable_feedforward(self)
  hpf_disable_feedforward = property(__get__hpf_disable_feedforward,__set__hpf_disable_feedforward,None,'')

  def __set__powerdown_sampler(self,value): SmplMode.set_powerdown_sampler(self, value)
  def __get__powerdown_sampler(self): return SmplMode.get_powerdown_sampler(self)
  powerdown_sampler = property(__get__powerdown_sampler,__set__powerdown_sampler,None,'')

  def __set__rx_downconversion_enable(self,value): SmplMode.set_rx_downconversion_enable(self, value)
  def __get__rx_downconversion_enable(self): return SmplMode.get_rx_downconversion_enable(self)
  rx_downconversion_enable = property(__get__rx_downconversion_enable,__set__rx_downconversion_enable,None,'')

  def __set__rx_downconversion_coeff_i1(self,value): RxDownconversionCoeffI1.set_rx_downconversion_coeff_i1(self, value)
  def __get__rx_downconversion_coeff_i1(self): return RxDownconversionCoeffI1.get_rx_downconversion_coeff_i1(self)
  rx_downconversion_coeff_i1 = property(__get__rx_downconversion_coeff_i1,__set__rx_downconversion_coeff_i1,None,'')

  def __set__rx_downconversion_coeff_i2(self,value): RxDownconversionCoeffI2.set_rx_downconversion_coeff_i2(self, value)
  def __get__rx_downconversion_coeff_i2(self): return RxDownconversionCoeffI2.get_rx_downconversion_coeff_i2(self)
  rx_downconversion_coeff_i2 = property(__get__rx_downconversion_coeff_i2,__set__rx_downconversion_coeff_i2,None,'')

  def __set__rx_downconversion_coeff_q1(self,value): RxDownconversionCoeffQ1.set_rx_downconversion_coeff_q1(self, value)
  def __get__rx_downconversion_coeff_q1(self): return RxDownconversionCoeffQ1.get_rx_downconversion_coeff_q1(self)
  rx_downconversion_coeff_q1 = property(__get__rx_downconversion_coeff_q1,__set__rx_downconversion_coeff_q1,None,'')

  def __set__rx_downconversion_coeff_q2(self,value): RxDownconversionCoeffQ2.set_rx_downconversion_coeff_q2(self, value)
  def __get__rx_downconversion_coeff_q2(self): return RxDownconversionCoeffQ2.get_rx_downconversion_coeff_q2(self)
  rx_downconversion_coeff_q2 = property(__get__rx_downconversion_coeff_q2,__set__rx_downconversion_coeff_q2,None,'')

  def __set__rx_ram_write_offset_msb(self,value): RxRamWriteOffsetMsb.set_rx_ram_write_offset_msb(self, value)
  def __get__rx_ram_write_offset_msb(self): return RxRamWriteOffsetMsb.get_rx_ram_write_offset_msb(self)
  rx_ram_write_offset_msb = property(__get__rx_ram_write_offset_msb,__set__rx_ram_write_offset_msb,None,'')

  def __set__rx_ram_line_first_msb(self,value): RxRamLineFirstMsb.set_rx_ram_line_first_msb(self, value)
  def __get__rx_ram_line_first_msb(self): return RxRamLineFirstMsb.get_rx_ram_line_first_msb(self)
  rx_ram_line_first_msb = property(__get__rx_ram_line_first_msb,__set__rx_ram_line_first_msb,None,'')

  def __set__rx_ram_line_last_msb(self,value): RxRamLineLastMsb.set_rx_ram_line_last_msb(self, value)
  def __get__rx_ram_line_last_msb(self): return RxRamLineLastMsb.get_rx_ram_line_last_msb(self)
  rx_ram_line_last_msb = property(__get__rx_ram_line_last_msb,__set__rx_ram_line_last_msb,None,'')

  def __set__rx_ram_write_offset_lsb(self,value): RxRamLsbs.set_rx_ram_write_offset_lsb(self, value)
  def __get__rx_ram_write_offset_lsb(self): return RxRamLsbs.get_rx_ram_write_offset_lsb(self)
  rx_ram_write_offset_lsb = property(__get__rx_ram_write_offset_lsb,__set__rx_ram_write_offset_lsb,None,'')

  def __set__rx_ram_line_first_lsb(self,value): RxRamLsbs.set_rx_ram_line_first_lsb(self, value)
  def __get__rx_ram_line_first_lsb(self): return RxRamLsbs.get_rx_ram_line_first_lsb(self)
  rx_ram_line_first_lsb = property(__get__rx_ram_line_first_lsb,__set__rx_ram_line_first_lsb,None,'')

  def __set__rx_ram_line_last_lsb(self,value): RxRamLsbs.set_rx_ram_line_last_lsb(self, value)
  def __get__rx_ram_line_last_lsb(self): return RxRamLsbs.get_rx_ram_line_last_lsb(self)
  rx_ram_line_last_lsb = property(__get__rx_ram_line_last_lsb,__set__rx_ram_line_last_lsb,None,'')

  def __set__rx_counter_num_bytes(self,value): RxCounterNumBytes.set_rx_counter_num_bytes(self, value)
  def __get__rx_counter_num_bytes(self): return RxCounterNumBytes.get_rx_counter_num_bytes(self)
  rx_counter_num_bytes = property(__get__rx_counter_num_bytes,__set__rx_counter_num_bytes,None,'')

  def __set__rx_counter_lsb(self,value): RxCounterLsb.set_rx_counter_lsb(self, value)
  def __get__rx_counter_lsb(self): return RxCounterLsb.get_rx_counter_lsb(self)
  rx_counter_lsb = property(__get__rx_counter_lsb,__set__rx_counter_lsb,None,'')

  def __set__radar_data_pif(self,value): RadarDataPif.set_radar_data_pif(self, value)
  def __get__radar_data_pif(self): return RadarDataPif.get_radar_data_pif(self)
  radar_data_pif = property(__get__radar_data_pif,__set__radar_data_pif,None,'')

  def __set__pif_radar_data_pif_fifo_overflow(self,value): RadarDataPifStatus.set_pif_radar_data_pif_fifo_overflow(self, value)
  def __get__pif_radar_data_pif_fifo_overflow(self): return RadarDataPifStatus.get_pif_radar_data_pif_fifo_overflow(self)
  pif_radar_data_pif_fifo_overflow = property(__get__pif_radar_data_pif_fifo_overflow,__set__pif_radar_data_pif_fifo_overflow,None,'')

  def __set__pif_radar_data_pif_fifo_underflow(self,value): RadarDataPifStatus.set_pif_radar_data_pif_fifo_underflow(self, value)
  def __get__pif_radar_data_pif_fifo_underflow(self): return RadarDataPifStatus.get_pif_radar_data_pif_fifo_underflow(self)
  pif_radar_data_pif_fifo_underflow = property(__get__pif_radar_data_pif_fifo_underflow,__set__pif_radar_data_pif_fifo_underflow,None,'')

  def __set__pif_radar_data_spi_fifo_overflow(self,value): RadarDataPifStatus.set_pif_radar_data_spi_fifo_overflow(self, value)
  def __get__pif_radar_data_spi_fifo_overflow(self): return RadarDataPifStatus.get_pif_radar_data_spi_fifo_overflow(self)
  pif_radar_data_spi_fifo_overflow = property(__get__pif_radar_data_spi_fifo_overflow,__set__pif_radar_data_spi_fifo_overflow,None,'')

  def __set__pif_radar_data_spi_fifo_underflow(self,value): RadarDataPifStatus.set_pif_radar_data_spi_fifo_underflow(self, value)
  def __get__pif_radar_data_spi_fifo_underflow(self): return RadarDataPifStatus.get_pif_radar_data_spi_fifo_underflow(self)
  pif_radar_data_spi_fifo_underflow = property(__get__pif_radar_data_spi_fifo_underflow,__set__pif_radar_data_spi_fifo_underflow,None,'')

  def __set__radar_data_pif_fifo_empty(self,value): RadarDataPifStatus.set_radar_data_pif_fifo_empty(self, value)
  def __get__radar_data_pif_fifo_empty(self): return RadarDataPifStatus.get_radar_data_pif_fifo_empty(self)
  radar_data_pif_fifo_empty = property(__get__radar_data_pif_fifo_empty,__set__radar_data_pif_fifo_empty,None,'')

  def __set__pif_clear_radar_data_pif_fifo_overflow(self,value): PifRadarDataClearStatus.set_pif_clear_radar_data_pif_fifo_overflow(self, value)
  def __get__pif_clear_radar_data_pif_fifo_overflow(self): return PifRadarDataClearStatus.get_pif_clear_radar_data_pif_fifo_overflow(self)
  pif_clear_radar_data_pif_fifo_overflow = property(__get__pif_clear_radar_data_pif_fifo_overflow,__set__pif_clear_radar_data_pif_fifo_overflow,None,'')

  def __set__pif_clear_radar_data_pif_fifo_underflow(self,value): PifRadarDataClearStatus.set_pif_clear_radar_data_pif_fifo_underflow(self, value)
  def __get__pif_clear_radar_data_pif_fifo_underflow(self): return PifRadarDataClearStatus.get_pif_clear_radar_data_pif_fifo_underflow(self)
  pif_clear_radar_data_pif_fifo_underflow = property(__get__pif_clear_radar_data_pif_fifo_underflow,__set__pif_clear_radar_data_pif_fifo_underflow,None,'')

  def __set__pif_clear_radar_data_spi_fifo_overflow(self,value): PifRadarDataClearStatus.set_pif_clear_radar_data_spi_fifo_overflow(self, value)
  def __get__pif_clear_radar_data_spi_fifo_overflow(self): return PifRadarDataClearStatus.get_pif_clear_radar_data_spi_fifo_overflow(self)
  pif_clear_radar_data_spi_fifo_overflow = property(__get__pif_clear_radar_data_spi_fifo_overflow,__set__pif_clear_radar_data_spi_fifo_overflow,None,'')

  def __set__pif_clear_radar_data_spi_fifo_underflow(self,value): PifRadarDataClearStatus.set_pif_clear_radar_data_spi_fifo_underflow(self, value)
  def __get__pif_clear_radar_data_spi_fifo_underflow(self): return PifRadarDataClearStatus.get_pif_clear_radar_data_spi_fifo_underflow(self)
  pif_clear_radar_data_spi_fifo_underflow = property(__get__pif_clear_radar_data_spi_fifo_underflow,__set__pif_clear_radar_data_spi_fifo_underflow,None,'')

  def __set__pif_radar_data0_fifo_overflow(self,value): PifRadarData0FifoStatus.set_pif_radar_data0_fifo_overflow(self, value)
  def __get__pif_radar_data0_fifo_overflow(self): return PifRadarData0FifoStatus.get_pif_radar_data0_fifo_overflow(self)
  pif_radar_data0_fifo_overflow = property(__get__pif_radar_data0_fifo_overflow,__set__pif_radar_data0_fifo_overflow,None,'')

  def __set__pif_radar_data0_fifo_underflow(self,value): PifRadarData0FifoStatus.set_pif_radar_data0_fifo_underflow(self, value)
  def __get__pif_radar_data0_fifo_underflow(self): return PifRadarData0FifoStatus.get_pif_radar_data0_fifo_underflow(self)
  pif_radar_data0_fifo_underflow = property(__get__pif_radar_data0_fifo_underflow,__set__pif_radar_data0_fifo_underflow,None,'')

  def __set__pif_fifo_ram_word0_overflow(self,value): PifRadarData0FifoStatus.set_pif_fifo_ram_word0_overflow(self, value)
  def __get__pif_fifo_ram_word0_overflow(self): return PifRadarData0FifoStatus.get_pif_fifo_ram_word0_overflow(self)
  pif_fifo_ram_word0_overflow = property(__get__pif_fifo_ram_word0_overflow,__set__pif_fifo_ram_word0_overflow,None,'')

  def __set__pif_fifo_ram_word0_underflow(self,value): PifRadarData0FifoStatus.set_pif_fifo_ram_word0_underflow(self, value)
  def __get__pif_fifo_ram_word0_underflow(self): return PifRadarData0FifoStatus.get_pif_fifo_ram_word0_underflow(self)
  pif_fifo_ram_word0_underflow = property(__get__pif_fifo_ram_word0_underflow,__set__pif_fifo_ram_word0_underflow,None,'')

  def __set__pif_fifo_sample0_overflow(self,value): PifRadarData0FifoStatus.set_pif_fifo_sample0_overflow(self, value)
  def __get__pif_fifo_sample0_overflow(self): return PifRadarData0FifoStatus.get_pif_fifo_sample0_overflow(self)
  pif_fifo_sample0_overflow = property(__get__pif_fifo_sample0_overflow,__set__pif_fifo_sample0_overflow,None,'')

  def __set__pif_fifo_sample0_underflow(self,value): PifRadarData0FifoStatus.set_pif_fifo_sample0_underflow(self, value)
  def __get__pif_fifo_sample0_underflow(self): return PifRadarData0FifoStatus.get_pif_fifo_sample0_underflow(self)
  pif_fifo_sample0_underflow = property(__get__pif_fifo_sample0_underflow,__set__pif_fifo_sample0_underflow,None,'')

  def __set__pif_clear_radar_data0_fifo_overflow(self,value): PifRadarData0ClearStatus.set_pif_clear_radar_data0_fifo_overflow(self, value)
  def __get__pif_clear_radar_data0_fifo_overflow(self): return PifRadarData0ClearStatus.get_pif_clear_radar_data0_fifo_overflow(self)
  pif_clear_radar_data0_fifo_overflow = property(__get__pif_clear_radar_data0_fifo_overflow,__set__pif_clear_radar_data0_fifo_overflow,None,'')

  def __set__pif_clear_radar_data0_fifo_underflow(self,value): PifRadarData0ClearStatus.set_pif_clear_radar_data0_fifo_underflow(self, value)
  def __get__pif_clear_radar_data0_fifo_underflow(self): return PifRadarData0ClearStatus.get_pif_clear_radar_data0_fifo_underflow(self)
  pif_clear_radar_data0_fifo_underflow = property(__get__pif_clear_radar_data0_fifo_underflow,__set__pif_clear_radar_data0_fifo_underflow,None,'')

  def __set__pif_clear_fifo_ram_word0_overflow(self,value): PifRadarData0ClearStatus.set_pif_clear_fifo_ram_word0_overflow(self, value)
  def __get__pif_clear_fifo_ram_word0_overflow(self): return PifRadarData0ClearStatus.get_pif_clear_fifo_ram_word0_overflow(self)
  pif_clear_fifo_ram_word0_overflow = property(__get__pif_clear_fifo_ram_word0_overflow,__set__pif_clear_fifo_ram_word0_overflow,None,'')

  def __set__pif_clear_fifo_ram_word0_underflow(self,value): PifRadarData0ClearStatus.set_pif_clear_fifo_ram_word0_underflow(self, value)
  def __get__pif_clear_fifo_ram_word0_underflow(self): return PifRadarData0ClearStatus.get_pif_clear_fifo_ram_word0_underflow(self)
  pif_clear_fifo_ram_word0_underflow = property(__get__pif_clear_fifo_ram_word0_underflow,__set__pif_clear_fifo_ram_word0_underflow,None,'')

  def __set__pif_clear_fifo_sample0_overflow(self,value): PifRadarData0ClearStatus.set_pif_clear_fifo_sample0_overflow(self, value)
  def __get__pif_clear_fifo_sample0_overflow(self): return PifRadarData0ClearStatus.get_pif_clear_fifo_sample0_overflow(self)
  pif_clear_fifo_sample0_overflow = property(__get__pif_clear_fifo_sample0_overflow,__set__pif_clear_fifo_sample0_overflow,None,'')

  def __set__pif_clear_fifo_sample0_underflow(self,value): PifRadarData0ClearStatus.set_pif_clear_fifo_sample0_underflow(self, value)
  def __get__pif_clear_fifo_sample0_underflow(self): return PifRadarData0ClearStatus.get_pif_clear_fifo_sample0_underflow(self)
  pif_clear_fifo_sample0_underflow = property(__get__pif_clear_fifo_sample0_underflow,__set__pif_clear_fifo_sample0_underflow,None,'')

  def __set__pif_radar_data1_fifo_overflow(self,value): PifRadarData1FifoStatus.set_pif_radar_data1_fifo_overflow(self, value)
  def __get__pif_radar_data1_fifo_overflow(self): return PifRadarData1FifoStatus.get_pif_radar_data1_fifo_overflow(self)
  pif_radar_data1_fifo_overflow = property(__get__pif_radar_data1_fifo_overflow,__set__pif_radar_data1_fifo_overflow,None,'')

  def __set__pif_radar_data1_fifo_underflow(self,value): PifRadarData1FifoStatus.set_pif_radar_data1_fifo_underflow(self, value)
  def __get__pif_radar_data1_fifo_underflow(self): return PifRadarData1FifoStatus.get_pif_radar_data1_fifo_underflow(self)
  pif_radar_data1_fifo_underflow = property(__get__pif_radar_data1_fifo_underflow,__set__pif_radar_data1_fifo_underflow,None,'')

  def __set__pif_fifo_ram_word1_overflow(self,value): PifRadarData1FifoStatus.set_pif_fifo_ram_word1_overflow(self, value)
  def __get__pif_fifo_ram_word1_overflow(self): return PifRadarData1FifoStatus.get_pif_fifo_ram_word1_overflow(self)
  pif_fifo_ram_word1_overflow = property(__get__pif_fifo_ram_word1_overflow,__set__pif_fifo_ram_word1_overflow,None,'')

  def __set__pif_fifo_ram_word1_underflow(self,value): PifRadarData1FifoStatus.set_pif_fifo_ram_word1_underflow(self, value)
  def __get__pif_fifo_ram_word1_underflow(self): return PifRadarData1FifoStatus.get_pif_fifo_ram_word1_underflow(self)
  pif_fifo_ram_word1_underflow = property(__get__pif_fifo_ram_word1_underflow,__set__pif_fifo_ram_word1_underflow,None,'')

  def __set__pif_fifo_sample1_overflow(self,value): PifRadarData1FifoStatus.set_pif_fifo_sample1_overflow(self, value)
  def __get__pif_fifo_sample1_overflow(self): return PifRadarData1FifoStatus.get_pif_fifo_sample1_overflow(self)
  pif_fifo_sample1_overflow = property(__get__pif_fifo_sample1_overflow,__set__pif_fifo_sample1_overflow,None,'')

  def __set__pif_fifo_sample1_underflow(self,value): PifRadarData1FifoStatus.set_pif_fifo_sample1_underflow(self, value)
  def __get__pif_fifo_sample1_underflow(self): return PifRadarData1FifoStatus.get_pif_fifo_sample1_underflow(self)
  pif_fifo_sample1_underflow = property(__get__pif_fifo_sample1_underflow,__set__pif_fifo_sample1_underflow,None,'')

  def __set__pif_clear_radar_data1_fifo_overflow(self,value): PifRadarData1ClearStatus.set_pif_clear_radar_data1_fifo_overflow(self, value)
  def __get__pif_clear_radar_data1_fifo_overflow(self): return PifRadarData1ClearStatus.get_pif_clear_radar_data1_fifo_overflow(self)
  pif_clear_radar_data1_fifo_overflow = property(__get__pif_clear_radar_data1_fifo_overflow,__set__pif_clear_radar_data1_fifo_overflow,None,'')

  def __set__pif_clear_radar_data1_fifo_underflow(self,value): PifRadarData1ClearStatus.set_pif_clear_radar_data1_fifo_underflow(self, value)
  def __get__pif_clear_radar_data1_fifo_underflow(self): return PifRadarData1ClearStatus.get_pif_clear_radar_data1_fifo_underflow(self)
  pif_clear_radar_data1_fifo_underflow = property(__get__pif_clear_radar_data1_fifo_underflow,__set__pif_clear_radar_data1_fifo_underflow,None,'')

  def __set__pif_clear_fifo_ram_word1_overflow(self,value): PifRadarData1ClearStatus.set_pif_clear_fifo_ram_word1_overflow(self, value)
  def __get__pif_clear_fifo_ram_word1_overflow(self): return PifRadarData1ClearStatus.get_pif_clear_fifo_ram_word1_overflow(self)
  pif_clear_fifo_ram_word1_overflow = property(__get__pif_clear_fifo_ram_word1_overflow,__set__pif_clear_fifo_ram_word1_overflow,None,'')

  def __set__pif_clear_fifo_ram_word1_underflow(self,value): PifRadarData1ClearStatus.set_pif_clear_fifo_ram_word1_underflow(self, value)
  def __get__pif_clear_fifo_ram_word1_underflow(self): return PifRadarData1ClearStatus.get_pif_clear_fifo_ram_word1_underflow(self)
  pif_clear_fifo_ram_word1_underflow = property(__get__pif_clear_fifo_ram_word1_underflow,__set__pif_clear_fifo_ram_word1_underflow,None,'')

  def __set__pif_clear_fifo_sample1_overflow(self,value): PifRadarData1ClearStatus.set_pif_clear_fifo_sample1_overflow(self, value)
  def __get__pif_clear_fifo_sample1_overflow(self): return PifRadarData1ClearStatus.get_pif_clear_fifo_sample1_overflow(self)
  pif_clear_fifo_sample1_overflow = property(__get__pif_clear_fifo_sample1_overflow,__set__pif_clear_fifo_sample1_overflow,None,'')

  def __set__pif_clear_fifo_sample1_underflow(self,value): PifRadarData1ClearStatus.set_pif_clear_fifo_sample1_underflow(self, value)
  def __get__pif_clear_fifo_sample1_underflow(self): return PifRadarData1ClearStatus.get_pif_clear_fifo_sample1_underflow(self)
  pif_clear_fifo_sample1_underflow = property(__get__pif_clear_fifo_sample1_underflow,__set__pif_clear_fifo_sample1_underflow,None,'')

  def __set__ram_select(self,value): RamSelect.set_ram_select(self, value)
  def __get__ram_select(self): return RamSelect.get_ram_select(self)
  ram_select = property(__get__ram_select,__set__ram_select,None,'')

  def __set__radar_readout_idle(self,value): RadarReadoutIdle.set_radar_readout_idle(self, value)
  def __get__radar_readout_idle(self): return RadarReadoutIdle.get_radar_readout_idle(self)
  radar_readout_idle = property(__get__radar_readout_idle,__set__radar_readout_idle,None,'')

  def __set__trx_clocks_per_pulse(self,value): TrxClocksPerPulse.set_trx_clocks_per_pulse(self, value)
  def __get__trx_clocks_per_pulse(self): return TrxClocksPerPulse.get_trx_clocks_per_pulse(self)
  trx_clocks_per_pulse = property(__get__trx_clocks_per_pulse,__set__trx_clocks_per_pulse,None,'')

  def __set__rx_mframes_coarse(self,value): RxMframesCoarse.set_rx_mframes_coarse(self, value)
  def __get__rx_mframes_coarse(self): return RxMframesCoarse.get_rx_mframes_coarse(self)
  rx_mframes_coarse = property(__get__rx_mframes_coarse,__set__rx_mframes_coarse,None,'')

  def __set__trx_pulses_per_step_msb(self,value): TrxPulsesPerStepMsb.set_trx_pulses_per_step_msb(self, value)
  def __get__trx_pulses_per_step_msb(self): return TrxPulsesPerStepMsb.get_trx_pulses_per_step_msb(self)
  trx_pulses_per_step_msb = property(__get__trx_pulses_per_step_msb,__set__trx_pulses_per_step_msb,None,'')

  def __set__trx_pulses_per_step_lsb(self,value): TrxPulsesPerStepLsb.set_trx_pulses_per_step_lsb(self, value)
  def __get__trx_pulses_per_step_lsb(self): return TrxPulsesPerStepLsb.get_trx_pulses_per_step_lsb(self)
  trx_pulses_per_step_lsb = property(__get__trx_pulses_per_step_lsb,__set__trx_pulses_per_step_lsb,None,'')

  def __set__trx_dac_max_h(self,value): TrxDacMaxH.set_trx_dac_max_h(self, value)
  def __get__trx_dac_max_h(self): return TrxDacMaxH.get_trx_dac_max_h(self)
  trx_dac_max_h = property(__get__trx_dac_max_h,__set__trx_dac_max_h,None,'')

  def __set__trx_dac_max_l(self,value): TrxDacMaxL.set_trx_dac_max_l(self, value)
  def __get__trx_dac_max_l(self): return TrxDacMaxL.get_trx_dac_max_l(self)
  trx_dac_max_l = property(__get__trx_dac_max_l,__set__trx_dac_max_l,None,'')

  def __set__trx_dac_min_h(self,value): TrxDacMinH.set_trx_dac_min_h(self, value)
  def __get__trx_dac_min_h(self): return TrxDacMinH.get_trx_dac_min_h(self)
  trx_dac_min_h = property(__get__trx_dac_min_h,__set__trx_dac_min_h,None,'')

  def __set__trx_dac_min_l(self,value): TrxDacMinL.set_trx_dac_min_l(self, value)
  def __get__trx_dac_min_l(self): return TrxDacMinL.get_trx_dac_min_l(self)
  trx_dac_min_l = property(__get__trx_dac_min_l,__set__trx_dac_min_l,None,'')

  def __set__trx_auto_bidir_enable(self,value): TrxDacStep.set_trx_auto_bidir_enable(self, value)
  def __get__trx_auto_bidir_enable(self): return TrxDacStep.get_trx_auto_bidir_enable(self)
  trx_auto_bidir_enable = property(__get__trx_auto_bidir_enable,__set__trx_auto_bidir_enable,None,'')

  def __set__trx_sweep_phase(self,value): TrxDacStep.set_trx_sweep_phase(self, value)
  def __get__trx_sweep_phase(self): return TrxDacStep.get_trx_sweep_phase(self)
  trx_sweep_phase = property(__get__trx_sweep_phase,__set__trx_sweep_phase,None,'')

  def __set__trx_dac_settle_clog2(self,value): TrxDacStep.set_trx_dac_settle_clog2(self, value)
  def __get__trx_dac_settle_clog2(self): return TrxDacStep.get_trx_dac_settle_clog2(self)
  trx_dac_settle_clog2 = property(__get__trx_dac_settle_clog2,__set__trx_dac_settle_clog2,None,'')

  def __set__trx_dac_step_clog2(self,value): TrxDacStep.set_trx_dac_step_clog2(self, value)
  def __get__trx_dac_step_clog2(self): return TrxDacStep.get_trx_dac_step_clog2(self)
  trx_dac_step_clog2 = property(__get__trx_dac_step_clog2,__set__trx_dac_step_clog2,None,'')

  def __set__trx_iterations(self,value): TrxIterations.set_trx_iterations(self, value)
  def __get__trx_iterations(self): return TrxIterations.get_trx_iterations(self)
  trx_iterations = property(__get__trx_iterations,__set__trx_iterations,None,'')

  def __set__trx_ctrl_done(self,value): TrxCtrlDone.set_trx_ctrl_done(self, value)
  def __get__trx_ctrl_done(self): return TrxCtrlDone.get_trx_ctrl_done(self)
  trx_ctrl_done = property(__get__trx_ctrl_done,__set__trx_ctrl_done,None,'')

  def __set__trx_backend_done(self,value): TrxBackendDone.set_trx_backend_done(self, value)
  def __get__trx_backend_done(self): return TrxBackendDone.get_trx_backend_done(self)
  trx_backend_done = property(__get__trx_backend_done,__set__trx_backend_done,None,'')

  def __set__tx_strobe_enable(self,value): TrxCtrlMode.set_tx_strobe_enable(self, value)
  def __get__tx_strobe_enable(self): return TrxCtrlMode.get_tx_strobe_enable(self)
  tx_strobe_enable = property(__get__tx_strobe_enable,__set__tx_strobe_enable,None,'')

  def __set__rx_strobe_enable(self,value): TrxCtrlMode.set_rx_strobe_enable(self, value)
  def __get__rx_strobe_enable(self): return TrxCtrlMode.get_rx_strobe_enable(self)
  rx_strobe_enable = property(__get__rx_strobe_enable,__set__rx_strobe_enable,None,'')

  def __set__trx_phase_override(self,value): TrxCtrlMode.set_trx_phase_override(self, value)
  def __get__trx_phase_override(self): return TrxCtrlMode.get_trx_phase_override(self)
  trx_phase_override = property(__get__trx_phase_override,__set__trx_phase_override,None,'')

  def __set__trx_phase_override_val(self,value): TrxCtrlMode.set_trx_phase_override_val(self, value)
  def __get__trx_phase_override_val(self): return TrxCtrlMode.get_trx_phase_override_val(self)
  trx_phase_override_val = property(__get__trx_phase_override_val,__set__trx_phase_override_val,None,'')

  def __set__trx_send_every_pulse(self,value): TrxCtrlMode.set_trx_send_every_pulse(self, value)
  def __get__trx_send_every_pulse(self): return TrxCtrlMode.get_trx_send_every_pulse(self)
  trx_send_every_pulse = property(__get__trx_send_every_pulse,__set__trx_send_every_pulse,None,'')

  def __set__trx_constant_clocks_per_pulse(self,value): TrxCtrlMode.set_trx_constant_clocks_per_pulse(self, value)
  def __get__trx_constant_clocks_per_pulse(self): return TrxCtrlMode.get_trx_constant_clocks_per_pulse(self)
  trx_constant_clocks_per_pulse = property(__get__trx_constant_clocks_per_pulse,__set__trx_constant_clocks_per_pulse,None,'')

  def __set__trx_ctrl_slave_mode(self,value): TrxCtrlMode.set_trx_ctrl_slave_mode(self, value)
  def __get__trx_ctrl_slave_mode(self): return TrxCtrlMode.get_trx_ctrl_slave_mode(self)
  trx_ctrl_slave_mode = property(__get__trx_ctrl_slave_mode,__set__trx_ctrl_slave_mode,None,'')

  def __set__trx_start_sync_negedge(self,value): TrxCtrlMode.set_trx_start_sync_negedge(self, value)
  def __get__trx_start_sync_negedge(self): return TrxCtrlMode.get_trx_start_sync_negedge(self)
  trx_start_sync_negedge = property(__get__trx_start_sync_negedge,__set__trx_start_sync_negedge,None,'')

  def __set__trx_lfsr_taps_0(self,value): TrxLfsrTaps0.set_trx_lfsr_taps_0(self, value)
  def __get__trx_lfsr_taps_0(self): return TrxLfsrTaps0.get_trx_lfsr_taps_0(self)
  trx_lfsr_taps_0 = property(__get__trx_lfsr_taps_0,__set__trx_lfsr_taps_0,None,'')

  def __set__trx_lfsr_taps_1(self,value): TrxLfsrTaps1.set_trx_lfsr_taps_1(self, value)
  def __get__trx_lfsr_taps_1(self): return TrxLfsrTaps1.get_trx_lfsr_taps_1(self)
  trx_lfsr_taps_1 = property(__get__trx_lfsr_taps_1,__set__trx_lfsr_taps_1,None,'')

  def __set__noiseless_ghost_order(self,value): TrxLfsrTaps2.set_noiseless_ghost_order(self, value)
  def __get__noiseless_ghost_order(self): return TrxLfsrTaps2.get_noiseless_ghost_order(self)
  noiseless_ghost_order = property(__get__noiseless_ghost_order,__set__noiseless_ghost_order,None,'')

  def __set__trx_lfsr_taps_2(self,value): TrxLfsrTaps2.set_trx_lfsr_taps_2(self, value)
  def __get__trx_lfsr_taps_2(self): return TrxLfsrTaps2.get_trx_lfsr_taps_2(self)
  trx_lfsr_taps_2 = property(__get__trx_lfsr_taps_2,__set__trx_lfsr_taps_2,None,'')

  def __set__rx_wait(self,value): RxWait.set_rx_wait(self, value)
  def __get__rx_wait(self): return RxWait.get_rx_wait(self)
  rx_wait = property(__get__rx_wait,__set__rx_wait,None,'')

  def __set__tx_wait(self,value): TxWait.set_tx_wait(self, value)
  def __get__tx_wait(self): return TxWait.get_tx_wait(self)
  tx_wait = property(__get__tx_wait,__set__tx_wait,None,'')

  def __set__trx_dac_override_enable(self,value): TrxDacOverrideH.set_trx_dac_override_enable(self, value)
  def __get__trx_dac_override_enable(self): return TrxDacOverrideH.get_trx_dac_override_enable(self)
  trx_dac_override_enable = property(__get__trx_dac_override_enable,__set__trx_dac_override_enable,None,'')

  def __set__trx_dac_override_val_h(self,value): TrxDacOverrideH.set_trx_dac_override_val_h(self, value)
  def __get__trx_dac_override_val_h(self): return TrxDacOverrideH.get_trx_dac_override_val_h(self)
  trx_dac_override_val_h = property(__get__trx_dac_override_val_h,__set__trx_dac_override_val_h,None,'')

  def __set__trx_dac_override_val_l(self,value): TrxDacOverrideL.set_trx_dac_override_val_l(self, value)
  def __get__trx_dac_override_val_l(self): return TrxDacOverrideL.get_trx_dac_override_val_l(self)
  trx_dac_override_val_l = property(__get__trx_dac_override_val_l,__set__trx_dac_override_val_l,None,'')

  def __set__spi_master_clk_div(self,value): CpuSpiMasterClkCtrl.set_spi_master_clk_div(self, value)
  def __get__spi_master_clk_div(self): return CpuSpiMasterClkCtrl.get_spi_master_clk_div(self)
  spi_master_clk_div = property(__get__spi_master_clk_div,__set__spi_master_clk_div,None,'')

  def __set__spi_master_clk_sel(self,value): CpuSpiMasterClkCtrl.set_spi_master_clk_sel(self, value)
  def __get__spi_master_clk_sel(self): return CpuSpiMasterClkCtrl.get_spi_master_clk_sel(self)
  spi_master_clk_sel = property(__get__spi_master_clk_sel,__set__spi_master_clk_sel,None,'')

  def __set__cpuclk_div(self,value): CpuSpiMasterClkCtrl.set_cpuclk_div(self, value)
  def __get__cpuclk_div(self): return CpuSpiMasterClkCtrl.get_cpuclk_div(self)
  cpuclk_div = property(__get__cpuclk_div,__set__cpuclk_div,None,'')

  def __set__cpuclk_sel(self,value): CpuSpiMasterClkCtrl.set_cpuclk_sel(self, value)
  def __get__cpuclk_sel(self): return CpuSpiMasterClkCtrl.get_cpuclk_sel(self)
  cpuclk_sel = property(__get__cpuclk_sel,__set__cpuclk_sel,None,'')

  def __set__mclk_sel(self,value): MclkTrxBackendClkCtrl.set_mclk_sel(self, value)
  def __get__mclk_sel(self): return MclkTrxBackendClkCtrl.get_mclk_sel(self)
  mclk_sel = property(__get__mclk_sel,__set__mclk_sel,None,'')

  def __set__trx_backend_clk_prescale(self,value): MclkTrxBackendClkCtrl.set_trx_backend_clk_prescale(self, value)
  def __get__trx_backend_clk_prescale(self): return MclkTrxBackendClkCtrl.get_trx_backend_clk_prescale(self)
  trx_backend_clk_prescale = property(__get__trx_backend_clk_prescale,__set__trx_backend_clk_prescale,None,'')

  def __set__trx_backend_clk_div(self,value): MclkTrxBackendClkCtrl.set_trx_backend_clk_div(self, value)
  def __get__trx_backend_clk_div(self): return MclkTrxBackendClkCtrl.get_trx_backend_clk_div(self)
  trx_backend_clk_div = property(__get__trx_backend_clk_div,__set__trx_backend_clk_div,None,'')

  def __set__auxclk_sel(self,value): OscCtrl.set_auxclk_sel(self, value)
  def __get__auxclk_sel(self): return OscCtrl.get_auxclk_sel(self)
  auxclk_sel = property(__get__auxclk_sel,__set__auxclk_sel,None,'')

  def __set__sysclk_sel(self,value): OscCtrl.set_sysclk_sel(self, value)
  def __get__sysclk_sel(self): return OscCtrl.get_sysclk_sel(self)
  sysclk_sel = property(__get__sysclk_sel,__set__sysclk_sel,None,'')

  def __set__xosc_bypass(self,value): OscCtrl.set_xosc_bypass(self, value)
  def __get__xosc_bypass(self): return OscCtrl.get_xosc_bypass(self)
  xosc_bypass = property(__get__xosc_bypass,__set__xosc_bypass,None,'')

  def __set__xosc_dislvl(self,value): OscCtrl.set_xosc_dislvl(self, value)
  def __get__xosc_dislvl(self): return OscCtrl.get_xosc_dislvl(self)
  xosc_dislvl = property(__get__xosc_dislvl,__set__xosc_dislvl,None,'')

  def __set__xosc_discap(self,value): OscCtrl.set_xosc_discap(self, value)
  def __get__xosc_discap(self): return OscCtrl.get_xosc_discap(self)
  xosc_discap = property(__get__xosc_discap,__set__xosc_discap,None,'')

  def __set__xosc_en(self,value): OscCtrl.set_xosc_en(self, value)
  def __get__xosc_en(self): return OscCtrl.get_xosc_en(self)
  xosc_en = property(__get__xosc_en,__set__xosc_en,None,'')

  def __set__lpclk_disable(self,value): OscCtrl.set_lpclk_disable(self, value)
  def __get__lpclk_disable(self): return OscCtrl.get_lpclk_disable(self)
  lpclk_disable = property(__get__lpclk_disable,__set__lpclk_disable,None,'')

  def __set__spiclk_ren(self,value): IoCtrl1.set_spiclk_ren(self, value)
  def __get__spiclk_ren(self): return IoCtrl1.get_spiclk_ren(self)
  spiclk_ren = property(__get__spiclk_ren,__set__spiclk_ren,None,'')

  def __set__spio_ren(self,value): IoCtrl1.set_spio_ren(self, value)
  def __get__spio_ren(self): return IoCtrl1.get_spio_ren(self)
  spio_ren = property(__get__spio_ren,__set__spio_ren,None,'')

  def __set__io_ren(self,value): IoCtrl1.set_io_ren(self, value)
  def __get__io_ren(self): return IoCtrl1.get_io_ren(self)
  io_ren = property(__get__io_ren,__set__io_ren,None,'')

  def __set__lvds_rt_cal(self,value): IoCtrl2.set_lvds_rt_cal(self, value)
  def __get__lvds_rt_cal(self): return IoCtrl2.get_lvds_rt_cal(self)
  lvds_rt_cal = property(__get__lvds_rt_cal,__set__lvds_rt_cal,None,'')

  def __set__lvds_rt_en(self,value): IoCtrl2.set_lvds_rt_en(self, value)
  def __get__lvds_rt_en(self): return IoCtrl2.get_lvds_rt_en(self)
  lvds_rt_en = property(__get__lvds_rt_en,__set__lvds_rt_en,None,'')

  def __set__lvcmos_schmitt_en(self,value): IoCtrl2.set_lvcmos_schmitt_en(self, value)
  def __get__lvcmos_schmitt_en(self): return IoCtrl2.get_lvcmos_schmitt_en(self)
  lvcmos_schmitt_en = property(__get__lvcmos_schmitt_en,__set__lvcmos_schmitt_en,None,'')

  def __set__io6_lvcmos_ie(self,value): IoCtrl2.set_io6_lvcmos_ie(self, value)
  def __get__io6_lvcmos_ie(self): return IoCtrl2.get_io6_lvcmos_ie(self)
  io6_lvcmos_ie = property(__get__io6_lvcmos_ie,__set__io6_lvcmos_ie,None,'')

  def __set__io5_lvcmos_ie(self,value): IoCtrl2.set_io5_lvcmos_ie(self, value)
  def __get__io5_lvcmos_ie(self): return IoCtrl2.get_io5_lvcmos_ie(self)
  io5_lvcmos_ie = property(__get__io5_lvcmos_ie,__set__io5_lvcmos_ie,None,'')

  def __set__lvds_rx_en(self,value): IoCtrl2.set_lvds_rx_en(self, value)
  def __get__lvds_rx_en(self): return IoCtrl2.get_lvds_rx_en(self)
  lvds_rx_en = property(__get__lvds_rx_en,__set__lvds_rx_en,None,'')

  def __set__sub_lvds_en(self,value): IoCtrl2.set_sub_lvds_en(self, value)
  def __get__sub_lvds_en(self): return IoCtrl2.get_sub_lvds_en(self)
  sub_lvds_en = property(__get__sub_lvds_en,__set__sub_lvds_en,None,'')

  def __set__lvds_tx_en(self,value): IoCtrl3.set_lvds_tx_en(self, value)
  def __get__lvds_tx_en(self): return IoCtrl3.get_lvds_tx_en(self)
  lvds_tx_en = property(__get__lvds_tx_en,__set__lvds_tx_en,None,'')

  def __set__io_gpio_sel(self,value): IoCtrl3.set_io_gpio_sel(self, value)
  def __get__io_gpio_sel(self): return IoCtrl3.get_io_gpio_sel(self)
  io_gpio_sel = property(__get__io_gpio_sel,__set__io_gpio_sel,None,'')

  def __set__lvds_clkout_sel(self,value): IoCtrl4.set_lvds_clkout_sel(self, value)
  def __get__lvds_clkout_sel(self): return IoCtrl4.get_lvds_clkout_sel(self)
  lvds_clkout_sel = property(__get__lvds_clkout_sel,__set__lvds_clkout_sel,None,'')

  def __set__io6_clkout_sel(self,value): IoCtrl4.set_io6_clkout_sel(self, value)
  def __get__io6_clkout_sel(self): return IoCtrl4.get_io6_clkout_sel(self)
  io6_clkout_sel = property(__get__io6_clkout_sel,__set__io6_clkout_sel,None,'')

  def __set__io5_clkout_sel(self,value): IoCtrl4.set_io5_clkout_sel(self, value)
  def __get__io5_clkout_sel(self): return IoCtrl4.get_io5_clkout_sel(self)
  io5_clkout_sel = property(__get__io5_clkout_sel,__set__io5_clkout_sel,None,'')

  def __set__extclk_sel(self,value): IoCtrl4.set_extclk_sel(self, value)
  def __get__extclk_sel(self): return IoCtrl4.get_extclk_sel(self)
  extclk_sel = property(__get__extclk_sel,__set__extclk_sel,None,'')

  def __set__lvds_txdrv(self,value): IoCtrl4.set_lvds_txdrv(self, value)
  def __get__lvds_txdrv(self): return IoCtrl4.get_lvds_txdrv(self)
  lvds_txdrv = property(__get__lvds_txdrv,__set__lvds_txdrv,None,'')

  def __set__lvds_biastrim(self,value): IoCtrl4.set_lvds_biastrim(self, value)
  def __get__lvds_biastrim(self): return IoCtrl4.get_lvds_biastrim(self)
  lvds_biastrim = property(__get__lvds_biastrim,__set__lvds_biastrim,None,'')

  def __set__lpclk_trim(self,value): IoCtrl5.set_lpclk_trim(self, value)
  def __get__lpclk_trim(self): return IoCtrl5.get_lpclk_trim(self)
  lpclk_trim = property(__get__lpclk_trim,__set__lpclk_trim,None,'')

  def __set__io3_spi_sel(self,value): IoCtrl5.set_io3_spi_sel(self, value)
  def __get__io3_spi_sel(self): return IoCtrl5.get_io3_spi_sel(self)
  io3_spi_sel = property(__get__io3_spi_sel,__set__io3_spi_sel,None,'')

  def __set__trx_sync_source_sel(self,value): IoCtrl5.set_trx_sync_source_sel(self, value)
  def __get__trx_sync_source_sel(self): return IoCtrl5.get_trx_sync_source_sel(self)
  trx_sync_source_sel = property(__get__trx_sync_source_sel,__set__trx_sync_source_sel,None,'')

  def __set__io1_spi_sel(self,value): IoCtrl5.set_io1_spi_sel(self, value)
  def __get__io1_spi_sel(self): return IoCtrl5.get_io1_spi_sel(self)
  io1_spi_sel = property(__get__io1_spi_sel,__set__io1_spi_sel,None,'')

  def __set__io2_test_sel(self,value): IoCtrl6.set_io2_test_sel(self, value)
  def __get__io2_test_sel(self): return IoCtrl6.get_io2_test_sel(self)
  io2_test_sel = property(__get__io2_test_sel,__set__io2_test_sel,None,'')

  def __set__io6_clkout_oe(self,value): IoCtrl6.set_io6_clkout_oe(self, value)
  def __get__io6_clkout_oe(self): return IoCtrl6.get_io6_clkout_oe(self)
  io6_clkout_oe = property(__get__io6_clkout_oe,__set__io6_clkout_oe,None,'')

  def __set__io5_clkout_oe(self,value): IoCtrl6.set_io5_clkout_oe(self, value)
  def __get__io5_clkout_oe(self): return IoCtrl6.get_io5_clkout_oe(self)
  io5_clkout_oe = property(__get__io5_clkout_oe,__set__io5_clkout_oe,None,'')

  def __set__spi_mode_pif(self,value): SpiConfigPif.set_spi_mode_pif(self, value)
  def __get__spi_mode_pif(self): return SpiConfigPif.get_spi_mode_pif(self)
  spi_mode_pif = property(__get__spi_mode_pif,__set__spi_mode_pif,None,'')

  def __set__pif_to_cpu_fifo_overflow(self,value): PifMbFifoStatus.set_pif_to_cpu_fifo_overflow(self, value)
  def __get__pif_to_cpu_fifo_overflow(self): return PifMbFifoStatus.get_pif_to_cpu_fifo_overflow(self)
  pif_to_cpu_fifo_overflow = property(__get__pif_to_cpu_fifo_overflow,__set__pif_to_cpu_fifo_overflow,None,'')

  def __set__pif_to_cpu_fifo_underflow(self,value): PifMbFifoStatus.set_pif_to_cpu_fifo_underflow(self, value)
  def __get__pif_to_cpu_fifo_underflow(self): return PifMbFifoStatus.get_pif_to_cpu_fifo_underflow(self)
  pif_to_cpu_fifo_underflow = property(__get__pif_to_cpu_fifo_underflow,__set__pif_to_cpu_fifo_underflow,None,'')

  def __set__pif_from_cpu_fifo_overflow(self,value): PifMbFifoStatus.set_pif_from_cpu_fifo_overflow(self, value)
  def __get__pif_from_cpu_fifo_overflow(self): return PifMbFifoStatus.get_pif_from_cpu_fifo_overflow(self)
  pif_from_cpu_fifo_overflow = property(__get__pif_from_cpu_fifo_overflow,__set__pif_from_cpu_fifo_overflow,None,'')

  def __set__pif_from_cpu_fifo_underflow(self,value): PifMbFifoStatus.set_pif_from_cpu_fifo_underflow(self, value)
  def __get__pif_from_cpu_fifo_underflow(self): return PifMbFifoStatus.get_pif_from_cpu_fifo_underflow(self)
  pif_from_cpu_fifo_underflow = property(__get__pif_from_cpu_fifo_underflow,__set__pif_from_cpu_fifo_underflow,None,'')

  def __set__from_cpu_fifo_empty(self,value): PifMbFifoStatus.set_from_cpu_fifo_empty(self, value)
  def __get__from_cpu_fifo_empty(self): return PifMbFifoStatus.get_from_cpu_fifo_empty(self)
  from_cpu_fifo_empty = property(__get__from_cpu_fifo_empty,__set__from_cpu_fifo_empty,None,'')

  def __set__to_cpu_data_valid(self,value): PifMbFifoStatus.set_to_cpu_data_valid(self, value)
  def __get__to_cpu_data_valid(self): return PifMbFifoStatus.get_to_cpu_data_valid(self)
  to_cpu_data_valid = property(__get__to_cpu_data_valid,__set__to_cpu_data_valid,None,'')

  def __set__from_cpu_fifo_full(self,value): PifMbFifoStatus.set_from_cpu_fifo_full(self, value)
  def __get__from_cpu_fifo_full(self): return PifMbFifoStatus.get_from_cpu_fifo_full(self)
  from_cpu_fifo_full = property(__get__from_cpu_fifo_full,__set__from_cpu_fifo_full,None,'')

  def __set__to_cpu_read_data(self,value): ToCpuReadData.set_to_cpu_read_data(self, value)
  def __get__to_cpu_read_data(self): return ToCpuReadData.get_to_cpu_read_data(self)
  to_cpu_read_data = property(__get__to_cpu_read_data,__set__to_cpu_read_data,None,'')

  def __set__from_cpu_write_data(self,value): FromCpuWriteData.set_from_cpu_write_data(self, value)
  def __get__from_cpu_write_data(self): return FromCpuWriteData.get_from_cpu_write_data(self)
  from_cpu_write_data = property(__get__from_cpu_write_data,__set__from_cpu_write_data,None,'')

  def __set__pif_clear_to_cpu_fifo_overflow(self,value): PifMbClearStatus.set_pif_clear_to_cpu_fifo_overflow(self, value)
  def __get__pif_clear_to_cpu_fifo_overflow(self): return PifMbClearStatus.get_pif_clear_to_cpu_fifo_overflow(self)
  pif_clear_to_cpu_fifo_overflow = property(__get__pif_clear_to_cpu_fifo_overflow,__set__pif_clear_to_cpu_fifo_overflow,None,'')

  def __set__pif_clear_to_cpu_fifo_underflow(self,value): PifMbClearStatus.set_pif_clear_to_cpu_fifo_underflow(self, value)
  def __get__pif_clear_to_cpu_fifo_underflow(self): return PifMbClearStatus.get_pif_clear_to_cpu_fifo_underflow(self)
  pif_clear_to_cpu_fifo_underflow = property(__get__pif_clear_to_cpu_fifo_underflow,__set__pif_clear_to_cpu_fifo_underflow,None,'')

  def __set__pif_clear_from_cpu_fifo_overflow(self,value): PifMbClearStatus.set_pif_clear_from_cpu_fifo_overflow(self, value)
  def __get__pif_clear_from_cpu_fifo_overflow(self): return PifMbClearStatus.get_pif_clear_from_cpu_fifo_overflow(self)
  pif_clear_from_cpu_fifo_overflow = property(__get__pif_clear_from_cpu_fifo_overflow,__set__pif_clear_from_cpu_fifo_overflow,None,'')

  def __set__pif_clear_from_cpu_fifo_underflow(self,value): PifMbClearStatus.set_pif_clear_from_cpu_fifo_underflow(self, value)
  def __get__pif_clear_from_cpu_fifo_underflow(self): return PifMbClearStatus.get_pif_clear_from_cpu_fifo_underflow(self)
  pif_clear_from_cpu_fifo_underflow = property(__get__pif_clear_from_cpu_fifo_underflow,__set__pif_clear_from_cpu_fifo_underflow,None,'')

  def __set__pif_to_mem_fifo_overflow(self,value): PifMemFifoStatus.set_pif_to_mem_fifo_overflow(self, value)
  def __get__pif_to_mem_fifo_overflow(self): return PifMemFifoStatus.get_pif_to_mem_fifo_overflow(self)
  pif_to_mem_fifo_overflow = property(__get__pif_to_mem_fifo_overflow,__set__pif_to_mem_fifo_overflow,None,'')

  def __set__pif_to_mem_fifo_underflow(self,value): PifMemFifoStatus.set_pif_to_mem_fifo_underflow(self, value)
  def __get__pif_to_mem_fifo_underflow(self): return PifMemFifoStatus.get_pif_to_mem_fifo_underflow(self)
  pif_to_mem_fifo_underflow = property(__get__pif_to_mem_fifo_underflow,__set__pif_to_mem_fifo_underflow,None,'')

  def __set__pif_from_mem_fifo_overflow(self,value): PifMemFifoStatus.set_pif_from_mem_fifo_overflow(self, value)
  def __get__pif_from_mem_fifo_overflow(self): return PifMemFifoStatus.get_pif_from_mem_fifo_overflow(self)
  pif_from_mem_fifo_overflow = property(__get__pif_from_mem_fifo_overflow,__set__pif_from_mem_fifo_overflow,None,'')

  def __set__pif_from_mem_fifo_underflow(self,value): PifMemFifoStatus.set_pif_from_mem_fifo_underflow(self, value)
  def __get__pif_from_mem_fifo_underflow(self): return PifMemFifoStatus.get_pif_from_mem_fifo_underflow(self)
  pif_from_mem_fifo_underflow = property(__get__pif_from_mem_fifo_underflow,__set__pif_from_mem_fifo_underflow,None,'')

  def __set__pif_clear_to_mem_fifo_overflow(self,value): PifMemClearStatus.set_pif_clear_to_mem_fifo_overflow(self, value)
  def __get__pif_clear_to_mem_fifo_overflow(self): return PifMemClearStatus.get_pif_clear_to_mem_fifo_overflow(self)
  pif_clear_to_mem_fifo_overflow = property(__get__pif_clear_to_mem_fifo_overflow,__set__pif_clear_to_mem_fifo_overflow,None,'')

  def __set__pif_clear_to_mem_fifo_underflow(self,value): PifMemClearStatus.set_pif_clear_to_mem_fifo_underflow(self, value)
  def __get__pif_clear_to_mem_fifo_underflow(self): return PifMemClearStatus.get_pif_clear_to_mem_fifo_underflow(self)
  pif_clear_to_mem_fifo_underflow = property(__get__pif_clear_to_mem_fifo_underflow,__set__pif_clear_to_mem_fifo_underflow,None,'')

  def __set__pif_clear_from_mem_fifo_overflow(self,value): PifMemClearStatus.set_pif_clear_from_mem_fifo_overflow(self, value)
  def __get__pif_clear_from_mem_fifo_overflow(self): return PifMemClearStatus.get_pif_clear_from_mem_fifo_overflow(self)
  pif_clear_from_mem_fifo_overflow = property(__get__pif_clear_from_mem_fifo_overflow,__set__pif_clear_from_mem_fifo_overflow,None,'')

  def __set__pif_clear_from_mem_fifo_underflow(self,value): PifMemClearStatus.set_pif_clear_from_mem_fifo_underflow(self, value)
  def __get__pif_clear_from_mem_fifo_underflow(self): return PifMemClearStatus.get_pif_clear_from_mem_fifo_underflow(self)
  pif_clear_from_mem_fifo_underflow = property(__get__pif_clear_from_mem_fifo_underflow,__set__pif_clear_from_mem_fifo_underflow,None,'')

  def __set__spi_master_send(self,value): SpiMasterSend.set_spi_master_send(self, value)
  def __get__spi_master_send(self): return SpiMasterSend.get_spi_master_send(self)
  spi_master_send = property(__get__spi_master_send,__set__spi_master_send,None,'')

  def __set__spi_master_nss(self,value): SpiMasterIdle.set_spi_master_nss(self, value)
  def __get__spi_master_nss(self): return SpiMasterIdle.get_spi_master_nss(self)
  spi_master_nss = property(__get__spi_master_nss,__set__spi_master_nss,None,'')

  def __set__spi_master_idle(self,value): SpiMasterIdle.set_spi_master_idle(self, value)
  def __get__spi_master_idle(self): return SpiMasterIdle.get_spi_master_idle(self)
  spi_master_idle = property(__get__spi_master_idle,__set__spi_master_idle,None,'')

  def __set__spi_master_radar_burst_size_msb(self,value): SpiMasterMode.set_spi_master_radar_burst_size_msb(self, value)
  def __get__spi_master_radar_burst_size_msb(self): return SpiMasterMode.get_spi_master_radar_burst_size_msb(self)
  spi_master_radar_burst_size_msb = property(__get__spi_master_radar_burst_size_msb,__set__spi_master_radar_burst_size_msb,None,'')

  def __set__spi_slave_sel(self,value): SpiMasterMode.set_spi_slave_sel(self, value)
  def __get__spi_slave_sel(self): return SpiMasterMode.get_spi_slave_sel(self)
  spi_slave_sel = property(__get__spi_slave_sel,__set__spi_slave_sel,None,'')

  def __set__spi_master_mode(self,value): SpiMasterMode.set_spi_master_mode(self, value)
  def __get__spi_master_mode(self): return SpiMasterMode.get_spi_master_mode(self)
  spi_master_mode = property(__get__spi_master_mode,__set__spi_master_mode,None,'')

  def __set__spi_master_radar_burst_size_lsb(self,value): SpiMasterRadarBurstSizeLsb.set_spi_master_radar_burst_size_lsb(self, value)
  def __get__spi_master_radar_burst_size_lsb(self): return SpiMasterRadarBurstSizeLsb.get_spi_master_radar_burst_size_lsb(self)
  spi_master_radar_burst_size_lsb = property(__get__spi_master_radar_burst_size_lsb,__set__spi_master_radar_burst_size_lsb,None,'')

  def __set__otp_ctrl_load(self,value): OtpCtrl.set_otp_ctrl_load(self, value)
  def __get__otp_ctrl_load(self): return OtpCtrl.get_otp_ctrl_load(self)
  otp_ctrl_load = property(__get__otp_ctrl_load,__set__otp_ctrl_load,None,'')

  def __set__boot_from_otp_pif(self,value): BootFromOtpPif.set_boot_from_otp_pif(self, value)
  def __get__boot_from_otp_pif(self): return BootFromOtpPif.get_boot_from_otp_pif(self)
  boot_from_otp_pif = property(__get__boot_from_otp_pif,__set__boot_from_otp_pif,None,'')

  def __set__rx_pll_fbdiv(self,value): RxPllCtrl1.set_rx_pll_fbdiv(self, value)
  def __get__rx_pll_fbdiv(self): return RxPllCtrl1.get_rx_pll_fbdiv(self)
  rx_pll_fbdiv = property(__get__rx_pll_fbdiv,__set__rx_pll_fbdiv,None,'')

  def __set__rx_pll_foutt_sel(self,value): RxPllCtrl1.set_rx_pll_foutt_sel(self, value)
  def __get__rx_pll_foutt_sel(self): return RxPllCtrl1.get_rx_pll_foutt_sel(self)
  rx_pll_foutt_sel = property(__get__rx_pll_foutt_sel,__set__rx_pll_foutt_sel,None,'')

  def __set__rx_pll_postdiv(self,value): RxPllCtrl2.set_rx_pll_postdiv(self, value)
  def __get__rx_pll_postdiv(self): return RxPllCtrl2.get_rx_pll_postdiv(self)
  rx_pll_postdiv = property(__get__rx_pll_postdiv,__set__rx_pll_postdiv,None,'')

  def __set__rx_pll_powerdown(self,value): RxPllCtrl2.set_rx_pll_powerdown(self, value)
  def __get__rx_pll_powerdown(self): return RxPllCtrl2.get_rx_pll_powerdown(self)
  rx_pll_powerdown = property(__get__rx_pll_powerdown,__set__rx_pll_powerdown,None,'')

  def __set__rx_pll_powerdown_foutdiv(self,value): RxPllCtrl2.set_rx_pll_powerdown_foutdiv(self, value)
  def __get__rx_pll_powerdown_foutdiv(self): return RxPllCtrl2.get_rx_pll_powerdown_foutdiv(self)
  rx_pll_powerdown_foutdiv = property(__get__rx_pll_powerdown_foutdiv,__set__rx_pll_powerdown_foutdiv,None,'')

  def __set__rx_pll_powerdown_foutt(self,value): RxPllCtrl2.set_rx_pll_powerdown_foutt(self, value)
  def __get__rx_pll_powerdown_foutt(self): return RxPllCtrl2.get_rx_pll_powerdown_foutt(self)
  rx_pll_powerdown_foutt = property(__get__rx_pll_powerdown_foutt,__set__rx_pll_powerdown_foutt,None,'')

  def __set__rx_pll_skewfastcal(self,value): RxPllSkewCtrl.set_rx_pll_skewfastcal(self, value)
  def __get__rx_pll_skewfastcal(self): return RxPllSkewCtrl.get_rx_pll_skewfastcal(self)
  rx_pll_skewfastcal = property(__get__rx_pll_skewfastcal,__set__rx_pll_skewfastcal,None,'')

  def __set__rx_pll_skewcalcnt(self,value): RxPllSkewCtrl.set_rx_pll_skewcalcnt(self, value)
  def __get__rx_pll_skewcalcnt(self): return RxPllSkewCtrl.get_rx_pll_skewcalcnt(self)
  rx_pll_skewcalcnt = property(__get__rx_pll_skewcalcnt,__set__rx_pll_skewcalcnt,None,'')

  def __set__rx_pll_skewcalbyp(self,value): RxPllSkewCtrl.set_rx_pll_skewcalbyp(self, value)
  def __get__rx_pll_skewcalbyp(self): return RxPllSkewCtrl.get_rx_pll_skewcalbyp(self)
  rx_pll_skewcalbyp = property(__get__rx_pll_skewcalbyp,__set__rx_pll_skewcalbyp,None,'')

  def __set__rx_pll_skewcalen(self,value): RxPllSkewCtrl.set_rx_pll_skewcalen(self, value)
  def __get__rx_pll_skewcalen(self): return RxPllSkewCtrl.get_rx_pll_skewcalen(self)
  rx_pll_skewcalen = property(__get__rx_pll_skewcalen,__set__rx_pll_skewcalen,None,'')

  def __set__rx_pll_skewcalin(self,value): RxPllSkewcalin.set_rx_pll_skewcalin(self, value)
  def __get__rx_pll_skewcalin(self): return RxPllSkewcalin.get_rx_pll_skewcalin(self)
  rx_pll_skewcalin = property(__get__rx_pll_skewcalin,__set__rx_pll_skewcalin,None,'')

  def __set__rx_pll_lock(self,value): RxPllStatus.set_rx_pll_lock(self, value)
  def __get__rx_pll_lock(self): return RxPllStatus.get_rx_pll_lock(self)
  rx_pll_lock = property(__get__rx_pll_lock,__set__rx_pll_lock,None,'')

  def __set__rx_pll_skewcalout(self,value): RxPllStatus.set_rx_pll_skewcalout(self, value)
  def __get__rx_pll_skewcalout(self): return RxPllStatus.get_rx_pll_skewcalout(self)
  rx_pll_skewcalout = property(__get__rx_pll_skewcalout,__set__rx_pll_skewcalout,None,'')

  def __set__tx_pll_fbdiv(self,value): TxPllCtrl1.set_tx_pll_fbdiv(self, value)
  def __get__tx_pll_fbdiv(self): return TxPllCtrl1.get_tx_pll_fbdiv(self)
  tx_pll_fbdiv = property(__get__tx_pll_fbdiv,__set__tx_pll_fbdiv,None,'')

  def __set__tx_pll_foutt_sel(self,value): TxPllCtrl1.set_tx_pll_foutt_sel(self, value)
  def __get__tx_pll_foutt_sel(self): return TxPllCtrl1.get_tx_pll_foutt_sel(self)
  tx_pll_foutt_sel = property(__get__tx_pll_foutt_sel,__set__tx_pll_foutt_sel,None,'')

  def __set__tx_pll_postdiv(self,value): TxPllCtrl2.set_tx_pll_postdiv(self, value)
  def __get__tx_pll_postdiv(self): return TxPllCtrl2.get_tx_pll_postdiv(self)
  tx_pll_postdiv = property(__get__tx_pll_postdiv,__set__tx_pll_postdiv,None,'')

  def __set__tx_pll_powerdown(self,value): TxPllCtrl2.set_tx_pll_powerdown(self, value)
  def __get__tx_pll_powerdown(self): return TxPllCtrl2.get_tx_pll_powerdown(self)
  tx_pll_powerdown = property(__get__tx_pll_powerdown,__set__tx_pll_powerdown,None,'')

  def __set__tx_pll_powerdown_foutdiv(self,value): TxPllCtrl2.set_tx_pll_powerdown_foutdiv(self, value)
  def __get__tx_pll_powerdown_foutdiv(self): return TxPllCtrl2.get_tx_pll_powerdown_foutdiv(self)
  tx_pll_powerdown_foutdiv = property(__get__tx_pll_powerdown_foutdiv,__set__tx_pll_powerdown_foutdiv,None,'')

  def __set__tx_pll_powerdown_foutt(self,value): TxPllCtrl2.set_tx_pll_powerdown_foutt(self, value)
  def __get__tx_pll_powerdown_foutt(self): return TxPllCtrl2.get_tx_pll_powerdown_foutt(self)
  tx_pll_powerdown_foutt = property(__get__tx_pll_powerdown_foutt,__set__tx_pll_powerdown_foutt,None,'')

  def __set__tx_pll_skewfastcal(self,value): TxPllSkewCtrl.set_tx_pll_skewfastcal(self, value)
  def __get__tx_pll_skewfastcal(self): return TxPllSkewCtrl.get_tx_pll_skewfastcal(self)
  tx_pll_skewfastcal = property(__get__tx_pll_skewfastcal,__set__tx_pll_skewfastcal,None,'')

  def __set__tx_pll_skewcalcnt(self,value): TxPllSkewCtrl.set_tx_pll_skewcalcnt(self, value)
  def __get__tx_pll_skewcalcnt(self): return TxPllSkewCtrl.get_tx_pll_skewcalcnt(self)
  tx_pll_skewcalcnt = property(__get__tx_pll_skewcalcnt,__set__tx_pll_skewcalcnt,None,'')

  def __set__tx_pll_skewcalbyp(self,value): TxPllSkewCtrl.set_tx_pll_skewcalbyp(self, value)
  def __get__tx_pll_skewcalbyp(self): return TxPllSkewCtrl.get_tx_pll_skewcalbyp(self)
  tx_pll_skewcalbyp = property(__get__tx_pll_skewcalbyp,__set__tx_pll_skewcalbyp,None,'')

  def __set__tx_pll_skewcalen(self,value): TxPllSkewCtrl.set_tx_pll_skewcalen(self, value)
  def __get__tx_pll_skewcalen(self): return TxPllSkewCtrl.get_tx_pll_skewcalen(self)
  tx_pll_skewcalen = property(__get__tx_pll_skewcalen,__set__tx_pll_skewcalen,None,'')

  def __set__tx_pll_skewcalin(self,value): TxPllSkewcalin.set_tx_pll_skewcalin(self, value)
  def __get__tx_pll_skewcalin(self): return TxPllSkewcalin.get_tx_pll_skewcalin(self)
  tx_pll_skewcalin = property(__get__tx_pll_skewcalin,__set__tx_pll_skewcalin,None,'')

  def __set__tx_pll_lock(self,value): TxPllStatus.set_tx_pll_lock(self, value)
  def __get__tx_pll_lock(self): return TxPllStatus.get_tx_pll_lock(self)
  tx_pll_lock = property(__get__tx_pll_lock,__set__tx_pll_lock,None,'')

  def __set__tx_pll_skewcalout(self,value): TxPllStatus.set_tx_pll_skewcalout(self, value)
  def __get__tx_pll_skewcalout(self): return TxPllStatus.get_tx_pll_skewcalout(self)
  tx_pll_skewcalout = property(__get__tx_pll_skewcalout,__set__tx_pll_skewcalout,None,'')

  def __set__common_pll_powerdown(self,value): CommonPllCtrl1.set_common_pll_powerdown(self, value)
  def __get__common_pll_powerdown(self): return CommonPllCtrl1.get_common_pll_powerdown(self)
  common_pll_powerdown = property(__get__common_pll_powerdown,__set__common_pll_powerdown,None,'')

  def __set__common_pll_dsmpd(self,value): CommonPllCtrl1.set_common_pll_dsmpd(self, value)
  def __get__common_pll_dsmpd(self): return CommonPllCtrl1.get_common_pll_dsmpd(self)
  common_pll_dsmpd = property(__get__common_pll_dsmpd,__set__common_pll_dsmpd,None,'')

  def __set__common_pll_dacpd(self,value): CommonPllCtrl1.set_common_pll_dacpd(self, value)
  def __get__common_pll_dacpd(self): return CommonPllCtrl1.get_common_pll_dacpd(self)
  common_pll_dacpd = property(__get__common_pll_dacpd,__set__common_pll_dacpd,None,'')

  def __set__common_pll_internal_bypass(self,value): CommonPllCtrl1.set_common_pll_internal_bypass(self, value)
  def __get__common_pll_internal_bypass(self): return CommonPllCtrl1.get_common_pll_internal_bypass(self)
  common_pll_internal_bypass = property(__get__common_pll_internal_bypass,__set__common_pll_internal_bypass,None,'')

  def __set__common_pll_fbdiv_msb(self,value): CommonPllCtrl1.set_common_pll_fbdiv_msb(self, value)
  def __get__common_pll_fbdiv_msb(self): return CommonPllCtrl1.get_common_pll_fbdiv_msb(self)
  common_pll_fbdiv_msb = property(__get__common_pll_fbdiv_msb,__set__common_pll_fbdiv_msb,None,'')

  def __set__common_pll_fbdiv_lsb(self,value): CommonPllCtrl2.set_common_pll_fbdiv_lsb(self, value)
  def __get__common_pll_fbdiv_lsb(self): return CommonPllCtrl2.get_common_pll_fbdiv_lsb(self)
  common_pll_fbdiv_lsb = property(__get__common_pll_fbdiv_lsb,__set__common_pll_fbdiv_lsb,None,'')

  def __set__common_pll_foutpostdivpd(self,value): CommonPllCtrl3.set_common_pll_foutpostdivpd(self, value)
  def __get__common_pll_foutpostdivpd(self): return CommonPllCtrl3.get_common_pll_foutpostdivpd(self)
  common_pll_foutpostdivpd = property(__get__common_pll_foutpostdivpd,__set__common_pll_foutpostdivpd,None,'')

  def __set__common_pll_foutvcopd(self,value): CommonPllCtrl3.set_common_pll_foutvcopd(self, value)
  def __get__common_pll_foutvcopd(self): return CommonPllCtrl3.get_common_pll_foutvcopd(self)
  common_pll_foutvcopd = property(__get__common_pll_foutvcopd,__set__common_pll_foutvcopd,None,'')

  def __set__common_pll_refdiv(self,value): CommonPllCtrl3.set_common_pll_refdiv(self, value)
  def __get__common_pll_refdiv(self): return CommonPllCtrl3.get_common_pll_refdiv(self)
  common_pll_refdiv = property(__get__common_pll_refdiv,__set__common_pll_refdiv,None,'')

  def __set__common_pll_fout4phasepd(self,value): CommonPllCtrl4.set_common_pll_fout4phasepd(self, value)
  def __get__common_pll_fout4phasepd(self): return CommonPllCtrl4.get_common_pll_fout4phasepd(self)
  common_pll_fout4phasepd = property(__get__common_pll_fout4phasepd,__set__common_pll_fout4phasepd,None,'')

  def __set__common_pll_external_bypass(self,value): CommonPllCtrl4.set_common_pll_external_bypass(self, value)
  def __get__common_pll_external_bypass(self): return CommonPllCtrl4.get_common_pll_external_bypass(self)
  common_pll_external_bypass = property(__get__common_pll_external_bypass,__set__common_pll_external_bypass,None,'')

  def __set__common_pll_postdiv1(self,value): CommonPllCtrl4.set_common_pll_postdiv1(self, value)
  def __get__common_pll_postdiv1(self): return CommonPllCtrl4.get_common_pll_postdiv1(self)
  common_pll_postdiv1 = property(__get__common_pll_postdiv1,__set__common_pll_postdiv1,None,'')

  def __set__common_pll_postdiv2(self,value): CommonPllCtrl4.set_common_pll_postdiv2(self, value)
  def __get__common_pll_postdiv2(self): return CommonPllCtrl4.get_common_pll_postdiv2(self)
  common_pll_postdiv2 = property(__get__common_pll_postdiv2,__set__common_pll_postdiv2,None,'')

  def __set__common_pll_frac_2(self,value): CommonPllFrac2.set_common_pll_frac_2(self, value)
  def __get__common_pll_frac_2(self): return CommonPllFrac2.get_common_pll_frac_2(self)
  common_pll_frac_2 = property(__get__common_pll_frac_2,__set__common_pll_frac_2,None,'')

  def __set__common_pll_frac_1(self,value): CommonPllFrac1.set_common_pll_frac_1(self, value)
  def __get__common_pll_frac_1(self): return CommonPllFrac1.get_common_pll_frac_1(self)
  common_pll_frac_1 = property(__get__common_pll_frac_1,__set__common_pll_frac_1,None,'')

  def __set__common_pll_frac_0(self,value): CommonPllFrac0.set_common_pll_frac_0(self, value)
  def __get__common_pll_frac_0(self): return CommonPllFrac0.get_common_pll_frac_0(self)
  common_pll_frac_0 = property(__get__common_pll_frac_0,__set__common_pll_frac_0,None,'')

  def __set__common_pll_lock(self,value): LockStatus.set_common_pll_lock(self, value)
  def __get__common_pll_lock(self): return LockStatus.get_common_pll_lock(self)
  common_pll_lock = property(__get__common_pll_lock,__set__common_pll_lock,None,'')

  def __set__xosc_lock(self,value): LockStatus.set_xosc_lock(self, value)
  def __get__xosc_lock(self): return LockStatus.get_xosc_lock(self)
  xosc_lock = property(__get__xosc_lock,__set__xosc_lock,None,'')

  def __set__cmu_clkout_sel(self,value): ClkoutSel.set_cmu_clkout_sel(self, value)
  def __get__cmu_clkout_sel(self): return ClkoutSel.get_cmu_clkout_sel(self)
  cmu_clkout_sel = property(__get__cmu_clkout_sel,__set__cmu_clkout_sel,None,'')

  def __set__pllauxclk_sel(self,value): ClkoutSel.set_pllauxclk_sel(self, value)
  def __get__pllauxclk_sel(self): return ClkoutSel.get_pllauxclk_sel(self)
  pllauxclk_sel = property(__get__pllauxclk_sel,__set__pllauxclk_sel,None,'')

  def __set__trx_clkout_1_sel(self,value): ClkoutSel.set_trx_clkout_1_sel(self, value)
  def __get__trx_clkout_1_sel(self): return ClkoutSel.get_trx_clkout_1_sel(self)
  trx_clkout_1_sel = property(__get__trx_clkout_1_sel,__set__trx_clkout_1_sel,None,'')

  def __set__trx_clkout_2_sel(self,value): ClkoutSel.set_trx_clkout_2_sel(self, value)
  def __get__trx_clkout_2_sel(self): return ClkoutSel.get_trx_clkout_2_sel(self)
  trx_clkout_2_sel = property(__get__trx_clkout_2_sel,__set__trx_clkout_2_sel,None,'')

  def __set__apc_testmode(self,value): ApcDvddTestmode.set_apc_testmode(self, value)
  def __get__apc_testmode(self): return ApcDvddTestmode.get_apc_testmode(self)
  apc_testmode = property(__get__apc_testmode,__set__apc_testmode,None,'')

  def __set__dvdd_testmode(self,value): ApcDvddTestmode.set_dvdd_testmode(self, value)
  def __get__dvdd_testmode(self): return ApcDvddTestmode.get_dvdd_testmode(self)
  dvdd_testmode = property(__get__dvdd_testmode,__set__dvdd_testmode,None,'')

  def __set__tx_bandsel(self,value): MiscCtrl.set_tx_bandsel(self, value)
  def __get__tx_bandsel(self): return MiscCtrl.get_tx_bandsel(self)
  tx_bandsel = property(__get__tx_bandsel,__set__tx_bandsel,None,'')

  def __set__tx_power(self,value): MiscCtrl.set_tx_power(self, value)
  def __get__tx_power(self): return MiscCtrl.get_tx_power(self)
  tx_power = property(__get__tx_power,__set__tx_power,None,'')

  def __set__dvdd_trim(self,value): MiscCtrl.set_dvdd_trim(self, value)
  def __get__dvdd_trim(self): return MiscCtrl.get_dvdd_trim(self)
  dvdd_trim = property(__get__dvdd_trim,__set__dvdd_trim,None,'')

  def __set__dvdd_rx_disable(self,value): DvddRxCtrl.set_dvdd_rx_disable(self, value)
  def __get__dvdd_rx_disable(self): return DvddRxCtrl.get_dvdd_rx_disable(self)
  dvdd_rx_disable = property(__get__dvdd_rx_disable,__set__dvdd_rx_disable,None,'')

  def __set__dvdd_rx_disable_pulldown(self,value): DvddRxCtrl.set_dvdd_rx_disable_pulldown(self, value)
  def __get__dvdd_rx_disable_pulldown(self): return DvddRxCtrl.get_dvdd_rx_disable_pulldown(self)
  dvdd_rx_disable_pulldown = property(__get__dvdd_rx_disable_pulldown,__set__dvdd_rx_disable_pulldown,None,'')

  def __set__dvdd_rx_trim(self,value): DvddRxCtrl.set_dvdd_rx_trim(self, value)
  def __get__dvdd_rx_trim(self): return DvddRxCtrl.get_dvdd_rx_trim(self)
  dvdd_rx_trim = property(__get__dvdd_rx_trim,__set__dvdd_rx_trim,None,'')

  def __set__dvdd_tx_disable(self,value): DvddTxCtrl.set_dvdd_tx_disable(self, value)
  def __get__dvdd_tx_disable(self): return DvddTxCtrl.get_dvdd_tx_disable(self)
  dvdd_tx_disable = property(__get__dvdd_tx_disable,__set__dvdd_tx_disable,None,'')

  def __set__dvdd_tx_disable_pulldown(self,value): DvddTxCtrl.set_dvdd_tx_disable_pulldown(self, value)
  def __get__dvdd_tx_disable_pulldown(self): return DvddTxCtrl.get_dvdd_tx_disable_pulldown(self)
  dvdd_tx_disable_pulldown = property(__get__dvdd_tx_disable_pulldown,__set__dvdd_tx_disable_pulldown,None,'')

  def __set__dvdd_tx_trim(self,value): DvddTxCtrl.set_dvdd_tx_trim(self, value)
  def __get__dvdd_tx_trim(self): return DvddTxCtrl.get_dvdd_tx_trim(self)
  dvdd_tx_trim = property(__get__dvdd_tx_trim,__set__dvdd_tx_trim,None,'')

  def __set__dvdd_rx_testmode(self,value): DvddTestmode.set_dvdd_rx_testmode(self, value)
  def __get__dvdd_rx_testmode(self): return DvddTestmode.get_dvdd_rx_testmode(self)
  dvdd_rx_testmode = property(__get__dvdd_rx_testmode,__set__dvdd_rx_testmode,None,'')

  def __set__dvdd_tx_testmode(self,value): DvddTestmode.set_dvdd_tx_testmode(self, value)
  def __get__dvdd_tx_testmode(self): return DvddTestmode.get_dvdd_tx_testmode(self)
  dvdd_tx_testmode = property(__get__dvdd_tx_testmode,__set__dvdd_tx_testmode,None,'')

  def __set__avdd_rx_disable(self,value): AvddRxCtrl.set_avdd_rx_disable(self, value)
  def __get__avdd_rx_disable(self): return AvddRxCtrl.get_avdd_rx_disable(self)
  avdd_rx_disable = property(__get__avdd_rx_disable,__set__avdd_rx_disable,None,'')

  def __set__avdd_rx_disable_pulldown(self,value): AvddRxCtrl.set_avdd_rx_disable_pulldown(self, value)
  def __get__avdd_rx_disable_pulldown(self): return AvddRxCtrl.get_avdd_rx_disable_pulldown(self)
  avdd_rx_disable_pulldown = property(__get__avdd_rx_disable_pulldown,__set__avdd_rx_disable_pulldown,None,'')

  def __set__avdd_rx_trim(self,value): AvddRxCtrl.set_avdd_rx_trim(self, value)
  def __get__avdd_rx_trim(self): return AvddRxCtrl.get_avdd_rx_trim(self)
  avdd_rx_trim = property(__get__avdd_rx_trim,__set__avdd_rx_trim,None,'')

  def __set__avdd_tx_disable(self,value): AvddTxCtrl.set_avdd_tx_disable(self, value)
  def __get__avdd_tx_disable(self): return AvddTxCtrl.get_avdd_tx_disable(self)
  avdd_tx_disable = property(__get__avdd_tx_disable,__set__avdd_tx_disable,None,'')

  def __set__avdd_tx_disable_pulldown(self,value): AvddTxCtrl.set_avdd_tx_disable_pulldown(self, value)
  def __get__avdd_tx_disable_pulldown(self): return AvddTxCtrl.get_avdd_tx_disable_pulldown(self)
  avdd_tx_disable_pulldown = property(__get__avdd_tx_disable_pulldown,__set__avdd_tx_disable_pulldown,None,'')

  def __set__avdd_tx_trim(self,value): AvddTxCtrl.set_avdd_tx_trim(self, value)
  def __get__avdd_tx_trim(self): return AvddTxCtrl.get_avdd_tx_trim(self)
  avdd_tx_trim = property(__get__avdd_tx_trim,__set__avdd_tx_trim,None,'')

  def __set__avdd_rx_testmode(self,value): AvddTestmode.set_avdd_rx_testmode(self, value)
  def __get__avdd_rx_testmode(self): return AvddTestmode.get_avdd_rx_testmode(self)
  avdd_rx_testmode = property(__get__avdd_rx_testmode,__set__avdd_rx_testmode,None,'')

  def __set__avdd_tx_testmode(self,value): AvddTestmode.set_avdd_tx_testmode(self, value)
  def __get__avdd_tx_testmode(self): return AvddTestmode.get_avdd_tx_testmode(self)
  avdd_tx_testmode = property(__get__avdd_tx_testmode,__set__avdd_tx_testmode,None,'')

  def __set__avdd_rx_anatestreq(self,value): LdoStatus1.set_avdd_rx_anatestreq(self, value)
  def __get__avdd_rx_anatestreq(self): return LdoStatus1.get_avdd_rx_anatestreq(self)
  avdd_rx_anatestreq = property(__get__avdd_rx_anatestreq,__set__avdd_rx_anatestreq,None,'')

  def __set__avdd_rx_digtestbus(self,value): LdoStatus1.set_avdd_rx_digtestbus(self, value)
  def __get__avdd_rx_digtestbus(self): return LdoStatus1.get_avdd_rx_digtestbus(self)
  avdd_rx_digtestbus = property(__get__avdd_rx_digtestbus,__set__avdd_rx_digtestbus,None,'')

  def __set__avdd_tx_anatestreq(self,value): LdoStatus1.set_avdd_tx_anatestreq(self, value)
  def __get__avdd_tx_anatestreq(self): return LdoStatus1.get_avdd_tx_anatestreq(self)
  avdd_tx_anatestreq = property(__get__avdd_tx_anatestreq,__set__avdd_tx_anatestreq,None,'')

  def __set__avdd_tx_digtestbus(self,value): LdoStatus1.set_avdd_tx_digtestbus(self, value)
  def __get__avdd_tx_digtestbus(self): return LdoStatus1.get_avdd_tx_digtestbus(self)
  avdd_tx_digtestbus = property(__get__avdd_tx_digtestbus,__set__avdd_tx_digtestbus,None,'')

  def __set__dvdd_rx_anatestreq(self,value): LdoStatus1.set_dvdd_rx_anatestreq(self, value)
  def __get__dvdd_rx_anatestreq(self): return LdoStatus1.get_dvdd_rx_anatestreq(self)
  dvdd_rx_anatestreq = property(__get__dvdd_rx_anatestreq,__set__dvdd_rx_anatestreq,None,'')

  def __set__dvdd_rx_digtestbus(self,value): LdoStatus1.set_dvdd_rx_digtestbus(self, value)
  def __get__dvdd_rx_digtestbus(self): return LdoStatus1.get_dvdd_rx_digtestbus(self)
  dvdd_rx_digtestbus = property(__get__dvdd_rx_digtestbus,__set__dvdd_rx_digtestbus,None,'')

  def __set__dvdd_tx_anatestreq(self,value): LdoStatus1.set_dvdd_tx_anatestreq(self, value)
  def __get__dvdd_tx_anatestreq(self): return LdoStatus1.get_dvdd_tx_anatestreq(self)
  dvdd_tx_anatestreq = property(__get__dvdd_tx_anatestreq,__set__dvdd_tx_anatestreq,None,'')

  def __set__dvdd_tx_digtestbus(self,value): LdoStatus1.set_dvdd_tx_digtestbus(self, value)
  def __get__dvdd_tx_digtestbus(self): return LdoStatus1.get_dvdd_tx_digtestbus(self)
  dvdd_tx_digtestbus = property(__get__dvdd_tx_digtestbus,__set__dvdd_tx_digtestbus,None,'')

  def __set__dvdd_anatestreq(self,value): LdoStatus2.set_dvdd_anatestreq(self, value)
  def __get__dvdd_anatestreq(self): return LdoStatus2.get_dvdd_anatestreq(self)
  dvdd_anatestreq = property(__get__dvdd_anatestreq,__set__dvdd_anatestreq,None,'')

  def __set__dvdd_digtestbus(self,value): LdoStatus2.set_dvdd_digtestbus(self, value)
  def __get__dvdd_digtestbus(self): return LdoStatus2.get_dvdd_digtestbus(self)
  dvdd_digtestbus = property(__get__dvdd_digtestbus,__set__dvdd_digtestbus,None,'')

  def __set__apc_anatestreq(self,value): LdoStatus2.set_apc_anatestreq(self, value)
  def __get__apc_anatestreq(self): return LdoStatus2.get_apc_anatestreq(self)
  apc_anatestreq = property(__get__apc_anatestreq,__set__apc_anatestreq,None,'')

  def __set__apc_digtestbus(self,value): LdoStatus2.set_apc_digtestbus(self, value)
  def __get__apc_digtestbus(self): return LdoStatus2.get_apc_digtestbus(self)
  apc_digtestbus = property(__get__apc_digtestbus,__set__apc_digtestbus,None,'')

  def __set__dvdd_rx_power_good(self,value): LdoStatus2.set_dvdd_rx_power_good(self, value)
  def __get__dvdd_rx_power_good(self): return LdoStatus2.get_dvdd_rx_power_good(self)
  dvdd_rx_power_good = property(__get__dvdd_rx_power_good,__set__dvdd_rx_power_good,None,'')

  def __set__dvdd_tx_power_good(self,value): LdoStatus2.set_dvdd_tx_power_good(self, value)
  def __get__dvdd_tx_power_good(self): return LdoStatus2.get_dvdd_tx_power_good(self)
  dvdd_tx_power_good = property(__get__dvdd_tx_power_good,__set__dvdd_tx_power_good,None,'')

  def __set__avdd_rx_power_good(self,value): LdoStatus2.set_avdd_rx_power_good(self, value)
  def __get__avdd_rx_power_good(self): return LdoStatus2.get_avdd_rx_power_good(self)
  avdd_rx_power_good = property(__get__avdd_rx_power_good,__set__avdd_rx_power_good,None,'')

  def __set__avdd_tx_power_good(self,value): LdoStatus2.set_avdd_tx_power_good(self, value)
  def __get__avdd_tx_power_good(self): return LdoStatus2.get_avdd_tx_power_good(self)
  avdd_tx_power_good = property(__get__avdd_tx_power_good,__set__avdd_tx_power_good,None,'')

  def __set__fetch_radar_data_spi(self,value): FetchRadarDataSpi.set_fetch_radar_data_spi(self, value)
  def __get__fetch_radar_data_spi(self): return FetchRadarDataSpi.get_fetch_radar_data_spi(self)
  fetch_radar_data_spi = property(__get__fetch_radar_data_spi,__set__fetch_radar_data_spi,None,'')

  def __set__fetch_radar_data_pif(self,value): FetchRadarDataPif.set_fetch_radar_data_pif(self, value)
  def __get__fetch_radar_data_pif(self): return FetchRadarDataPif.get_fetch_radar_data_pif(self)
  fetch_radar_data_pif = property(__get__fetch_radar_data_pif,__set__fetch_radar_data_pif,None,'')

  def __set__rx_reset_counters(self,value): RxResetCounters.set_rx_reset_counters(self, value)
  def __get__rx_reset_counters(self): return RxResetCounters.get_rx_reset_counters(self)
  rx_reset_counters = property(__get__rx_reset_counters,__set__rx_reset_counters,None,'')

  def __set__trx_start(self,value): TrxStart.set_trx_start(self, value)
  def __get__trx_start(self): return TrxStart.get_trx_start(self)
  trx_start = property(__get__trx_start,__set__trx_start,None,'')

  def __set__trx_lfsr_reset(self,value): TrxLfsrReset.set_trx_lfsr_reset(self, value)
  def __get__trx_lfsr_reset(self): return TrxLfsrReset.get_trx_lfsr_reset(self)
  trx_lfsr_reset = property(__get__trx_lfsr_reset,__set__trx_lfsr_reset,None,'')

  def __set__trx_dac_override_load(self,value): TrxDacOverrideLoad.set_trx_dac_override_load(self, value)
  def __get__trx_dac_override_load(self): return TrxDacOverrideLoad.get_trx_dac_override_load(self)
  trx_dac_override_load = property(__get__trx_dac_override_load,__set__trx_dac_override_load,None,'')

  def __set__spi_master_radar_burst_kick(self,value): SpiMasterRadarBurstKick.set_spi_master_radar_burst_kick(self, value)
  def __get__spi_master_radar_burst_kick(self): return SpiMasterRadarBurstKick.get_spi_master_radar_burst_kick(self)
  spi_master_radar_burst_kick = property(__get__spi_master_radar_burst_kick,__set__spi_master_radar_burst_kick,None,'')

  
  def __init__(self, block, name):
    super(PIF, self).__init__(block, name)
    with self._addattr():
      self.__set_register__  = block.__radar__.x4driver_set_pif_register
      self.__get_register__  = block.__radar__.x4driver_get_pif_register
      self.logger  = logging.getLogger("x4regmap.%s.%s" % (block.__class__.__name__, name))
    # Add registers to shadow 
    self.__add_reg__(FirmwareVersion)
    self.__add_reg__(GpioOut)
    self.__add_reg__(GpioIn)
    self.__add_reg__(GpioOe)
    self.__add_reg__(RxMframes)
    self.__add_reg__(SmplMode)
    self.__add_reg__(RxDownconversionCoeffI1)
    self.__add_reg__(RxDownconversionCoeffI2)
    self.__add_reg__(RxDownconversionCoeffQ1)
    self.__add_reg__(RxDownconversionCoeffQ2)
    self.__add_reg__(RxRamWriteOffsetMsb)
    self.__add_reg__(RxRamLineFirstMsb)
    self.__add_reg__(RxRamLineLastMsb)
    self.__add_reg__(RxRamLsbs)
    self.__add_reg__(RxCounterNumBytes)
    self.__add_reg__(RxCounterLsb)
    self.__add_reg__(RadarDataPif)
    self.__add_reg__(RadarDataPifStatus)
    self.__add_reg__(PifRadarDataClearStatus)
    self.__add_reg__(PifRadarData0FifoStatus)
    self.__add_reg__(PifRadarData0ClearStatus)
    self.__add_reg__(PifRadarData1FifoStatus)
    self.__add_reg__(PifRadarData1ClearStatus)
    self.__add_reg__(RamSelect)
    self.__add_reg__(RadarReadoutIdle)
    self.__add_reg__(TrxClocksPerPulse)
    self.__add_reg__(RxMframesCoarse)
    self.__add_reg__(TrxPulsesPerStepMsb)
    self.__add_reg__(TrxPulsesPerStepLsb)
    self.__add_reg__(TrxDacMaxH)
    self.__add_reg__(TrxDacMaxL)
    self.__add_reg__(TrxDacMinH)
    self.__add_reg__(TrxDacMinL)
    self.__add_reg__(TrxDacStep)
    self.__add_reg__(TrxIterations)
    self.__add_reg__(TrxCtrlDone)
    self.__add_reg__(TrxBackendDone)
    self.__add_reg__(TrxCtrlMode)
    self.__add_reg__(TrxLfsrTaps0)
    self.__add_reg__(TrxLfsrTaps1)
    self.__add_reg__(TrxLfsrTaps2)
    self.__add_reg__(RxWait)
    self.__add_reg__(TxWait)
    self.__add_reg__(TrxDacOverrideH)
    self.__add_reg__(TrxDacOverrideL)
    self.__add_reg__(CpuSpiMasterClkCtrl)
    self.__add_reg__(MclkTrxBackendClkCtrl)
    self.__add_reg__(OscCtrl)
    self.__add_reg__(IoCtrl1)
    self.__add_reg__(IoCtrl2)
    self.__add_reg__(IoCtrl3)
    self.__add_reg__(IoCtrl4)
    self.__add_reg__(IoCtrl5)
    self.__add_reg__(IoCtrl6)
    self.__add_reg__(SpiConfigPif)
    self.__add_reg__(PifMbFifoStatus)
    self.__add_reg__(ToCpuReadData)
    self.__add_reg__(FromCpuWriteData)
    self.__add_reg__(PifMbClearStatus)
    self.__add_reg__(PifMemFifoStatus)
    self.__add_reg__(PifMemClearStatus)
    self.__add_reg__(SpiMasterSend)
    self.__add_reg__(SpiMasterIdle)
    self.__add_reg__(SpiMasterMode)
    self.__add_reg__(SpiMasterRadarBurstSizeLsb)
    self.__add_reg__(OtpCtrl)
    self.__add_reg__(BootFromOtpPif)
    self.__add_reg__(RxPllCtrl1)
    self.__add_reg__(RxPllCtrl2)
    self.__add_reg__(RxPllSkewCtrl)
    self.__add_reg__(RxPllSkewcalin)
    self.__add_reg__(RxPllStatus)
    self.__add_reg__(TxPllCtrl1)
    self.__add_reg__(TxPllCtrl2)
    self.__add_reg__(TxPllSkewCtrl)
    self.__add_reg__(TxPllSkewcalin)
    self.__add_reg__(TxPllStatus)
    self.__add_reg__(CommonPllCtrl1)
    self.__add_reg__(CommonPllCtrl2)
    self.__add_reg__(CommonPllCtrl3)
    self.__add_reg__(CommonPllCtrl4)
    self.__add_reg__(CommonPllFrac2)
    self.__add_reg__(CommonPllFrac1)
    self.__add_reg__(CommonPllFrac0)
    self.__add_reg__(LockStatus)
    self.__add_reg__(ClkoutSel)
    self.__add_reg__(ApcDvddTestmode)
    self.__add_reg__(MiscCtrl)
    self.__add_reg__(DvddRxCtrl)
    self.__add_reg__(DvddTxCtrl)
    self.__add_reg__(DvddTestmode)
    self.__add_reg__(AvddRxCtrl)
    self.__add_reg__(AvddTxCtrl)
    self.__add_reg__(AvddTestmode)
    self.__add_reg__(LdoStatus1)
    self.__add_reg__(LdoStatus2)
    # Add actions to shadow for completeness
    self.__add_reg__(FetchRadarDataSpi)
    self.__add_reg__(FetchRadarDataPif)
    self.__add_reg__(RxResetCounters)
    self.__add_reg__(TrxStart)
    self.__add_reg__(TrxLfsrReset)
    self.__add_reg__(TrxDacOverrideLoad)
    self.__add_reg__(SpiMasterRadarBurstKick)
    self.__keys__ = ["firmware_version",
                     "gpio_o",
                     "gpio_i",
                     "gpio_output_enable",
                     "rx_mframes",
                     "hpf_disable_feedforward",
                     "powerdown_sampler",
                     "rx_downconversion_enable",
                     "rx_downconversion_coeff_i1",
                     "rx_downconversion_coeff_i2",
                     "rx_downconversion_coeff_q1",
                     "rx_downconversion_coeff_q2",
                     "rx_ram_write_offset_msb",
                     "rx_ram_line_first_msb",
                     "rx_ram_line_last_msb",
                     "rx_ram_write_offset_lsb",
                     "rx_ram_line_first_lsb",
                     "rx_ram_line_last_lsb",
                     "rx_counter_num_bytes",
                     "rx_counter_lsb",
                     "radar_data_pif",
                     "pif_radar_data_pif_fifo_overflow",
                     "pif_radar_data_pif_fifo_underflow",
                     "pif_radar_data_spi_fifo_overflow",
                     "pif_radar_data_spi_fifo_underflow",
                     "radar_data_pif_fifo_empty",
                     "pif_clear_radar_data_pif_fifo_overflow",
                     "pif_clear_radar_data_pif_fifo_underflow",
                     "pif_clear_radar_data_spi_fifo_overflow",
                     "pif_clear_radar_data_spi_fifo_underflow",
                     "pif_radar_data0_fifo_overflow",
                     "pif_radar_data0_fifo_underflow",
                     "pif_fifo_ram_word0_overflow",
                     "pif_fifo_ram_word0_underflow",
                     "pif_fifo_sample0_overflow",
                     "pif_fifo_sample0_underflow",
                     "pif_clear_radar_data0_fifo_overflow",
                     "pif_clear_radar_data0_fifo_underflow",
                     "pif_clear_fifo_ram_word0_overflow",
                     "pif_clear_fifo_ram_word0_underflow",
                     "pif_clear_fifo_sample0_overflow",
                     "pif_clear_fifo_sample0_underflow",
                     "pif_radar_data1_fifo_overflow",
                     "pif_radar_data1_fifo_underflow",
                     "pif_fifo_ram_word1_overflow",
                     "pif_fifo_ram_word1_underflow",
                     "pif_fifo_sample1_overflow",
                     "pif_fifo_sample1_underflow",
                     "pif_clear_radar_data1_fifo_overflow",
                     "pif_clear_radar_data1_fifo_underflow",
                     "pif_clear_fifo_ram_word1_overflow",
                     "pif_clear_fifo_ram_word1_underflow",
                     "pif_clear_fifo_sample1_overflow",
                     "pif_clear_fifo_sample1_underflow",
                     "ram_select",
                     "radar_readout_idle",
                     "trx_clocks_per_pulse",
                     "rx_mframes_coarse",
                     "trx_pulses_per_step_msb",
                     "trx_pulses_per_step_lsb",
                     "trx_dac_max_h",
                     "trx_dac_max_l",
                     "trx_dac_min_h",
                     "trx_dac_min_l",
                     "trx_auto_bidir_enable",
                     "trx_sweep_phase",
                     "trx_dac_settle_clog2",
                     "trx_dac_step_clog2",
                     "trx_iterations",
                     "trx_ctrl_done",
                     "trx_backend_done",
                     "tx_strobe_enable",
                     "rx_strobe_enable",
                     "trx_phase_override",
                     "trx_phase_override_val",
                     "trx_send_every_pulse",
                     "trx_constant_clocks_per_pulse",
                     "trx_ctrl_slave_mode",
                     "trx_start_sync_negedge",
                     "trx_lfsr_taps_0",
                     "trx_lfsr_taps_1",
                     "noiseless_ghost_order",
                     "trx_lfsr_taps_2",
                     "rx_wait",
                     "tx_wait",
                     "trx_dac_override_enable",
                     "trx_dac_override_val_h",
                     "trx_dac_override_val_l",
                     "spi_master_clk_div",
                     "spi_master_clk_sel",
                     "cpuclk_div",
                     "cpuclk_sel",
                     "mclk_sel",
                     "trx_backend_clk_prescale",
                     "trx_backend_clk_div",
                     "auxclk_sel",
                     "sysclk_sel",
                     "xosc_bypass",
                     "xosc_dislvl",
                     "xosc_discap",
                     "xosc_en",
                     "lpclk_disable",
                     "spiclk_ren",
                     "spio_ren",
                     "io_ren",
                     "lvds_rt_cal",
                     "lvds_rt_en",
                     "lvcmos_schmitt_en",
                     "io6_lvcmos_ie",
                     "io5_lvcmos_ie",
                     "lvds_rx_en",
                     "sub_lvds_en",
                     "lvds_tx_en",
                     "io_gpio_sel",
                     "lvds_clkout_sel",
                     "io6_clkout_sel",
                     "io5_clkout_sel",
                     "extclk_sel",
                     "lvds_txdrv",
                     "lvds_biastrim",
                     "lpclk_trim",
                     "io3_spi_sel",
                     "trx_sync_source_sel",
                     "io1_spi_sel",
                     "io2_test_sel",
                     "io6_clkout_oe",
                     "io5_clkout_oe",
                     "spi_mode_pif",
                     "pif_to_cpu_fifo_overflow",
                     "pif_to_cpu_fifo_underflow",
                     "pif_from_cpu_fifo_overflow",
                     "pif_from_cpu_fifo_underflow",
                     "from_cpu_fifo_empty",
                     "to_cpu_data_valid",
                     "from_cpu_fifo_full",
                     "to_cpu_read_data",
                     "from_cpu_write_data",
                     "pif_clear_to_cpu_fifo_overflow",
                     "pif_clear_to_cpu_fifo_underflow",
                     "pif_clear_from_cpu_fifo_overflow",
                     "pif_clear_from_cpu_fifo_underflow",
                     "pif_to_mem_fifo_overflow",
                     "pif_to_mem_fifo_underflow",
                     "pif_from_mem_fifo_overflow",
                     "pif_from_mem_fifo_underflow",
                     "pif_clear_to_mem_fifo_overflow",
                     "pif_clear_to_mem_fifo_underflow",
                     "pif_clear_from_mem_fifo_overflow",
                     "pif_clear_from_mem_fifo_underflow",
                     "spi_master_send",
                     "spi_master_nss",
                     "spi_master_idle",
                     "spi_master_radar_burst_size_msb",
                     "spi_slave_sel",
                     "spi_master_mode",
                     "spi_master_radar_burst_size_lsb",
                     "otp_ctrl_load",
                     "boot_from_otp_pif",
                     "rx_pll_fbdiv",
                     "rx_pll_foutt_sel",
                     "rx_pll_postdiv",
                     "rx_pll_powerdown",
                     "rx_pll_powerdown_foutdiv",
                     "rx_pll_powerdown_foutt",
                     "rx_pll_skewfastcal",
                     "rx_pll_skewcalcnt",
                     "rx_pll_skewcalbyp",
                     "rx_pll_skewcalen",
                     "rx_pll_skewcalin",
                     "rx_pll_lock",
                     "rx_pll_skewcalout",
                     "tx_pll_fbdiv",
                     "tx_pll_foutt_sel",
                     "tx_pll_postdiv",
                     "tx_pll_powerdown",
                     "tx_pll_powerdown_foutdiv",
                     "tx_pll_powerdown_foutt",
                     "tx_pll_skewfastcal",
                     "tx_pll_skewcalcnt",
                     "tx_pll_skewcalbyp",
                     "tx_pll_skewcalen",
                     "tx_pll_skewcalin",
                     "tx_pll_lock",
                     "tx_pll_skewcalout",
                     "common_pll_powerdown",
                     "common_pll_dsmpd",
                     "common_pll_dacpd",
                     "common_pll_internal_bypass",
                     "common_pll_fbdiv_msb",
                     "common_pll_fbdiv_lsb",
                     "common_pll_foutpostdivpd",
                     "common_pll_foutvcopd",
                     "common_pll_refdiv",
                     "common_pll_fout4phasepd",
                     "common_pll_external_bypass",
                     "common_pll_postdiv1",
                     "common_pll_postdiv2",
                     "common_pll_frac_2",
                     "common_pll_frac_1",
                     "common_pll_frac_0",
                     "common_pll_lock",
                     "xosc_lock",
                     "cmu_clkout_sel",
                     "pllauxclk_sel",
                     "trx_clkout_1_sel",
                     "trx_clkout_2_sel",
                     "apc_testmode",
                     "dvdd_testmode",
                     "tx_bandsel",
                     "tx_power",
                     "dvdd_trim",
                     "dvdd_rx_disable",
                     "dvdd_rx_disable_pulldown",
                     "dvdd_rx_trim",
                     "dvdd_tx_disable",
                     "dvdd_tx_disable_pulldown",
                     "dvdd_tx_trim",
                     "dvdd_rx_testmode",
                     "dvdd_tx_testmode",
                     "avdd_rx_disable",
                     "avdd_rx_disable_pulldown",
                     "avdd_rx_trim",
                     "avdd_tx_disable",
                     "avdd_tx_disable_pulldown",
                     "avdd_tx_trim",
                     "avdd_rx_testmode",
                     "avdd_tx_testmode",
                     "avdd_rx_anatestreq",
                     "avdd_rx_digtestbus",
                     "avdd_tx_anatestreq",
                     "avdd_tx_digtestbus",
                     "dvdd_rx_anatestreq",
                     "dvdd_rx_digtestbus",
                     "dvdd_tx_anatestreq",
                     "dvdd_tx_digtestbus",
                     "dvdd_anatestreq",
                     "dvdd_digtestbus",
                     "apc_anatestreq",
                     "apc_digtestbus",
                     "dvdd_rx_power_good",
                     "dvdd_tx_power_good",
                     "avdd_rx_power_good",
                     "avdd_tx_power_good",
                     ]

class SPI(RegMap):


  def __set__force_zero(self,value): ForceZero.set_force_zero(self, value)
  def __get__force_zero(self): return ForceZero.get_force_zero(self)
  force_zero = property(__get__force_zero,__set__force_zero,None,'')

  def __set__force_one(self,value): ForceOne.set_force_one(self, value)
  def __get__force_one(self): return ForceOne.get_force_one(self)
  force_one = property(__get__force_one,__set__force_one,None,'')

  def __set__chip_id_dig(self,value): ChipIdDig.set_chip_id_dig(self, value)
  def __get__chip_id_dig(self): return ChipIdDig.get_chip_id_dig(self)
  chip_id_dig = property(__get__chip_id_dig,__set__chip_id_dig,None,'')

  def __set__chip_id_sys(self,value): ChipIdSys.set_chip_id_sys(self, value)
  def __get__chip_id_sys(self): return ChipIdSys.get_chip_id_sys(self)
  chip_id_sys = property(__get__chip_id_sys,__set__chip_id_sys,None,'')

  def __set__debug(self,value): Debug.set_debug(self, value)
  def __get__debug(self): return Debug.get_debug(self)
  debug = property(__get__debug,__set__debug,None,'')

  def __set__radar_data_spi(self,value): RadarDataSpi.set_radar_data_spi(self, value)
  def __get__radar_data_spi(self): return RadarDataSpi.get_radar_data_spi(self)
  radar_data_spi = property(__get__radar_data_spi,__set__radar_data_spi,None,'')

  def __set__spi_radar_data_spi_fifo_overflow(self,value): RadarDataSpiStatus.set_spi_radar_data_spi_fifo_overflow(self, value)
  def __get__spi_radar_data_spi_fifo_overflow(self): return RadarDataSpiStatus.get_spi_radar_data_spi_fifo_overflow(self)
  spi_radar_data_spi_fifo_overflow = property(__get__spi_radar_data_spi_fifo_overflow,__set__spi_radar_data_spi_fifo_overflow,None,'')

  def __set__spi_radar_data_spi_fifo_underflow(self,value): RadarDataSpiStatus.set_spi_radar_data_spi_fifo_underflow(self, value)
  def __get__spi_radar_data_spi_fifo_underflow(self): return RadarDataSpiStatus.get_spi_radar_data_spi_fifo_underflow(self)
  spi_radar_data_spi_fifo_underflow = property(__get__spi_radar_data_spi_fifo_underflow,__set__spi_radar_data_spi_fifo_underflow,None,'')

  def __set__spi_radar_data_pif_fifo_overflow(self,value): RadarDataSpiStatus.set_spi_radar_data_pif_fifo_overflow(self, value)
  def __get__spi_radar_data_pif_fifo_overflow(self): return RadarDataSpiStatus.get_spi_radar_data_pif_fifo_overflow(self)
  spi_radar_data_pif_fifo_overflow = property(__get__spi_radar_data_pif_fifo_overflow,__set__spi_radar_data_pif_fifo_overflow,None,'')

  def __set__spi_radar_data_pif_fifo_underflow(self,value): RadarDataSpiStatus.set_spi_radar_data_pif_fifo_underflow(self, value)
  def __get__spi_radar_data_pif_fifo_underflow(self): return RadarDataSpiStatus.get_spi_radar_data_pif_fifo_underflow(self)
  spi_radar_data_pif_fifo_underflow = property(__get__spi_radar_data_pif_fifo_underflow,__set__spi_radar_data_pif_fifo_underflow,None,'')

  def __set__radar_data_spi_fifo_empty(self,value): RadarDataSpiStatus.set_radar_data_spi_fifo_empty(self, value)
  def __get__radar_data_spi_fifo_empty(self): return RadarDataSpiStatus.get_radar_data_spi_fifo_empty(self)
  radar_data_spi_fifo_empty = property(__get__radar_data_spi_fifo_empty,__set__radar_data_spi_fifo_empty,None,'')

  def __set__spi_clear_radar_data_spi_fifo_overflow(self,value): SpiRadarDataClearStatus.set_spi_clear_radar_data_spi_fifo_overflow(self, value)
  def __get__spi_clear_radar_data_spi_fifo_overflow(self): return SpiRadarDataClearStatus.get_spi_clear_radar_data_spi_fifo_overflow(self)
  spi_clear_radar_data_spi_fifo_overflow = property(__get__spi_clear_radar_data_spi_fifo_overflow,__set__spi_clear_radar_data_spi_fifo_overflow,None,'')

  def __set__spi_clear_radar_data_spi_fifo_underflow(self,value): SpiRadarDataClearStatus.set_spi_clear_radar_data_spi_fifo_underflow(self, value)
  def __get__spi_clear_radar_data_spi_fifo_underflow(self): return SpiRadarDataClearStatus.get_spi_clear_radar_data_spi_fifo_underflow(self)
  spi_clear_radar_data_spi_fifo_underflow = property(__get__spi_clear_radar_data_spi_fifo_underflow,__set__spi_clear_radar_data_spi_fifo_underflow,None,'')

  def __set__spi_clear_radar_data_pif_fifo_overflow(self,value): SpiRadarDataClearStatus.set_spi_clear_radar_data_pif_fifo_overflow(self, value)
  def __get__spi_clear_radar_data_pif_fifo_overflow(self): return SpiRadarDataClearStatus.get_spi_clear_radar_data_pif_fifo_overflow(self)
  spi_clear_radar_data_pif_fifo_overflow = property(__get__spi_clear_radar_data_pif_fifo_overflow,__set__spi_clear_radar_data_pif_fifo_overflow,None,'')

  def __set__spi_clear_radar_data_pif_fifo_underflow(self,value): SpiRadarDataClearStatus.set_spi_clear_radar_data_pif_fifo_underflow(self, value)
  def __get__spi_clear_radar_data_pif_fifo_underflow(self): return SpiRadarDataClearStatus.get_spi_clear_radar_data_pif_fifo_underflow(self)
  spi_clear_radar_data_pif_fifo_underflow = property(__get__spi_clear_radar_data_pif_fifo_underflow,__set__spi_clear_radar_data_pif_fifo_underflow,None,'')

  def __set__spi_radar_data0_fifo_overflow(self,value): SpiRadarData0FifoStatus.set_spi_radar_data0_fifo_overflow(self, value)
  def __get__spi_radar_data0_fifo_overflow(self): return SpiRadarData0FifoStatus.get_spi_radar_data0_fifo_overflow(self)
  spi_radar_data0_fifo_overflow = property(__get__spi_radar_data0_fifo_overflow,__set__spi_radar_data0_fifo_overflow,None,'')

  def __set__spi_radar_data0_fifo_underflow(self,value): SpiRadarData0FifoStatus.set_spi_radar_data0_fifo_underflow(self, value)
  def __get__spi_radar_data0_fifo_underflow(self): return SpiRadarData0FifoStatus.get_spi_radar_data0_fifo_underflow(self)
  spi_radar_data0_fifo_underflow = property(__get__spi_radar_data0_fifo_underflow,__set__spi_radar_data0_fifo_underflow,None,'')

  def __set__spi_fifo_ram_word0_overflow(self,value): SpiRadarData0FifoStatus.set_spi_fifo_ram_word0_overflow(self, value)
  def __get__spi_fifo_ram_word0_overflow(self): return SpiRadarData0FifoStatus.get_spi_fifo_ram_word0_overflow(self)
  spi_fifo_ram_word0_overflow = property(__get__spi_fifo_ram_word0_overflow,__set__spi_fifo_ram_word0_overflow,None,'')

  def __set__spi_fifo_ram_word0_underflow(self,value): SpiRadarData0FifoStatus.set_spi_fifo_ram_word0_underflow(self, value)
  def __get__spi_fifo_ram_word0_underflow(self): return SpiRadarData0FifoStatus.get_spi_fifo_ram_word0_underflow(self)
  spi_fifo_ram_word0_underflow = property(__get__spi_fifo_ram_word0_underflow,__set__spi_fifo_ram_word0_underflow,None,'')

  def __set__spi_fifo_sample0_overflow(self,value): SpiRadarData0FifoStatus.set_spi_fifo_sample0_overflow(self, value)
  def __get__spi_fifo_sample0_overflow(self): return SpiRadarData0FifoStatus.get_spi_fifo_sample0_overflow(self)
  spi_fifo_sample0_overflow = property(__get__spi_fifo_sample0_overflow,__set__spi_fifo_sample0_overflow,None,'')

  def __set__spi_fifo_sample0_underflow(self,value): SpiRadarData0FifoStatus.set_spi_fifo_sample0_underflow(self, value)
  def __get__spi_fifo_sample0_underflow(self): return SpiRadarData0FifoStatus.get_spi_fifo_sample0_underflow(self)
  spi_fifo_sample0_underflow = property(__get__spi_fifo_sample0_underflow,__set__spi_fifo_sample0_underflow,None,'')

  def __set__spi_clear_radar_data0_fifo_overflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_radar_data0_fifo_overflow(self, value)
  def __get__spi_clear_radar_data0_fifo_overflow(self): return SpiRadarData0ClearStatus.get_spi_clear_radar_data0_fifo_overflow(self)
  spi_clear_radar_data0_fifo_overflow = property(__get__spi_clear_radar_data0_fifo_overflow,__set__spi_clear_radar_data0_fifo_overflow,None,'')

  def __set__spi_clear_radar_data0_fifo_underflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_radar_data0_fifo_underflow(self, value)
  def __get__spi_clear_radar_data0_fifo_underflow(self): return SpiRadarData0ClearStatus.get_spi_clear_radar_data0_fifo_underflow(self)
  spi_clear_radar_data0_fifo_underflow = property(__get__spi_clear_radar_data0_fifo_underflow,__set__spi_clear_radar_data0_fifo_underflow,None,'')

  def __set__spi_clear_fifo_ram_word0_overflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_fifo_ram_word0_overflow(self, value)
  def __get__spi_clear_fifo_ram_word0_overflow(self): return SpiRadarData0ClearStatus.get_spi_clear_fifo_ram_word0_overflow(self)
  spi_clear_fifo_ram_word0_overflow = property(__get__spi_clear_fifo_ram_word0_overflow,__set__spi_clear_fifo_ram_word0_overflow,None,'')

  def __set__spi_clear_fifo_ram_word0_underflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_fifo_ram_word0_underflow(self, value)
  def __get__spi_clear_fifo_ram_word0_underflow(self): return SpiRadarData0ClearStatus.get_spi_clear_fifo_ram_word0_underflow(self)
  spi_clear_fifo_ram_word0_underflow = property(__get__spi_clear_fifo_ram_word0_underflow,__set__spi_clear_fifo_ram_word0_underflow,None,'')

  def __set__spi_clear_fifo_sample0_overflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_fifo_sample0_overflow(self, value)
  def __get__spi_clear_fifo_sample0_overflow(self): return SpiRadarData0ClearStatus.get_spi_clear_fifo_sample0_overflow(self)
  spi_clear_fifo_sample0_overflow = property(__get__spi_clear_fifo_sample0_overflow,__set__spi_clear_fifo_sample0_overflow,None,'')

  def __set__spi_clear_fifo_sample0_underflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_fifo_sample0_underflow(self, value)
  def __get__spi_clear_fifo_sample0_underflow(self): return SpiRadarData0ClearStatus.get_spi_clear_fifo_sample0_underflow(self)
  spi_clear_fifo_sample0_underflow = property(__get__spi_clear_fifo_sample0_underflow,__set__spi_clear_fifo_sample0_underflow,None,'')

  def __set__spi_radar_data1_fifo_overflow(self,value): SpiRadarData1FifoStatus.set_spi_radar_data1_fifo_overflow(self, value)
  def __get__spi_radar_data1_fifo_overflow(self): return SpiRadarData1FifoStatus.get_spi_radar_data1_fifo_overflow(self)
  spi_radar_data1_fifo_overflow = property(__get__spi_radar_data1_fifo_overflow,__set__spi_radar_data1_fifo_overflow,None,'')

  def __set__spi_radar_data1_fifo_underflow(self,value): SpiRadarData1FifoStatus.set_spi_radar_data1_fifo_underflow(self, value)
  def __get__spi_radar_data1_fifo_underflow(self): return SpiRadarData1FifoStatus.get_spi_radar_data1_fifo_underflow(self)
  spi_radar_data1_fifo_underflow = property(__get__spi_radar_data1_fifo_underflow,__set__spi_radar_data1_fifo_underflow,None,'')

  def __set__spi_fifo_ram_word1_overflow(self,value): SpiRadarData1FifoStatus.set_spi_fifo_ram_word1_overflow(self, value)
  def __get__spi_fifo_ram_word1_overflow(self): return SpiRadarData1FifoStatus.get_spi_fifo_ram_word1_overflow(self)
  spi_fifo_ram_word1_overflow = property(__get__spi_fifo_ram_word1_overflow,__set__spi_fifo_ram_word1_overflow,None,'')

  def __set__spi_fifo_ram_word1_underflow(self,value): SpiRadarData1FifoStatus.set_spi_fifo_ram_word1_underflow(self, value)
  def __get__spi_fifo_ram_word1_underflow(self): return SpiRadarData1FifoStatus.get_spi_fifo_ram_word1_underflow(self)
  spi_fifo_ram_word1_underflow = property(__get__spi_fifo_ram_word1_underflow,__set__spi_fifo_ram_word1_underflow,None,'')

  def __set__spi_fifo_sample1_overflow(self,value): SpiRadarData1FifoStatus.set_spi_fifo_sample1_overflow(self, value)
  def __get__spi_fifo_sample1_overflow(self): return SpiRadarData1FifoStatus.get_spi_fifo_sample1_overflow(self)
  spi_fifo_sample1_overflow = property(__get__spi_fifo_sample1_overflow,__set__spi_fifo_sample1_overflow,None,'')

  def __set__spi_fifo_sample1_underflow(self,value): SpiRadarData1FifoStatus.set_spi_fifo_sample1_underflow(self, value)
  def __get__spi_fifo_sample1_underflow(self): return SpiRadarData1FifoStatus.get_spi_fifo_sample1_underflow(self)
  spi_fifo_sample1_underflow = property(__get__spi_fifo_sample1_underflow,__set__spi_fifo_sample1_underflow,None,'')

  def __set__spi_clear_radar_data1_fifo_overflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_radar_data1_fifo_overflow(self, value)
  def __get__spi_clear_radar_data1_fifo_overflow(self): return SpiRadarData1ClearStatus.get_spi_clear_radar_data1_fifo_overflow(self)
  spi_clear_radar_data1_fifo_overflow = property(__get__spi_clear_radar_data1_fifo_overflow,__set__spi_clear_radar_data1_fifo_overflow,None,'')

  def __set__spi_clear_radar_data1_fifo_underflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_radar_data1_fifo_underflow(self, value)
  def __get__spi_clear_radar_data1_fifo_underflow(self): return SpiRadarData1ClearStatus.get_spi_clear_radar_data1_fifo_underflow(self)
  spi_clear_radar_data1_fifo_underflow = property(__get__spi_clear_radar_data1_fifo_underflow,__set__spi_clear_radar_data1_fifo_underflow,None,'')

  def __set__spi_clear_fifo_ram_word1_overflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_fifo_ram_word1_overflow(self, value)
  def __get__spi_clear_fifo_ram_word1_overflow(self): return SpiRadarData1ClearStatus.get_spi_clear_fifo_ram_word1_overflow(self)
  spi_clear_fifo_ram_word1_overflow = property(__get__spi_clear_fifo_ram_word1_overflow,__set__spi_clear_fifo_ram_word1_overflow,None,'')

  def __set__spi_clear_fifo_ram_word1_underflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_fifo_ram_word1_underflow(self, value)
  def __get__spi_clear_fifo_ram_word1_underflow(self): return SpiRadarData1ClearStatus.get_spi_clear_fifo_ram_word1_underflow(self)
  spi_clear_fifo_ram_word1_underflow = property(__get__spi_clear_fifo_ram_word1_underflow,__set__spi_clear_fifo_ram_word1_underflow,None,'')

  def __set__spi_clear_fifo_sample1_overflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_fifo_sample1_overflow(self, value)
  def __get__spi_clear_fifo_sample1_overflow(self): return SpiRadarData1ClearStatus.get_spi_clear_fifo_sample1_overflow(self)
  spi_clear_fifo_sample1_overflow = property(__get__spi_clear_fifo_sample1_overflow,__set__spi_clear_fifo_sample1_overflow,None,'')

  def __set__spi_clear_fifo_sample1_underflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_fifo_sample1_underflow(self, value)
  def __get__spi_clear_fifo_sample1_underflow(self): return SpiRadarData1ClearStatus.get_spi_clear_fifo_sample1_underflow(self)
  spi_clear_fifo_sample1_underflow = property(__get__spi_clear_fifo_sample1_underflow,__set__spi_clear_fifo_sample1_underflow,None,'')

  def __set__smpl_ram1_bist_en(self,value): RadarBistCtrl.set_smpl_ram1_bist_en(self, value)
  def __get__smpl_ram1_bist_en(self): return RadarBistCtrl.get_smpl_ram1_bist_en(self)
  smpl_ram1_bist_en = property(__get__smpl_ram1_bist_en,__set__smpl_ram1_bist_en,None,'')

  def __set__smpl_ram0_bist_en(self,value): RadarBistCtrl.set_smpl_ram0_bist_en(self, value)
  def __get__smpl_ram0_bist_en(self): return RadarBistCtrl.get_smpl_ram0_bist_en(self)
  smpl_ram0_bist_en = property(__get__smpl_ram0_bist_en,__set__smpl_ram0_bist_en,None,'')

  def __set__smpl_ram1_bist_pass(self,value): RadarBistStatus.set_smpl_ram1_bist_pass(self, value)
  def __get__smpl_ram1_bist_pass(self): return RadarBistStatus.get_smpl_ram1_bist_pass(self)
  smpl_ram1_bist_pass = property(__get__smpl_ram1_bist_pass,__set__smpl_ram1_bist_pass,None,'')

  def __set__smpl_ram1_bist_done(self,value): RadarBistStatus.set_smpl_ram1_bist_done(self, value)
  def __get__smpl_ram1_bist_done(self): return RadarBistStatus.get_smpl_ram1_bist_done(self)
  smpl_ram1_bist_done = property(__get__smpl_ram1_bist_done,__set__smpl_ram1_bist_done,None,'')

  def __set__smpl_ram0_bist_pass(self,value): RadarBistStatus.set_smpl_ram0_bist_pass(self, value)
  def __get__smpl_ram0_bist_pass(self): return RadarBistStatus.get_smpl_ram0_bist_pass(self)
  smpl_ram0_bist_pass = property(__get__smpl_ram0_bist_pass,__set__smpl_ram0_bist_pass,None,'')

  def __set__smpl_ram0_bist_done(self,value): RadarBistStatus.set_smpl_ram0_bist_done(self, value)
  def __get__smpl_ram0_bist_done(self): return RadarBistStatus.get_smpl_ram0_bist_done(self)
  smpl_ram0_bist_done = property(__get__smpl_ram0_bist_done,__set__smpl_ram0_bist_done,None,'')

  def __set__firmware_version_spi(self,value): FirmwareVersionSpi.set_firmware_version_spi(self, value)
  def __get__firmware_version_spi(self): return FirmwareVersionSpi.get_firmware_version_spi(self)
  firmware_version_spi = property(__get__firmware_version_spi,__set__firmware_version_spi,None,'')

  def __set__to_cpu_write_data(self,value): ToCpuWriteData.set_to_cpu_write_data(self, value)
  def __get__to_cpu_write_data(self): return ToCpuWriteData.get_to_cpu_write_data(self)
  to_cpu_write_data = property(__get__to_cpu_write_data,__set__to_cpu_write_data,None,'')

  def __set__spi_to_cpu_fifo_overflow(self,value): SpiMbFifoStatus.set_spi_to_cpu_fifo_overflow(self, value)
  def __get__spi_to_cpu_fifo_overflow(self): return SpiMbFifoStatus.get_spi_to_cpu_fifo_overflow(self)
  spi_to_cpu_fifo_overflow = property(__get__spi_to_cpu_fifo_overflow,__set__spi_to_cpu_fifo_overflow,None,'')

  def __set__spi_to_cpu_fifo_underflow(self,value): SpiMbFifoStatus.set_spi_to_cpu_fifo_underflow(self, value)
  def __get__spi_to_cpu_fifo_underflow(self): return SpiMbFifoStatus.get_spi_to_cpu_fifo_underflow(self)
  spi_to_cpu_fifo_underflow = property(__get__spi_to_cpu_fifo_underflow,__set__spi_to_cpu_fifo_underflow,None,'')

  def __set__spi_from_cpu_fifo_overflow(self,value): SpiMbFifoStatus.set_spi_from_cpu_fifo_overflow(self, value)
  def __get__spi_from_cpu_fifo_overflow(self): return SpiMbFifoStatus.get_spi_from_cpu_fifo_overflow(self)
  spi_from_cpu_fifo_overflow = property(__get__spi_from_cpu_fifo_overflow,__set__spi_from_cpu_fifo_overflow,None,'')

  def __set__spi_from_cpu_fifo_underflow(self,value): SpiMbFifoStatus.set_spi_from_cpu_fifo_underflow(self, value)
  def __get__spi_from_cpu_fifo_underflow(self): return SpiMbFifoStatus.get_spi_from_cpu_fifo_underflow(self)
  spi_from_cpu_fifo_underflow = property(__get__spi_from_cpu_fifo_underflow,__set__spi_from_cpu_fifo_underflow,None,'')

  def __set__to_cpu_fifo_empty(self,value): SpiMbFifoStatus.set_to_cpu_fifo_empty(self, value)
  def __get__to_cpu_fifo_empty(self): return SpiMbFifoStatus.get_to_cpu_fifo_empty(self)
  to_cpu_fifo_empty = property(__get__to_cpu_fifo_empty,__set__to_cpu_fifo_empty,None,'')

  def __set__from_cpu_data_valid(self,value): SpiMbFifoStatus.set_from_cpu_data_valid(self, value)
  def __get__from_cpu_data_valid(self): return SpiMbFifoStatus.get_from_cpu_data_valid(self)
  from_cpu_data_valid = property(__get__from_cpu_data_valid,__set__from_cpu_data_valid,None,'')

  def __set__to_cpu_fifo_full(self,value): SpiMbFifoStatus.set_to_cpu_fifo_full(self, value)
  def __get__to_cpu_fifo_full(self): return SpiMbFifoStatus.get_to_cpu_fifo_full(self)
  to_cpu_fifo_full = property(__get__to_cpu_fifo_full,__set__to_cpu_fifo_full,None,'')

  def __set__from_cpu_read_data(self,value): FromCpuReadData.set_from_cpu_read_data(self, value)
  def __get__from_cpu_read_data(self): return FromCpuReadData.get_from_cpu_read_data(self)
  from_cpu_read_data = property(__get__from_cpu_read_data,__set__from_cpu_read_data,None,'')

  def __set__spi_clear_to_cpu_fifo_overflow(self,value): SpiMbClearStatus.set_spi_clear_to_cpu_fifo_overflow(self, value)
  def __get__spi_clear_to_cpu_fifo_overflow(self): return SpiMbClearStatus.get_spi_clear_to_cpu_fifo_overflow(self)
  spi_clear_to_cpu_fifo_overflow = property(__get__spi_clear_to_cpu_fifo_overflow,__set__spi_clear_to_cpu_fifo_overflow,None,'')

  def __set__spi_clear_to_cpu_fifo_underflow(self,value): SpiMbClearStatus.set_spi_clear_to_cpu_fifo_underflow(self, value)
  def __get__spi_clear_to_cpu_fifo_underflow(self): return SpiMbClearStatus.get_spi_clear_to_cpu_fifo_underflow(self)
  spi_clear_to_cpu_fifo_underflow = property(__get__spi_clear_to_cpu_fifo_underflow,__set__spi_clear_to_cpu_fifo_underflow,None,'')

  def __set__spi_clear_from_cpu_fifo_overflow(self,value): SpiMbClearStatus.set_spi_clear_from_cpu_fifo_overflow(self, value)
  def __get__spi_clear_from_cpu_fifo_overflow(self): return SpiMbClearStatus.get_spi_clear_from_cpu_fifo_overflow(self)
  spi_clear_from_cpu_fifo_overflow = property(__get__spi_clear_from_cpu_fifo_overflow,__set__spi_clear_from_cpu_fifo_overflow,None,'')

  def __set__spi_clear_from_cpu_fifo_underflow(self,value): SpiMbClearStatus.set_spi_clear_from_cpu_fifo_underflow(self, value)
  def __get__spi_clear_from_cpu_fifo_underflow(self): return SpiMbClearStatus.get_spi_clear_from_cpu_fifo_underflow(self)
  spi_clear_from_cpu_fifo_underflow = property(__get__spi_clear_from_cpu_fifo_underflow,__set__spi_clear_from_cpu_fifo_underflow,None,'')

  def __set__to_mem_write_data(self,value): ToMemWriteData.set_to_mem_write_data(self, value)
  def __get__to_mem_write_data(self): return ToMemWriteData.get_to_mem_write_data(self)
  to_mem_write_data = property(__get__to_mem_write_data,__set__to_mem_write_data,None,'')

  def __set__spi_to_mem_fifo_overflow(self,value): SpiMemFifoStatus.set_spi_to_mem_fifo_overflow(self, value)
  def __get__spi_to_mem_fifo_overflow(self): return SpiMemFifoStatus.get_spi_to_mem_fifo_overflow(self)
  spi_to_mem_fifo_overflow = property(__get__spi_to_mem_fifo_overflow,__set__spi_to_mem_fifo_overflow,None,'')

  def __set__spi_to_mem_fifo_underflow(self,value): SpiMemFifoStatus.set_spi_to_mem_fifo_underflow(self, value)
  def __get__spi_to_mem_fifo_underflow(self): return SpiMemFifoStatus.get_spi_to_mem_fifo_underflow(self)
  spi_to_mem_fifo_underflow = property(__get__spi_to_mem_fifo_underflow,__set__spi_to_mem_fifo_underflow,None,'')

  def __set__spi_from_mem_fifo_overflow(self,value): SpiMemFifoStatus.set_spi_from_mem_fifo_overflow(self, value)
  def __get__spi_from_mem_fifo_overflow(self): return SpiMemFifoStatus.get_spi_from_mem_fifo_overflow(self)
  spi_from_mem_fifo_overflow = property(__get__spi_from_mem_fifo_overflow,__set__spi_from_mem_fifo_overflow,None,'')

  def __set__spi_from_mem_fifo_underflow(self,value): SpiMemFifoStatus.set_spi_from_mem_fifo_underflow(self, value)
  def __get__spi_from_mem_fifo_underflow(self): return SpiMemFifoStatus.get_spi_from_mem_fifo_underflow(self)
  spi_from_mem_fifo_underflow = property(__get__spi_from_mem_fifo_underflow,__set__spi_from_mem_fifo_underflow,None,'')

  def __set__from_mem_data_valid(self,value): SpiMemFifoStatus.set_from_mem_data_valid(self, value)
  def __get__from_mem_data_valid(self): return SpiMemFifoStatus.get_from_mem_data_valid(self)
  from_mem_data_valid = property(__get__from_mem_data_valid,__set__from_mem_data_valid,None,'')

  def __set__to_mem_fifo_empty(self,value): SpiMemFifoStatus.set_to_mem_fifo_empty(self, value)
  def __get__to_mem_fifo_empty(self): return SpiMemFifoStatus.get_to_mem_fifo_empty(self)
  to_mem_fifo_empty = property(__get__to_mem_fifo_empty,__set__to_mem_fifo_empty,None,'')

  def __set__to_mem_fifo_full(self,value): SpiMemFifoStatus.set_to_mem_fifo_full(self, value)
  def __get__to_mem_fifo_full(self): return SpiMemFifoStatus.get_to_mem_fifo_full(self)
  to_mem_fifo_full = property(__get__to_mem_fifo_full,__set__to_mem_fifo_full,None,'')

  def __set__from_mem_read_data(self,value): FromMemReadData.set_from_mem_read_data(self, value)
  def __get__from_mem_read_data(self): return FromMemReadData.get_from_mem_read_data(self)
  from_mem_read_data = property(__get__from_mem_read_data,__set__from_mem_read_data,None,'')

  def __set__spi_clear_to_mem_fifo_overflow(self,value): SpiMemClearStatus.set_spi_clear_to_mem_fifo_overflow(self, value)
  def __get__spi_clear_to_mem_fifo_overflow(self): return SpiMemClearStatus.get_spi_clear_to_mem_fifo_overflow(self)
  spi_clear_to_mem_fifo_overflow = property(__get__spi_clear_to_mem_fifo_overflow,__set__spi_clear_to_mem_fifo_overflow,None,'')

  def __set__spi_clear_to_mem_fifo_underflow(self,value): SpiMemClearStatus.set_spi_clear_to_mem_fifo_underflow(self, value)
  def __get__spi_clear_to_mem_fifo_underflow(self): return SpiMemClearStatus.get_spi_clear_to_mem_fifo_underflow(self)
  spi_clear_to_mem_fifo_underflow = property(__get__spi_clear_to_mem_fifo_underflow,__set__spi_clear_to_mem_fifo_underflow,None,'')

  def __set__spi_clear_from_mem_fifo_overflow(self,value): SpiMemClearStatus.set_spi_clear_from_mem_fifo_overflow(self, value)
  def __get__spi_clear_from_mem_fifo_overflow(self): return SpiMemClearStatus.get_spi_clear_from_mem_fifo_overflow(self)
  spi_clear_from_mem_fifo_overflow = property(__get__spi_clear_from_mem_fifo_overflow,__set__spi_clear_from_mem_fifo_overflow,None,'')

  def __set__spi_clear_from_mem_fifo_underflow(self,value): SpiMemClearStatus.set_spi_clear_from_mem_fifo_underflow(self, value)
  def __get__spi_clear_from_mem_fifo_underflow(self): return SpiMemClearStatus.get_spi_clear_from_mem_fifo_underflow(self)
  spi_clear_from_mem_fifo_underflow = property(__get__spi_clear_from_mem_fifo_underflow,__set__spi_clear_from_mem_fifo_underflow,None,'')

  def __set__mem_readback_mode(self,value): MemMode.set_mem_readback_mode(self, value)
  def __get__mem_readback_mode(self): return MemMode.get_mem_readback_mode(self)
  mem_readback_mode = property(__get__mem_readback_mode,__set__mem_readback_mode,None,'')

  def __set__mem_programming_mode(self,value): MemMode.set_mem_programming_mode(self, value)
  def __get__mem_programming_mode(self): return MemMode.get_mem_programming_mode(self)
  mem_programming_mode = property(__get__mem_programming_mode,__set__mem_programming_mode,None,'')

  def __set__mem_first_addr_msb(self,value): MemFirstAddrMsb.set_mem_first_addr_msb(self, value)
  def __get__mem_first_addr_msb(self): return MemFirstAddrMsb.get_mem_first_addr_msb(self)
  mem_first_addr_msb = property(__get__mem_first_addr_msb,__set__mem_first_addr_msb,None,'')

  def __set__mem_first_addr_lsb(self,value): MemFirstAddrLsb.set_mem_first_addr_lsb(self, value)
  def __get__mem_first_addr_lsb(self): return MemFirstAddrLsb.get_mem_first_addr_lsb(self)
  mem_first_addr_lsb = property(__get__mem_first_addr_lsb,__set__mem_first_addr_lsb,None,'')

  def __set__boot_from_otp_spi(self,value): BootFromOtpSpi.set_boot_from_otp_spi(self, value)
  def __get__boot_from_otp_spi(self): return BootFromOtpSpi.get_boot_from_otp_spi(self)
  boot_from_otp_spi = property(__get__boot_from_otp_spi,__set__boot_from_otp_spi,None,'')

  def __set__progmem_bist_en(self,value): McuBistCtrl.set_progmem_bist_en(self, value)
  def __get__progmem_bist_en(self): return McuBistCtrl.get_progmem_bist_en(self)
  progmem_bist_en = property(__get__progmem_bist_en,__set__progmem_bist_en,None,'')

  def __set__intram_bist_en(self,value): McuBistCtrl.set_intram_bist_en(self, value)
  def __get__intram_bist_en(self): return McuBistCtrl.get_intram_bist_en(self)
  intram_bist_en = property(__get__intram_bist_en,__set__intram_bist_en,None,'')

  def __set__progmem_bist_pass(self,value): McuBistStatus.set_progmem_bist_pass(self, value)
  def __get__progmem_bist_pass(self): return McuBistStatus.get_progmem_bist_pass(self)
  progmem_bist_pass = property(__get__progmem_bist_pass,__set__progmem_bist_pass,None,'')

  def __set__progmem_bist_done(self,value): McuBistStatus.set_progmem_bist_done(self, value)
  def __get__progmem_bist_done(self): return McuBistStatus.get_progmem_bist_done(self)
  progmem_bist_done = property(__get__progmem_bist_done,__set__progmem_bist_done,None,'')

  def __set__intram_bist_pass(self,value): McuBistStatus.set_intram_bist_pass(self, value)
  def __get__intram_bist_pass(self): return McuBistStatus.get_intram_bist_pass(self)
  intram_bist_pass = property(__get__intram_bist_pass,__set__intram_bist_pass,None,'')

  def __set__intram_bist_done(self,value): McuBistStatus.set_intram_bist_done(self, value)
  def __get__intram_bist_done(self): return McuBistStatus.get_intram_bist_done(self)
  intram_bist_done = property(__get__intram_bist_done,__set__intram_bist_done,None,'')

  def __set__spi_mode(self,value): SpiConfig.set_spi_mode(self, value)
  def __get__spi_mode(self): return SpiConfig.get_spi_mode(self)
  spi_mode = property(__get__spi_mode,__set__spi_mode,None,'')

  def __set__cpu_reset(self,value): CpuReset.set_cpu_reset(self, value)
  def __get__cpu_reset(self): return CpuReset.get_cpu_reset(self)
  cpu_reset = property(__get__cpu_reset,__set__cpu_reset,None,'')

  
  def __init__(self, block, name):
    super(SPI, self).__init__(block, name)
    with self._addattr():
      self.__set_register__  = block.__radar__.x4driver_set_spi_register
      self.__get_register__  = block.__radar__.x4driver_get_spi_register
      self.logger  = logging.getLogger("x4regmap.%s.%s" % (block.__class__.__name__, name))
    # Add registers to shadow 
    self.__add_reg__(ForceZero)
    self.__add_reg__(ForceOne)
    self.__add_reg__(ChipIdDig)
    self.__add_reg__(ChipIdSys)
    self.__add_reg__(Debug)
    self.__add_reg__(RadarDataSpi)
    self.__add_reg__(RadarDataSpiStatus)
    self.__add_reg__(SpiRadarDataClearStatus)
    self.__add_reg__(SpiRadarData0FifoStatus)
    self.__add_reg__(SpiRadarData0ClearStatus)
    self.__add_reg__(SpiRadarData1FifoStatus)
    self.__add_reg__(SpiRadarData1ClearStatus)
    self.__add_reg__(RadarBistCtrl)
    self.__add_reg__(RadarBistStatus)
    self.__add_reg__(FirmwareVersionSpi)
    self.__add_reg__(ToCpuWriteData)
    self.__add_reg__(SpiMbFifoStatus)
    self.__add_reg__(FromCpuReadData)
    self.__add_reg__(SpiMbClearStatus)
    self.__add_reg__(ToMemWriteData)
    self.__add_reg__(SpiMemFifoStatus)
    self.__add_reg__(FromMemReadData)
    self.__add_reg__(SpiMemClearStatus)
    self.__add_reg__(MemMode)
    self.__add_reg__(MemFirstAddrMsb)
    self.__add_reg__(MemFirstAddrLsb)
    self.__add_reg__(BootFromOtpSpi)
    self.__add_reg__(McuBistCtrl)
    self.__add_reg__(McuBistStatus)
    self.__add_reg__(SpiConfig)
    self.__add_reg__(CpuReset)
    self.__keys__ = ["force_zero",
                     "force_one",
                     "chip_id_dig",
                     "chip_id_sys",
                     "debug",
                     "radar_data_spi",
                     "spi_radar_data_spi_fifo_overflow",
                     "spi_radar_data_spi_fifo_underflow",
                     "spi_radar_data_pif_fifo_overflow",
                     "spi_radar_data_pif_fifo_underflow",
                     "radar_data_spi_fifo_empty",
                     "spi_clear_radar_data_spi_fifo_overflow",
                     "spi_clear_radar_data_spi_fifo_underflow",
                     "spi_clear_radar_data_pif_fifo_overflow",
                     "spi_clear_radar_data_pif_fifo_underflow",
                     "spi_radar_data0_fifo_overflow",
                     "spi_radar_data0_fifo_underflow",
                     "spi_fifo_ram_word0_overflow",
                     "spi_fifo_ram_word0_underflow",
                     "spi_fifo_sample0_overflow",
                     "spi_fifo_sample0_underflow",
                     "spi_clear_radar_data0_fifo_overflow",
                     "spi_clear_radar_data0_fifo_underflow",
                     "spi_clear_fifo_ram_word0_overflow",
                     "spi_clear_fifo_ram_word0_underflow",
                     "spi_clear_fifo_sample0_overflow",
                     "spi_clear_fifo_sample0_underflow",
                     "spi_radar_data1_fifo_overflow",
                     "spi_radar_data1_fifo_underflow",
                     "spi_fifo_ram_word1_overflow",
                     "spi_fifo_ram_word1_underflow",
                     "spi_fifo_sample1_overflow",
                     "spi_fifo_sample1_underflow",
                     "spi_clear_radar_data1_fifo_overflow",
                     "spi_clear_radar_data1_fifo_underflow",
                     "spi_clear_fifo_ram_word1_overflow",
                     "spi_clear_fifo_ram_word1_underflow",
                     "spi_clear_fifo_sample1_overflow",
                     "spi_clear_fifo_sample1_underflow",
                     "smpl_ram1_bist_en",
                     "smpl_ram0_bist_en",
                     "smpl_ram1_bist_pass",
                     "smpl_ram1_bist_done",
                     "smpl_ram0_bist_pass",
                     "smpl_ram0_bist_done",
                     "firmware_version_spi",
                     "to_cpu_write_data",
                     "spi_to_cpu_fifo_overflow",
                     "spi_to_cpu_fifo_underflow",
                     "spi_from_cpu_fifo_overflow",
                     "spi_from_cpu_fifo_underflow",
                     "to_cpu_fifo_empty",
                     "from_cpu_data_valid",
                     "to_cpu_fifo_full",
                     "from_cpu_read_data",
                     "spi_clear_to_cpu_fifo_overflow",
                     "spi_clear_to_cpu_fifo_underflow",
                     "spi_clear_from_cpu_fifo_overflow",
                     "spi_clear_from_cpu_fifo_underflow",
                     "to_mem_write_data",
                     "spi_to_mem_fifo_overflow",
                     "spi_to_mem_fifo_underflow",
                     "spi_from_mem_fifo_overflow",
                     "spi_from_mem_fifo_underflow",
                     "from_mem_data_valid",
                     "to_mem_fifo_empty",
                     "to_mem_fifo_full",
                     "from_mem_read_data",
                     "spi_clear_to_mem_fifo_overflow",
                     "spi_clear_to_mem_fifo_underflow",
                     "spi_clear_from_mem_fifo_overflow",
                     "spi_clear_from_mem_fifo_underflow",
                     "mem_readback_mode",
                     "mem_programming_mode",
                     "mem_first_addr_msb",
                     "mem_first_addr_lsb",
                     "boot_from_otp_spi",
                     "progmem_bist_en",
                     "intram_bist_en",
                     "progmem_bist_pass",
                     "progmem_bist_done",
                     "intram_bist_pass",
                     "intram_bist_done",
                     "spi_mode",
                     "cpu_reset",
                     ]

class XIF(RegMap):


  def __set__debug_xif(self,value): DebugXif.set_debug_xif(self, value)
  def __get__debug_xif(self): return DebugXif.get_debug_xif(self)
  debug_xif = property(__get__debug_xif,__set__debug_xif,None,'')

  def __set__sampler_preset_en(self,value): SamplerPresetMsb.set_sampler_preset_en(self, value)
  def __get__sampler_preset_en(self): return SamplerPresetMsb.get_sampler_preset_en(self)
  sampler_preset_en = property(__get__sampler_preset_en,__set__sampler_preset_en,None,'')

  def __set__sampler_preset_val_msb(self,value): SamplerPresetMsb.set_sampler_preset_val_msb(self, value)
  def __get__sampler_preset_val_msb(self): return SamplerPresetMsb.get_sampler_preset_val_msb(self)
  sampler_preset_val_msb = property(__get__sampler_preset_val_msb,__set__sampler_preset_val_msb,None,'')

  def __set__sampler_preset_val_lsb(self,value): SamplerPresetLsb.set_sampler_preset_val_lsb(self, value)
  def __get__sampler_preset_val_lsb(self): return SamplerPresetLsb.get_sampler_preset_val_lsb(self)
  sampler_preset_val_lsb = property(__get__sampler_preset_val_lsb,__set__sampler_preset_val_lsb,None,'')

  def __set__dac_trim_a(self,value): DacTrim.set_dac_trim_a(self, value)
  def __get__dac_trim_a(self): return DacTrim.get_dac_trim_a(self)
  dac_trim_a = property(__get__dac_trim_a,__set__dac_trim_a,None,'')

  def __set__dac_trim_b(self,value): DacTrim.set_dac_trim_b(self, value)
  def __get__dac_trim_b(self): return DacTrim.get_dac_trim_b(self)
  dac_trim_b = property(__get__dac_trim_b,__set__dac_trim_b,None,'')

  def __set__preamp_trim(self,value): PreampTrim.set_preamp_trim(self, value)
  def __get__preamp_trim(self): return PreampTrim.get_preamp_trim(self)
  preamp_trim = property(__get__preamp_trim,__set__preamp_trim,None,'')

  def __set__rx_fe_anatestreq(self,value): RxFeAnatestreq.set_rx_fe_anatestreq(self, value)
  def __get__rx_fe_anatestreq(self): return RxFeAnatestreq.get_rx_fe_anatestreq(self)
  rx_fe_anatestreq = property(__get__rx_fe_anatestreq,__set__rx_fe_anatestreq,None,'')

  def __set__lna_anatestreq(self,value): LnaAnatestreq.set_lna_anatestreq(self, value)
  def __get__lna_anatestreq(self): return LnaAnatestreq.get_lna_anatestreq(self)
  lna_anatestreq = property(__get__lna_anatestreq,__set__lna_anatestreq,None,'')

  def __set__dac_anatestreq(self,value): DacAnatestreq.set_dac_anatestreq(self, value)
  def __get__dac_anatestreq(self): return DacAnatestreq.get_dac_anatestreq(self)
  dac_anatestreq = property(__get__dac_anatestreq,__set__dac_anatestreq,None,'')

  def __set__vref_trim(self,value): VrefTrim.set_vref_trim(self, value)
  def __get__vref_trim(self): return VrefTrim.get_vref_trim(self)
  vref_trim = property(__get__vref_trim,__set__vref_trim,None,'')

  def __set__iref_trim(self,value): IrefTrim.set_iref_trim(self, value)
  def __get__iref_trim(self): return IrefTrim.get_iref_trim(self)
  iref_trim = property(__get__iref_trim,__set__iref_trim,None,'')

  def __set__apc_temp_trim(self,value): ApcTempTrim.set_apc_temp_trim(self, value)
  def __get__apc_temp_trim(self): return ApcTempTrim.get_apc_temp_trim(self)
  apc_temp_trim = property(__get__apc_temp_trim,__set__apc_temp_trim,None,'')

  
  def __init__(self, block, name):
    super(XIF, self).__init__(block, name)
    with self._addattr():
      self.__set_register__  = block.__radar__.x4driver_set_xif_register
      self.__get_register__  = block.__radar__.x4driver_get_xif_register
      self.logger  = logging.getLogger("x4regmap.%s.%s" % (block.__class__.__name__, name))
    # Add registers to shadow 
    self.__add_reg__(DebugXif)
    self.__add_reg__(SamplerPresetMsb)
    self.__add_reg__(SamplerPresetLsb)
    self.__add_reg__(DacTrim)
    self.__add_reg__(PreampTrim)
    self.__add_reg__(RxFeAnatestreq)
    self.__add_reg__(LnaAnatestreq)
    self.__add_reg__(DacAnatestreq)
    self.__add_reg__(VrefTrim)
    self.__add_reg__(IrefTrim)
    self.__add_reg__(ApcTempTrim)
    self.__keys__ = ["debug_xif",
                     "sampler_preset_en",
                     "sampler_preset_val_msb",
                     "sampler_preset_val_lsb",
                     "dac_trim_a",
                     "dac_trim_b",
                     "preamp_trim",
                     "rx_fe_anatestreq",
                     "lna_anatestreq",
                     "dac_anatestreq",
                     "vref_trim",
                     "iref_trim",
                     "apc_temp_trim",
                     ]

class X4(RegBlock):

  def __set__firmware_version(self,value): FirmwareVersion.set_firmware_version(self.pif, value)
  def __get__firmware_version(self): return FirmwareVersion.get_firmware_version(self.pif)
  firmware_version = property(__get__firmware_version,__set__firmware_version,None,'')

  def __set__gpio_o(self,value): GpioOut.set_gpio_o(self.pif, value)
  def __get__gpio_o(self): return GpioOut.get_gpio_o(self.pif)
  gpio_o = property(__get__gpio_o,__set__gpio_o,None,'')

  def __set__gpio_i(self,value): GpioIn.set_gpio_i(self.pif, value)
  def __get__gpio_i(self): return GpioIn.get_gpio_i(self.pif)
  gpio_i = property(__get__gpio_i,__set__gpio_i,None,'')

  def __set__gpio_output_enable(self,value): GpioOe.set_gpio_output_enable(self.pif, value)
  def __get__gpio_output_enable(self): return GpioOe.get_gpio_output_enable(self.pif)
  gpio_output_enable = property(__get__gpio_output_enable,__set__gpio_output_enable,None,'')

  def __set__rx_mframes(self,value): RxMframes.set_rx_mframes(self.pif, value)
  def __get__rx_mframes(self): return RxMframes.get_rx_mframes(self.pif)
  rx_mframes = property(__get__rx_mframes,__set__rx_mframes,None,'')

  def __set__hpf_disable_feedforward(self,value): SmplMode.set_hpf_disable_feedforward(self.pif, value)
  def __get__hpf_disable_feedforward(self): return SmplMode.get_hpf_disable_feedforward(self.pif)
  hpf_disable_feedforward = property(__get__hpf_disable_feedforward,__set__hpf_disable_feedforward,None,'')

  def __set__powerdown_sampler(self,value): SmplMode.set_powerdown_sampler(self.pif, value)
  def __get__powerdown_sampler(self): return SmplMode.get_powerdown_sampler(self.pif)
  powerdown_sampler = property(__get__powerdown_sampler,__set__powerdown_sampler,None,'')

  def __set__rx_downconversion_enable(self,value): SmplMode.set_rx_downconversion_enable(self.pif, value)
  def __get__rx_downconversion_enable(self): return SmplMode.get_rx_downconversion_enable(self.pif)
  rx_downconversion_enable = property(__get__rx_downconversion_enable,__set__rx_downconversion_enable,None,'')

  def __set__rx_downconversion_coeff_i1(self,value): RxDownconversionCoeffI1.set_rx_downconversion_coeff_i1(self.pif, value)
  def __get__rx_downconversion_coeff_i1(self): return RxDownconversionCoeffI1.get_rx_downconversion_coeff_i1(self.pif)
  rx_downconversion_coeff_i1 = property(__get__rx_downconversion_coeff_i1,__set__rx_downconversion_coeff_i1,None,'')

  def __set__rx_downconversion_coeff_i2(self,value): RxDownconversionCoeffI2.set_rx_downconversion_coeff_i2(self.pif, value)
  def __get__rx_downconversion_coeff_i2(self): return RxDownconversionCoeffI2.get_rx_downconversion_coeff_i2(self.pif)
  rx_downconversion_coeff_i2 = property(__get__rx_downconversion_coeff_i2,__set__rx_downconversion_coeff_i2,None,'')

  def __set__rx_downconversion_coeff_q1(self,value): RxDownconversionCoeffQ1.set_rx_downconversion_coeff_q1(self.pif, value)
  def __get__rx_downconversion_coeff_q1(self): return RxDownconversionCoeffQ1.get_rx_downconversion_coeff_q1(self.pif)
  rx_downconversion_coeff_q1 = property(__get__rx_downconversion_coeff_q1,__set__rx_downconversion_coeff_q1,None,'')

  def __set__rx_downconversion_coeff_q2(self,value): RxDownconversionCoeffQ2.set_rx_downconversion_coeff_q2(self.pif, value)
  def __get__rx_downconversion_coeff_q2(self): return RxDownconversionCoeffQ2.get_rx_downconversion_coeff_q2(self.pif)
  rx_downconversion_coeff_q2 = property(__get__rx_downconversion_coeff_q2,__set__rx_downconversion_coeff_q2,None,'')

  def __set__rx_ram_write_offset_msb(self,value): RxRamWriteOffsetMsb.set_rx_ram_write_offset_msb(self.pif, value)
  def __get__rx_ram_write_offset_msb(self): return RxRamWriteOffsetMsb.get_rx_ram_write_offset_msb(self.pif)
  rx_ram_write_offset_msb = property(__get__rx_ram_write_offset_msb,__set__rx_ram_write_offset_msb,None,'')

  def __set__rx_ram_line_first_msb(self,value): RxRamLineFirstMsb.set_rx_ram_line_first_msb(self.pif, value)
  def __get__rx_ram_line_first_msb(self): return RxRamLineFirstMsb.get_rx_ram_line_first_msb(self.pif)
  rx_ram_line_first_msb = property(__get__rx_ram_line_first_msb,__set__rx_ram_line_first_msb,None,'')

  def __set__rx_ram_line_last_msb(self,value): RxRamLineLastMsb.set_rx_ram_line_last_msb(self.pif, value)
  def __get__rx_ram_line_last_msb(self): return RxRamLineLastMsb.get_rx_ram_line_last_msb(self.pif)
  rx_ram_line_last_msb = property(__get__rx_ram_line_last_msb,__set__rx_ram_line_last_msb,None,'')

  def __set__rx_ram_write_offset_lsb(self,value): RxRamLsbs.set_rx_ram_write_offset_lsb(self.pif, value)
  def __get__rx_ram_write_offset_lsb(self): return RxRamLsbs.get_rx_ram_write_offset_lsb(self.pif)
  rx_ram_write_offset_lsb = property(__get__rx_ram_write_offset_lsb,__set__rx_ram_write_offset_lsb,None,'')

  def __set__rx_ram_line_first_lsb(self,value): RxRamLsbs.set_rx_ram_line_first_lsb(self.pif, value)
  def __get__rx_ram_line_first_lsb(self): return RxRamLsbs.get_rx_ram_line_first_lsb(self.pif)
  rx_ram_line_first_lsb = property(__get__rx_ram_line_first_lsb,__set__rx_ram_line_first_lsb,None,'')

  def __set__rx_ram_line_last_lsb(self,value): RxRamLsbs.set_rx_ram_line_last_lsb(self.pif, value)
  def __get__rx_ram_line_last_lsb(self): return RxRamLsbs.get_rx_ram_line_last_lsb(self.pif)
  rx_ram_line_last_lsb = property(__get__rx_ram_line_last_lsb,__set__rx_ram_line_last_lsb,None,'')

  def __set__rx_counter_num_bytes(self,value): RxCounterNumBytes.set_rx_counter_num_bytes(self.pif, value)
  def __get__rx_counter_num_bytes(self): return RxCounterNumBytes.get_rx_counter_num_bytes(self.pif)
  rx_counter_num_bytes = property(__get__rx_counter_num_bytes,__set__rx_counter_num_bytes,None,'')

  def __set__rx_counter_lsb(self,value): RxCounterLsb.set_rx_counter_lsb(self.pif, value)
  def __get__rx_counter_lsb(self): return RxCounterLsb.get_rx_counter_lsb(self.pif)
  rx_counter_lsb = property(__get__rx_counter_lsb,__set__rx_counter_lsb,None,'')

  def __set__radar_data_pif(self,value): RadarDataPif.set_radar_data_pif(self.pif, value)
  def __get__radar_data_pif(self): return RadarDataPif.get_radar_data_pif(self.pif)
  radar_data_pif = property(__get__radar_data_pif,__set__radar_data_pif,None,'')

  def __set__pif_radar_data_pif_fifo_overflow(self,value): RadarDataPifStatus.set_pif_radar_data_pif_fifo_overflow(self.pif, value)
  def __get__pif_radar_data_pif_fifo_overflow(self): return RadarDataPifStatus.get_pif_radar_data_pif_fifo_overflow(self.pif)
  pif_radar_data_pif_fifo_overflow = property(__get__pif_radar_data_pif_fifo_overflow,__set__pif_radar_data_pif_fifo_overflow,None,'')

  def __set__pif_radar_data_pif_fifo_underflow(self,value): RadarDataPifStatus.set_pif_radar_data_pif_fifo_underflow(self.pif, value)
  def __get__pif_radar_data_pif_fifo_underflow(self): return RadarDataPifStatus.get_pif_radar_data_pif_fifo_underflow(self.pif)
  pif_radar_data_pif_fifo_underflow = property(__get__pif_radar_data_pif_fifo_underflow,__set__pif_radar_data_pif_fifo_underflow,None,'')

  def __set__pif_radar_data_spi_fifo_overflow(self,value): RadarDataPifStatus.set_pif_radar_data_spi_fifo_overflow(self.pif, value)
  def __get__pif_radar_data_spi_fifo_overflow(self): return RadarDataPifStatus.get_pif_radar_data_spi_fifo_overflow(self.pif)
  pif_radar_data_spi_fifo_overflow = property(__get__pif_radar_data_spi_fifo_overflow,__set__pif_radar_data_spi_fifo_overflow,None,'')

  def __set__pif_radar_data_spi_fifo_underflow(self,value): RadarDataPifStatus.set_pif_radar_data_spi_fifo_underflow(self.pif, value)
  def __get__pif_radar_data_spi_fifo_underflow(self): return RadarDataPifStatus.get_pif_radar_data_spi_fifo_underflow(self.pif)
  pif_radar_data_spi_fifo_underflow = property(__get__pif_radar_data_spi_fifo_underflow,__set__pif_radar_data_spi_fifo_underflow,None,'')

  def __set__radar_data_pif_fifo_empty(self,value): RadarDataPifStatus.set_radar_data_pif_fifo_empty(self.pif, value)
  def __get__radar_data_pif_fifo_empty(self): return RadarDataPifStatus.get_radar_data_pif_fifo_empty(self.pif)
  radar_data_pif_fifo_empty = property(__get__radar_data_pif_fifo_empty,__set__radar_data_pif_fifo_empty,None,'')

  def __set__pif_clear_radar_data_pif_fifo_overflow(self,value): PifRadarDataClearStatus.set_pif_clear_radar_data_pif_fifo_overflow(self.pif, value)
  def __get__pif_clear_radar_data_pif_fifo_overflow(self): return PifRadarDataClearStatus.get_pif_clear_radar_data_pif_fifo_overflow(self.pif)
  pif_clear_radar_data_pif_fifo_overflow = property(__get__pif_clear_radar_data_pif_fifo_overflow,__set__pif_clear_radar_data_pif_fifo_overflow,None,'')

  def __set__pif_clear_radar_data_pif_fifo_underflow(self,value): PifRadarDataClearStatus.set_pif_clear_radar_data_pif_fifo_underflow(self.pif, value)
  def __get__pif_clear_radar_data_pif_fifo_underflow(self): return PifRadarDataClearStatus.get_pif_clear_radar_data_pif_fifo_underflow(self.pif)
  pif_clear_radar_data_pif_fifo_underflow = property(__get__pif_clear_radar_data_pif_fifo_underflow,__set__pif_clear_radar_data_pif_fifo_underflow,None,'')

  def __set__pif_clear_radar_data_spi_fifo_overflow(self,value): PifRadarDataClearStatus.set_pif_clear_radar_data_spi_fifo_overflow(self.pif, value)
  def __get__pif_clear_radar_data_spi_fifo_overflow(self): return PifRadarDataClearStatus.get_pif_clear_radar_data_spi_fifo_overflow(self.pif)
  pif_clear_radar_data_spi_fifo_overflow = property(__get__pif_clear_radar_data_spi_fifo_overflow,__set__pif_clear_radar_data_spi_fifo_overflow,None,'')

  def __set__pif_clear_radar_data_spi_fifo_underflow(self,value): PifRadarDataClearStatus.set_pif_clear_radar_data_spi_fifo_underflow(self.pif, value)
  def __get__pif_clear_radar_data_spi_fifo_underflow(self): return PifRadarDataClearStatus.get_pif_clear_radar_data_spi_fifo_underflow(self.pif)
  pif_clear_radar_data_spi_fifo_underflow = property(__get__pif_clear_radar_data_spi_fifo_underflow,__set__pif_clear_radar_data_spi_fifo_underflow,None,'')

  def __set__pif_radar_data0_fifo_overflow(self,value): PifRadarData0FifoStatus.set_pif_radar_data0_fifo_overflow(self.pif, value)
  def __get__pif_radar_data0_fifo_overflow(self): return PifRadarData0FifoStatus.get_pif_radar_data0_fifo_overflow(self.pif)
  pif_radar_data0_fifo_overflow = property(__get__pif_radar_data0_fifo_overflow,__set__pif_radar_data0_fifo_overflow,None,'')

  def __set__pif_radar_data0_fifo_underflow(self,value): PifRadarData0FifoStatus.set_pif_radar_data0_fifo_underflow(self.pif, value)
  def __get__pif_radar_data0_fifo_underflow(self): return PifRadarData0FifoStatus.get_pif_radar_data0_fifo_underflow(self.pif)
  pif_radar_data0_fifo_underflow = property(__get__pif_radar_data0_fifo_underflow,__set__pif_radar_data0_fifo_underflow,None,'')

  def __set__pif_fifo_ram_word0_overflow(self,value): PifRadarData0FifoStatus.set_pif_fifo_ram_word0_overflow(self.pif, value)
  def __get__pif_fifo_ram_word0_overflow(self): return PifRadarData0FifoStatus.get_pif_fifo_ram_word0_overflow(self.pif)
  pif_fifo_ram_word0_overflow = property(__get__pif_fifo_ram_word0_overflow,__set__pif_fifo_ram_word0_overflow,None,'')

  def __set__pif_fifo_ram_word0_underflow(self,value): PifRadarData0FifoStatus.set_pif_fifo_ram_word0_underflow(self.pif, value)
  def __get__pif_fifo_ram_word0_underflow(self): return PifRadarData0FifoStatus.get_pif_fifo_ram_word0_underflow(self.pif)
  pif_fifo_ram_word0_underflow = property(__get__pif_fifo_ram_word0_underflow,__set__pif_fifo_ram_word0_underflow,None,'')

  def __set__pif_fifo_sample0_overflow(self,value): PifRadarData0FifoStatus.set_pif_fifo_sample0_overflow(self.pif, value)
  def __get__pif_fifo_sample0_overflow(self): return PifRadarData0FifoStatus.get_pif_fifo_sample0_overflow(self.pif)
  pif_fifo_sample0_overflow = property(__get__pif_fifo_sample0_overflow,__set__pif_fifo_sample0_overflow,None,'')

  def __set__pif_fifo_sample0_underflow(self,value): PifRadarData0FifoStatus.set_pif_fifo_sample0_underflow(self.pif, value)
  def __get__pif_fifo_sample0_underflow(self): return PifRadarData0FifoStatus.get_pif_fifo_sample0_underflow(self.pif)
  pif_fifo_sample0_underflow = property(__get__pif_fifo_sample0_underflow,__set__pif_fifo_sample0_underflow,None,'')

  def __set__pif_clear_radar_data0_fifo_overflow(self,value): PifRadarData0ClearStatus.set_pif_clear_radar_data0_fifo_overflow(self.pif, value)
  def __get__pif_clear_radar_data0_fifo_overflow(self): return PifRadarData0ClearStatus.get_pif_clear_radar_data0_fifo_overflow(self.pif)
  pif_clear_radar_data0_fifo_overflow = property(__get__pif_clear_radar_data0_fifo_overflow,__set__pif_clear_radar_data0_fifo_overflow,None,'')

  def __set__pif_clear_radar_data0_fifo_underflow(self,value): PifRadarData0ClearStatus.set_pif_clear_radar_data0_fifo_underflow(self.pif, value)
  def __get__pif_clear_radar_data0_fifo_underflow(self): return PifRadarData0ClearStatus.get_pif_clear_radar_data0_fifo_underflow(self.pif)
  pif_clear_radar_data0_fifo_underflow = property(__get__pif_clear_radar_data0_fifo_underflow,__set__pif_clear_radar_data0_fifo_underflow,None,'')

  def __set__pif_clear_fifo_ram_word0_overflow(self,value): PifRadarData0ClearStatus.set_pif_clear_fifo_ram_word0_overflow(self.pif, value)
  def __get__pif_clear_fifo_ram_word0_overflow(self): return PifRadarData0ClearStatus.get_pif_clear_fifo_ram_word0_overflow(self.pif)
  pif_clear_fifo_ram_word0_overflow = property(__get__pif_clear_fifo_ram_word0_overflow,__set__pif_clear_fifo_ram_word0_overflow,None,'')

  def __set__pif_clear_fifo_ram_word0_underflow(self,value): PifRadarData0ClearStatus.set_pif_clear_fifo_ram_word0_underflow(self.pif, value)
  def __get__pif_clear_fifo_ram_word0_underflow(self): return PifRadarData0ClearStatus.get_pif_clear_fifo_ram_word0_underflow(self.pif)
  pif_clear_fifo_ram_word0_underflow = property(__get__pif_clear_fifo_ram_word0_underflow,__set__pif_clear_fifo_ram_word0_underflow,None,'')

  def __set__pif_clear_fifo_sample0_overflow(self,value): PifRadarData0ClearStatus.set_pif_clear_fifo_sample0_overflow(self.pif, value)
  def __get__pif_clear_fifo_sample0_overflow(self): return PifRadarData0ClearStatus.get_pif_clear_fifo_sample0_overflow(self.pif)
  pif_clear_fifo_sample0_overflow = property(__get__pif_clear_fifo_sample0_overflow,__set__pif_clear_fifo_sample0_overflow,None,'')

  def __set__pif_clear_fifo_sample0_underflow(self,value): PifRadarData0ClearStatus.set_pif_clear_fifo_sample0_underflow(self.pif, value)
  def __get__pif_clear_fifo_sample0_underflow(self): return PifRadarData0ClearStatus.get_pif_clear_fifo_sample0_underflow(self.pif)
  pif_clear_fifo_sample0_underflow = property(__get__pif_clear_fifo_sample0_underflow,__set__pif_clear_fifo_sample0_underflow,None,'')

  def __set__pif_radar_data1_fifo_overflow(self,value): PifRadarData1FifoStatus.set_pif_radar_data1_fifo_overflow(self.pif, value)
  def __get__pif_radar_data1_fifo_overflow(self): return PifRadarData1FifoStatus.get_pif_radar_data1_fifo_overflow(self.pif)
  pif_radar_data1_fifo_overflow = property(__get__pif_radar_data1_fifo_overflow,__set__pif_radar_data1_fifo_overflow,None,'')

  def __set__pif_radar_data1_fifo_underflow(self,value): PifRadarData1FifoStatus.set_pif_radar_data1_fifo_underflow(self.pif, value)
  def __get__pif_radar_data1_fifo_underflow(self): return PifRadarData1FifoStatus.get_pif_radar_data1_fifo_underflow(self.pif)
  pif_radar_data1_fifo_underflow = property(__get__pif_radar_data1_fifo_underflow,__set__pif_radar_data1_fifo_underflow,None,'')

  def __set__pif_fifo_ram_word1_overflow(self,value): PifRadarData1FifoStatus.set_pif_fifo_ram_word1_overflow(self.pif, value)
  def __get__pif_fifo_ram_word1_overflow(self): return PifRadarData1FifoStatus.get_pif_fifo_ram_word1_overflow(self.pif)
  pif_fifo_ram_word1_overflow = property(__get__pif_fifo_ram_word1_overflow,__set__pif_fifo_ram_word1_overflow,None,'')

  def __set__pif_fifo_ram_word1_underflow(self,value): PifRadarData1FifoStatus.set_pif_fifo_ram_word1_underflow(self.pif, value)
  def __get__pif_fifo_ram_word1_underflow(self): return PifRadarData1FifoStatus.get_pif_fifo_ram_word1_underflow(self.pif)
  pif_fifo_ram_word1_underflow = property(__get__pif_fifo_ram_word1_underflow,__set__pif_fifo_ram_word1_underflow,None,'')

  def __set__pif_fifo_sample1_overflow(self,value): PifRadarData1FifoStatus.set_pif_fifo_sample1_overflow(self.pif, value)
  def __get__pif_fifo_sample1_overflow(self): return PifRadarData1FifoStatus.get_pif_fifo_sample1_overflow(self.pif)
  pif_fifo_sample1_overflow = property(__get__pif_fifo_sample1_overflow,__set__pif_fifo_sample1_overflow,None,'')

  def __set__pif_fifo_sample1_underflow(self,value): PifRadarData1FifoStatus.set_pif_fifo_sample1_underflow(self.pif, value)
  def __get__pif_fifo_sample1_underflow(self): return PifRadarData1FifoStatus.get_pif_fifo_sample1_underflow(self.pif)
  pif_fifo_sample1_underflow = property(__get__pif_fifo_sample1_underflow,__set__pif_fifo_sample1_underflow,None,'')

  def __set__pif_clear_radar_data1_fifo_overflow(self,value): PifRadarData1ClearStatus.set_pif_clear_radar_data1_fifo_overflow(self.pif, value)
  def __get__pif_clear_radar_data1_fifo_overflow(self): return PifRadarData1ClearStatus.get_pif_clear_radar_data1_fifo_overflow(self.pif)
  pif_clear_radar_data1_fifo_overflow = property(__get__pif_clear_radar_data1_fifo_overflow,__set__pif_clear_radar_data1_fifo_overflow,None,'')

  def __set__pif_clear_radar_data1_fifo_underflow(self,value): PifRadarData1ClearStatus.set_pif_clear_radar_data1_fifo_underflow(self.pif, value)
  def __get__pif_clear_radar_data1_fifo_underflow(self): return PifRadarData1ClearStatus.get_pif_clear_radar_data1_fifo_underflow(self.pif)
  pif_clear_radar_data1_fifo_underflow = property(__get__pif_clear_radar_data1_fifo_underflow,__set__pif_clear_radar_data1_fifo_underflow,None,'')

  def __set__pif_clear_fifo_ram_word1_overflow(self,value): PifRadarData1ClearStatus.set_pif_clear_fifo_ram_word1_overflow(self.pif, value)
  def __get__pif_clear_fifo_ram_word1_overflow(self): return PifRadarData1ClearStatus.get_pif_clear_fifo_ram_word1_overflow(self.pif)
  pif_clear_fifo_ram_word1_overflow = property(__get__pif_clear_fifo_ram_word1_overflow,__set__pif_clear_fifo_ram_word1_overflow,None,'')

  def __set__pif_clear_fifo_ram_word1_underflow(self,value): PifRadarData1ClearStatus.set_pif_clear_fifo_ram_word1_underflow(self.pif, value)
  def __get__pif_clear_fifo_ram_word1_underflow(self): return PifRadarData1ClearStatus.get_pif_clear_fifo_ram_word1_underflow(self.pif)
  pif_clear_fifo_ram_word1_underflow = property(__get__pif_clear_fifo_ram_word1_underflow,__set__pif_clear_fifo_ram_word1_underflow,None,'')

  def __set__pif_clear_fifo_sample1_overflow(self,value): PifRadarData1ClearStatus.set_pif_clear_fifo_sample1_overflow(self.pif, value)
  def __get__pif_clear_fifo_sample1_overflow(self): return PifRadarData1ClearStatus.get_pif_clear_fifo_sample1_overflow(self.pif)
  pif_clear_fifo_sample1_overflow = property(__get__pif_clear_fifo_sample1_overflow,__set__pif_clear_fifo_sample1_overflow,None,'')

  def __set__pif_clear_fifo_sample1_underflow(self,value): PifRadarData1ClearStatus.set_pif_clear_fifo_sample1_underflow(self.pif, value)
  def __get__pif_clear_fifo_sample1_underflow(self): return PifRadarData1ClearStatus.get_pif_clear_fifo_sample1_underflow(self.pif)
  pif_clear_fifo_sample1_underflow = property(__get__pif_clear_fifo_sample1_underflow,__set__pif_clear_fifo_sample1_underflow,None,'')

  def __set__ram_select(self,value): RamSelect.set_ram_select(self.pif, value)
  def __get__ram_select(self): return RamSelect.get_ram_select(self.pif)
  ram_select = property(__get__ram_select,__set__ram_select,None,'')

  def __set__radar_readout_idle(self,value): RadarReadoutIdle.set_radar_readout_idle(self.pif, value)
  def __get__radar_readout_idle(self): return RadarReadoutIdle.get_radar_readout_idle(self.pif)
  radar_readout_idle = property(__get__radar_readout_idle,__set__radar_readout_idle,None,'')

  def __set__trx_clocks_per_pulse(self,value): TrxClocksPerPulse.set_trx_clocks_per_pulse(self.pif, value)
  def __get__trx_clocks_per_pulse(self): return TrxClocksPerPulse.get_trx_clocks_per_pulse(self.pif)
  trx_clocks_per_pulse = property(__get__trx_clocks_per_pulse,__set__trx_clocks_per_pulse,None,'')

  def __set__rx_mframes_coarse(self,value): RxMframesCoarse.set_rx_mframes_coarse(self.pif, value)
  def __get__rx_mframes_coarse(self): return RxMframesCoarse.get_rx_mframes_coarse(self.pif)
  rx_mframes_coarse = property(__get__rx_mframes_coarse,__set__rx_mframes_coarse,None,'')

  def __set__trx_pulses_per_step_msb(self,value): TrxPulsesPerStepMsb.set_trx_pulses_per_step_msb(self.pif, value)
  def __get__trx_pulses_per_step_msb(self): return TrxPulsesPerStepMsb.get_trx_pulses_per_step_msb(self.pif)
  trx_pulses_per_step_msb = property(__get__trx_pulses_per_step_msb,__set__trx_pulses_per_step_msb,None,'')

  def __set__trx_pulses_per_step_lsb(self,value): TrxPulsesPerStepLsb.set_trx_pulses_per_step_lsb(self.pif, value)
  def __get__trx_pulses_per_step_lsb(self): return TrxPulsesPerStepLsb.get_trx_pulses_per_step_lsb(self.pif)
  trx_pulses_per_step_lsb = property(__get__trx_pulses_per_step_lsb,__set__trx_pulses_per_step_lsb,None,'')

  def __set__trx_dac_max_h(self,value): TrxDacMaxH.set_trx_dac_max_h(self.pif, value)
  def __get__trx_dac_max_h(self): return TrxDacMaxH.get_trx_dac_max_h(self.pif)
  trx_dac_max_h = property(__get__trx_dac_max_h,__set__trx_dac_max_h,None,'')

  def __set__trx_dac_max_l(self,value): TrxDacMaxL.set_trx_dac_max_l(self.pif, value)
  def __get__trx_dac_max_l(self): return TrxDacMaxL.get_trx_dac_max_l(self.pif)
  trx_dac_max_l = property(__get__trx_dac_max_l,__set__trx_dac_max_l,None,'')

  def __set__trx_dac_min_h(self,value): TrxDacMinH.set_trx_dac_min_h(self.pif, value)
  def __get__trx_dac_min_h(self): return TrxDacMinH.get_trx_dac_min_h(self.pif)
  trx_dac_min_h = property(__get__trx_dac_min_h,__set__trx_dac_min_h,None,'')

  def __set__trx_dac_min_l(self,value): TrxDacMinL.set_trx_dac_min_l(self.pif, value)
  def __get__trx_dac_min_l(self): return TrxDacMinL.get_trx_dac_min_l(self.pif)
  trx_dac_min_l = property(__get__trx_dac_min_l,__set__trx_dac_min_l,None,'')

  def __set__trx_auto_bidir_enable(self,value): TrxDacStep.set_trx_auto_bidir_enable(self.pif, value)
  def __get__trx_auto_bidir_enable(self): return TrxDacStep.get_trx_auto_bidir_enable(self.pif)
  trx_auto_bidir_enable = property(__get__trx_auto_bidir_enable,__set__trx_auto_bidir_enable,None,'')

  def __set__trx_sweep_phase(self,value): TrxDacStep.set_trx_sweep_phase(self.pif, value)
  def __get__trx_sweep_phase(self): return TrxDacStep.get_trx_sweep_phase(self.pif)
  trx_sweep_phase = property(__get__trx_sweep_phase,__set__trx_sweep_phase,None,'')

  def __set__trx_dac_settle_clog2(self,value): TrxDacStep.set_trx_dac_settle_clog2(self.pif, value)
  def __get__trx_dac_settle_clog2(self): return TrxDacStep.get_trx_dac_settle_clog2(self.pif)
  trx_dac_settle_clog2 = property(__get__trx_dac_settle_clog2,__set__trx_dac_settle_clog2,None,'')

  def __set__trx_dac_step_clog2(self,value): TrxDacStep.set_trx_dac_step_clog2(self.pif, value)
  def __get__trx_dac_step_clog2(self): return TrxDacStep.get_trx_dac_step_clog2(self.pif)
  trx_dac_step_clog2 = property(__get__trx_dac_step_clog2,__set__trx_dac_step_clog2,None,'')

  def __set__trx_iterations(self,value): TrxIterations.set_trx_iterations(self.pif, value)
  def __get__trx_iterations(self): return TrxIterations.get_trx_iterations(self.pif)
  trx_iterations = property(__get__trx_iterations,__set__trx_iterations,None,'')

  def __set__trx_ctrl_done(self,value): TrxCtrlDone.set_trx_ctrl_done(self.pif, value)
  def __get__trx_ctrl_done(self): return TrxCtrlDone.get_trx_ctrl_done(self.pif)
  trx_ctrl_done = property(__get__trx_ctrl_done,__set__trx_ctrl_done,None,'')

  def __set__trx_backend_done(self,value): TrxBackendDone.set_trx_backend_done(self.pif, value)
  def __get__trx_backend_done(self): return TrxBackendDone.get_trx_backend_done(self.pif)
  trx_backend_done = property(__get__trx_backend_done,__set__trx_backend_done,None,'')

  def __set__tx_strobe_enable(self,value): TrxCtrlMode.set_tx_strobe_enable(self.pif, value)
  def __get__tx_strobe_enable(self): return TrxCtrlMode.get_tx_strobe_enable(self.pif)
  tx_strobe_enable = property(__get__tx_strobe_enable,__set__tx_strobe_enable,None,'')

  def __set__rx_strobe_enable(self,value): TrxCtrlMode.set_rx_strobe_enable(self.pif, value)
  def __get__rx_strobe_enable(self): return TrxCtrlMode.get_rx_strobe_enable(self.pif)
  rx_strobe_enable = property(__get__rx_strobe_enable,__set__rx_strobe_enable,None,'')

  def __set__trx_phase_override(self,value): TrxCtrlMode.set_trx_phase_override(self.pif, value)
  def __get__trx_phase_override(self): return TrxCtrlMode.get_trx_phase_override(self.pif)
  trx_phase_override = property(__get__trx_phase_override,__set__trx_phase_override,None,'')

  def __set__trx_phase_override_val(self,value): TrxCtrlMode.set_trx_phase_override_val(self.pif, value)
  def __get__trx_phase_override_val(self): return TrxCtrlMode.get_trx_phase_override_val(self.pif)
  trx_phase_override_val = property(__get__trx_phase_override_val,__set__trx_phase_override_val,None,'')

  def __set__trx_send_every_pulse(self,value): TrxCtrlMode.set_trx_send_every_pulse(self.pif, value)
  def __get__trx_send_every_pulse(self): return TrxCtrlMode.get_trx_send_every_pulse(self.pif)
  trx_send_every_pulse = property(__get__trx_send_every_pulse,__set__trx_send_every_pulse,None,'')

  def __set__trx_constant_clocks_per_pulse(self,value): TrxCtrlMode.set_trx_constant_clocks_per_pulse(self.pif, value)
  def __get__trx_constant_clocks_per_pulse(self): return TrxCtrlMode.get_trx_constant_clocks_per_pulse(self.pif)
  trx_constant_clocks_per_pulse = property(__get__trx_constant_clocks_per_pulse,__set__trx_constant_clocks_per_pulse,None,'')

  def __set__trx_ctrl_slave_mode(self,value): TrxCtrlMode.set_trx_ctrl_slave_mode(self.pif, value)
  def __get__trx_ctrl_slave_mode(self): return TrxCtrlMode.get_trx_ctrl_slave_mode(self.pif)
  trx_ctrl_slave_mode = property(__get__trx_ctrl_slave_mode,__set__trx_ctrl_slave_mode,None,'')

  def __set__trx_start_sync_negedge(self,value): TrxCtrlMode.set_trx_start_sync_negedge(self.pif, value)
  def __get__trx_start_sync_negedge(self): return TrxCtrlMode.get_trx_start_sync_negedge(self.pif)
  trx_start_sync_negedge = property(__get__trx_start_sync_negedge,__set__trx_start_sync_negedge,None,'')

  def __set__trx_lfsr_taps_0(self,value): TrxLfsrTaps0.set_trx_lfsr_taps_0(self.pif, value)
  def __get__trx_lfsr_taps_0(self): return TrxLfsrTaps0.get_trx_lfsr_taps_0(self.pif)
  trx_lfsr_taps_0 = property(__get__trx_lfsr_taps_0,__set__trx_lfsr_taps_0,None,'')

  def __set__trx_lfsr_taps_1(self,value): TrxLfsrTaps1.set_trx_lfsr_taps_1(self.pif, value)
  def __get__trx_lfsr_taps_1(self): return TrxLfsrTaps1.get_trx_lfsr_taps_1(self.pif)
  trx_lfsr_taps_1 = property(__get__trx_lfsr_taps_1,__set__trx_lfsr_taps_1,None,'')

  def __set__noiseless_ghost_order(self,value): TrxLfsrTaps2.set_noiseless_ghost_order(self.pif, value)
  def __get__noiseless_ghost_order(self): return TrxLfsrTaps2.get_noiseless_ghost_order(self.pif)
  noiseless_ghost_order = property(__get__noiseless_ghost_order,__set__noiseless_ghost_order,None,'')

  def __set__trx_lfsr_taps_2(self,value): TrxLfsrTaps2.set_trx_lfsr_taps_2(self.pif, value)
  def __get__trx_lfsr_taps_2(self): return TrxLfsrTaps2.get_trx_lfsr_taps_2(self.pif)
  trx_lfsr_taps_2 = property(__get__trx_lfsr_taps_2,__set__trx_lfsr_taps_2,None,'')

  def __set__rx_wait(self,value): RxWait.set_rx_wait(self.pif, value)
  def __get__rx_wait(self): return RxWait.get_rx_wait(self.pif)
  rx_wait = property(__get__rx_wait,__set__rx_wait,None,'')

  def __set__tx_wait(self,value): TxWait.set_tx_wait(self.pif, value)
  def __get__tx_wait(self): return TxWait.get_tx_wait(self.pif)
  tx_wait = property(__get__tx_wait,__set__tx_wait,None,'')

  def __set__trx_dac_override_enable(self,value): TrxDacOverrideH.set_trx_dac_override_enable(self.pif, value)
  def __get__trx_dac_override_enable(self): return TrxDacOverrideH.get_trx_dac_override_enable(self.pif)
  trx_dac_override_enable = property(__get__trx_dac_override_enable,__set__trx_dac_override_enable,None,'')

  def __set__trx_dac_override_val_h(self,value): TrxDacOverrideH.set_trx_dac_override_val_h(self.pif, value)
  def __get__trx_dac_override_val_h(self): return TrxDacOverrideH.get_trx_dac_override_val_h(self.pif)
  trx_dac_override_val_h = property(__get__trx_dac_override_val_h,__set__trx_dac_override_val_h,None,'')

  def __set__trx_dac_override_val_l(self,value): TrxDacOverrideL.set_trx_dac_override_val_l(self.pif, value)
  def __get__trx_dac_override_val_l(self): return TrxDacOverrideL.get_trx_dac_override_val_l(self.pif)
  trx_dac_override_val_l = property(__get__trx_dac_override_val_l,__set__trx_dac_override_val_l,None,'')

  def __set__spi_master_clk_div(self,value): CpuSpiMasterClkCtrl.set_spi_master_clk_div(self.pif, value)
  def __get__spi_master_clk_div(self): return CpuSpiMasterClkCtrl.get_spi_master_clk_div(self.pif)
  spi_master_clk_div = property(__get__spi_master_clk_div,__set__spi_master_clk_div,None,'')

  def __set__spi_master_clk_sel(self,value): CpuSpiMasterClkCtrl.set_spi_master_clk_sel(self.pif, value)
  def __get__spi_master_clk_sel(self): return CpuSpiMasterClkCtrl.get_spi_master_clk_sel(self.pif)
  spi_master_clk_sel = property(__get__spi_master_clk_sel,__set__spi_master_clk_sel,None,'')

  def __set__cpuclk_div(self,value): CpuSpiMasterClkCtrl.set_cpuclk_div(self.pif, value)
  def __get__cpuclk_div(self): return CpuSpiMasterClkCtrl.get_cpuclk_div(self.pif)
  cpuclk_div = property(__get__cpuclk_div,__set__cpuclk_div,None,'')

  def __set__cpuclk_sel(self,value): CpuSpiMasterClkCtrl.set_cpuclk_sel(self.pif, value)
  def __get__cpuclk_sel(self): return CpuSpiMasterClkCtrl.get_cpuclk_sel(self.pif)
  cpuclk_sel = property(__get__cpuclk_sel,__set__cpuclk_sel,None,'')

  def __set__mclk_sel(self,value): MclkTrxBackendClkCtrl.set_mclk_sel(self.pif, value)
  def __get__mclk_sel(self): return MclkTrxBackendClkCtrl.get_mclk_sel(self.pif)
  mclk_sel = property(__get__mclk_sel,__set__mclk_sel,None,'')

  def __set__trx_backend_clk_prescale(self,value): MclkTrxBackendClkCtrl.set_trx_backend_clk_prescale(self.pif, value)
  def __get__trx_backend_clk_prescale(self): return MclkTrxBackendClkCtrl.get_trx_backend_clk_prescale(self.pif)
  trx_backend_clk_prescale = property(__get__trx_backend_clk_prescale,__set__trx_backend_clk_prescale,None,'')

  def __set__trx_backend_clk_div(self,value): MclkTrxBackendClkCtrl.set_trx_backend_clk_div(self.pif, value)
  def __get__trx_backend_clk_div(self): return MclkTrxBackendClkCtrl.get_trx_backend_clk_div(self.pif)
  trx_backend_clk_div = property(__get__trx_backend_clk_div,__set__trx_backend_clk_div,None,'')

  def __set__auxclk_sel(self,value): OscCtrl.set_auxclk_sel(self.pif, value)
  def __get__auxclk_sel(self): return OscCtrl.get_auxclk_sel(self.pif)
  auxclk_sel = property(__get__auxclk_sel,__set__auxclk_sel,None,'')

  def __set__sysclk_sel(self,value): OscCtrl.set_sysclk_sel(self.pif, value)
  def __get__sysclk_sel(self): return OscCtrl.get_sysclk_sel(self.pif)
  sysclk_sel = property(__get__sysclk_sel,__set__sysclk_sel,None,'')

  def __set__xosc_bypass(self,value): OscCtrl.set_xosc_bypass(self.pif, value)
  def __get__xosc_bypass(self): return OscCtrl.get_xosc_bypass(self.pif)
  xosc_bypass = property(__get__xosc_bypass,__set__xosc_bypass,None,'')

  def __set__xosc_dislvl(self,value): OscCtrl.set_xosc_dislvl(self.pif, value)
  def __get__xosc_dislvl(self): return OscCtrl.get_xosc_dislvl(self.pif)
  xosc_dislvl = property(__get__xosc_dislvl,__set__xosc_dislvl,None,'')

  def __set__xosc_discap(self,value): OscCtrl.set_xosc_discap(self.pif, value)
  def __get__xosc_discap(self): return OscCtrl.get_xosc_discap(self.pif)
  xosc_discap = property(__get__xosc_discap,__set__xosc_discap,None,'')

  def __set__xosc_en(self,value): OscCtrl.set_xosc_en(self.pif, value)
  def __get__xosc_en(self): return OscCtrl.get_xosc_en(self.pif)
  xosc_en = property(__get__xosc_en,__set__xosc_en,None,'')

  def __set__lpclk_disable(self,value): OscCtrl.set_lpclk_disable(self.pif, value)
  def __get__lpclk_disable(self): return OscCtrl.get_lpclk_disable(self.pif)
  lpclk_disable = property(__get__lpclk_disable,__set__lpclk_disable,None,'')

  def __set__spiclk_ren(self,value): IoCtrl1.set_spiclk_ren(self.pif, value)
  def __get__spiclk_ren(self): return IoCtrl1.get_spiclk_ren(self.pif)
  spiclk_ren = property(__get__spiclk_ren,__set__spiclk_ren,None,'')

  def __set__spio_ren(self,value): IoCtrl1.set_spio_ren(self.pif, value)
  def __get__spio_ren(self): return IoCtrl1.get_spio_ren(self.pif)
  spio_ren = property(__get__spio_ren,__set__spio_ren,None,'')

  def __set__io_ren(self,value): IoCtrl1.set_io_ren(self.pif, value)
  def __get__io_ren(self): return IoCtrl1.get_io_ren(self.pif)
  io_ren = property(__get__io_ren,__set__io_ren,None,'')

  def __set__lvds_rt_cal(self,value): IoCtrl2.set_lvds_rt_cal(self.pif, value)
  def __get__lvds_rt_cal(self): return IoCtrl2.get_lvds_rt_cal(self.pif)
  lvds_rt_cal = property(__get__lvds_rt_cal,__set__lvds_rt_cal,None,'')

  def __set__lvds_rt_en(self,value): IoCtrl2.set_lvds_rt_en(self.pif, value)
  def __get__lvds_rt_en(self): return IoCtrl2.get_lvds_rt_en(self.pif)
  lvds_rt_en = property(__get__lvds_rt_en,__set__lvds_rt_en,None,'')

  def __set__lvcmos_schmitt_en(self,value): IoCtrl2.set_lvcmos_schmitt_en(self.pif, value)
  def __get__lvcmos_schmitt_en(self): return IoCtrl2.get_lvcmos_schmitt_en(self.pif)
  lvcmos_schmitt_en = property(__get__lvcmos_schmitt_en,__set__lvcmos_schmitt_en,None,'')

  def __set__io6_lvcmos_ie(self,value): IoCtrl2.set_io6_lvcmos_ie(self.pif, value)
  def __get__io6_lvcmos_ie(self): return IoCtrl2.get_io6_lvcmos_ie(self.pif)
  io6_lvcmos_ie = property(__get__io6_lvcmos_ie,__set__io6_lvcmos_ie,None,'')

  def __set__io5_lvcmos_ie(self,value): IoCtrl2.set_io5_lvcmos_ie(self.pif, value)
  def __get__io5_lvcmos_ie(self): return IoCtrl2.get_io5_lvcmos_ie(self.pif)
  io5_lvcmos_ie = property(__get__io5_lvcmos_ie,__set__io5_lvcmos_ie,None,'')

  def __set__lvds_rx_en(self,value): IoCtrl2.set_lvds_rx_en(self.pif, value)
  def __get__lvds_rx_en(self): return IoCtrl2.get_lvds_rx_en(self.pif)
  lvds_rx_en = property(__get__lvds_rx_en,__set__lvds_rx_en,None,'')

  def __set__sub_lvds_en(self,value): IoCtrl2.set_sub_lvds_en(self.pif, value)
  def __get__sub_lvds_en(self): return IoCtrl2.get_sub_lvds_en(self.pif)
  sub_lvds_en = property(__get__sub_lvds_en,__set__sub_lvds_en,None,'')

  def __set__lvds_tx_en(self,value): IoCtrl3.set_lvds_tx_en(self.pif, value)
  def __get__lvds_tx_en(self): return IoCtrl3.get_lvds_tx_en(self.pif)
  lvds_tx_en = property(__get__lvds_tx_en,__set__lvds_tx_en,None,'')

  def __set__io_gpio_sel(self,value): IoCtrl3.set_io_gpio_sel(self.pif, value)
  def __get__io_gpio_sel(self): return IoCtrl3.get_io_gpio_sel(self.pif)
  io_gpio_sel = property(__get__io_gpio_sel,__set__io_gpio_sel,None,'')

  def __set__lvds_clkout_sel(self,value): IoCtrl4.set_lvds_clkout_sel(self.pif, value)
  def __get__lvds_clkout_sel(self): return IoCtrl4.get_lvds_clkout_sel(self.pif)
  lvds_clkout_sel = property(__get__lvds_clkout_sel,__set__lvds_clkout_sel,None,'')

  def __set__io6_clkout_sel(self,value): IoCtrl4.set_io6_clkout_sel(self.pif, value)
  def __get__io6_clkout_sel(self): return IoCtrl4.get_io6_clkout_sel(self.pif)
  io6_clkout_sel = property(__get__io6_clkout_sel,__set__io6_clkout_sel,None,'')

  def __set__io5_clkout_sel(self,value): IoCtrl4.set_io5_clkout_sel(self.pif, value)
  def __get__io5_clkout_sel(self): return IoCtrl4.get_io5_clkout_sel(self.pif)
  io5_clkout_sel = property(__get__io5_clkout_sel,__set__io5_clkout_sel,None,'')

  def __set__extclk_sel(self,value): IoCtrl4.set_extclk_sel(self.pif, value)
  def __get__extclk_sel(self): return IoCtrl4.get_extclk_sel(self.pif)
  extclk_sel = property(__get__extclk_sel,__set__extclk_sel,None,'')

  def __set__lvds_txdrv(self,value): IoCtrl4.set_lvds_txdrv(self.pif, value)
  def __get__lvds_txdrv(self): return IoCtrl4.get_lvds_txdrv(self.pif)
  lvds_txdrv = property(__get__lvds_txdrv,__set__lvds_txdrv,None,'')

  def __set__lvds_biastrim(self,value): IoCtrl4.set_lvds_biastrim(self.pif, value)
  def __get__lvds_biastrim(self): return IoCtrl4.get_lvds_biastrim(self.pif)
  lvds_biastrim = property(__get__lvds_biastrim,__set__lvds_biastrim,None,'')

  def __set__lpclk_trim(self,value): IoCtrl5.set_lpclk_trim(self.pif, value)
  def __get__lpclk_trim(self): return IoCtrl5.get_lpclk_trim(self.pif)
  lpclk_trim = property(__get__lpclk_trim,__set__lpclk_trim,None,'')

  def __set__io3_spi_sel(self,value): IoCtrl5.set_io3_spi_sel(self.pif, value)
  def __get__io3_spi_sel(self): return IoCtrl5.get_io3_spi_sel(self.pif)
  io3_spi_sel = property(__get__io3_spi_sel,__set__io3_spi_sel,None,'')

  def __set__trx_sync_source_sel(self,value): IoCtrl5.set_trx_sync_source_sel(self.pif, value)
  def __get__trx_sync_source_sel(self): return IoCtrl5.get_trx_sync_source_sel(self.pif)
  trx_sync_source_sel = property(__get__trx_sync_source_sel,__set__trx_sync_source_sel,None,'')

  def __set__io1_spi_sel(self,value): IoCtrl5.set_io1_spi_sel(self.pif, value)
  def __get__io1_spi_sel(self): return IoCtrl5.get_io1_spi_sel(self.pif)
  io1_spi_sel = property(__get__io1_spi_sel,__set__io1_spi_sel,None,'')

  def __set__io2_test_sel(self,value): IoCtrl6.set_io2_test_sel(self.pif, value)
  def __get__io2_test_sel(self): return IoCtrl6.get_io2_test_sel(self.pif)
  io2_test_sel = property(__get__io2_test_sel,__set__io2_test_sel,None,'')

  def __set__io6_clkout_oe(self,value): IoCtrl6.set_io6_clkout_oe(self.pif, value)
  def __get__io6_clkout_oe(self): return IoCtrl6.get_io6_clkout_oe(self.pif)
  io6_clkout_oe = property(__get__io6_clkout_oe,__set__io6_clkout_oe,None,'')

  def __set__io5_clkout_oe(self,value): IoCtrl6.set_io5_clkout_oe(self.pif, value)
  def __get__io5_clkout_oe(self): return IoCtrl6.get_io5_clkout_oe(self.pif)
  io5_clkout_oe = property(__get__io5_clkout_oe,__set__io5_clkout_oe,None,'')

  def __set__spi_mode_pif(self,value): SpiConfigPif.set_spi_mode_pif(self.pif, value)
  def __get__spi_mode_pif(self): return SpiConfigPif.get_spi_mode_pif(self.pif)
  spi_mode_pif = property(__get__spi_mode_pif,__set__spi_mode_pif,None,'')

  def __set__pif_to_cpu_fifo_overflow(self,value): PifMbFifoStatus.set_pif_to_cpu_fifo_overflow(self.pif, value)
  def __get__pif_to_cpu_fifo_overflow(self): return PifMbFifoStatus.get_pif_to_cpu_fifo_overflow(self.pif)
  pif_to_cpu_fifo_overflow = property(__get__pif_to_cpu_fifo_overflow,__set__pif_to_cpu_fifo_overflow,None,'')

  def __set__pif_to_cpu_fifo_underflow(self,value): PifMbFifoStatus.set_pif_to_cpu_fifo_underflow(self.pif, value)
  def __get__pif_to_cpu_fifo_underflow(self): return PifMbFifoStatus.get_pif_to_cpu_fifo_underflow(self.pif)
  pif_to_cpu_fifo_underflow = property(__get__pif_to_cpu_fifo_underflow,__set__pif_to_cpu_fifo_underflow,None,'')

  def __set__pif_from_cpu_fifo_overflow(self,value): PifMbFifoStatus.set_pif_from_cpu_fifo_overflow(self.pif, value)
  def __get__pif_from_cpu_fifo_overflow(self): return PifMbFifoStatus.get_pif_from_cpu_fifo_overflow(self.pif)
  pif_from_cpu_fifo_overflow = property(__get__pif_from_cpu_fifo_overflow,__set__pif_from_cpu_fifo_overflow,None,'')

  def __set__pif_from_cpu_fifo_underflow(self,value): PifMbFifoStatus.set_pif_from_cpu_fifo_underflow(self.pif, value)
  def __get__pif_from_cpu_fifo_underflow(self): return PifMbFifoStatus.get_pif_from_cpu_fifo_underflow(self.pif)
  pif_from_cpu_fifo_underflow = property(__get__pif_from_cpu_fifo_underflow,__set__pif_from_cpu_fifo_underflow,None,'')

  def __set__from_cpu_fifo_empty(self,value): PifMbFifoStatus.set_from_cpu_fifo_empty(self.pif, value)
  def __get__from_cpu_fifo_empty(self): return PifMbFifoStatus.get_from_cpu_fifo_empty(self.pif)
  from_cpu_fifo_empty = property(__get__from_cpu_fifo_empty,__set__from_cpu_fifo_empty,None,'')

  def __set__to_cpu_data_valid(self,value): PifMbFifoStatus.set_to_cpu_data_valid(self.pif, value)
  def __get__to_cpu_data_valid(self): return PifMbFifoStatus.get_to_cpu_data_valid(self.pif)
  to_cpu_data_valid = property(__get__to_cpu_data_valid,__set__to_cpu_data_valid,None,'')

  def __set__from_cpu_fifo_full(self,value): PifMbFifoStatus.set_from_cpu_fifo_full(self.pif, value)
  def __get__from_cpu_fifo_full(self): return PifMbFifoStatus.get_from_cpu_fifo_full(self.pif)
  from_cpu_fifo_full = property(__get__from_cpu_fifo_full,__set__from_cpu_fifo_full,None,'')

  def __set__to_cpu_read_data(self,value): ToCpuReadData.set_to_cpu_read_data(self.pif, value)
  def __get__to_cpu_read_data(self): return ToCpuReadData.get_to_cpu_read_data(self.pif)
  to_cpu_read_data = property(__get__to_cpu_read_data,__set__to_cpu_read_data,None,'')

  def __set__from_cpu_write_data(self,value): FromCpuWriteData.set_from_cpu_write_data(self.pif, value)
  def __get__from_cpu_write_data(self): return FromCpuWriteData.get_from_cpu_write_data(self.pif)
  from_cpu_write_data = property(__get__from_cpu_write_data,__set__from_cpu_write_data,None,'')

  def __set__pif_clear_to_cpu_fifo_overflow(self,value): PifMbClearStatus.set_pif_clear_to_cpu_fifo_overflow(self.pif, value)
  def __get__pif_clear_to_cpu_fifo_overflow(self): return PifMbClearStatus.get_pif_clear_to_cpu_fifo_overflow(self.pif)
  pif_clear_to_cpu_fifo_overflow = property(__get__pif_clear_to_cpu_fifo_overflow,__set__pif_clear_to_cpu_fifo_overflow,None,'')

  def __set__pif_clear_to_cpu_fifo_underflow(self,value): PifMbClearStatus.set_pif_clear_to_cpu_fifo_underflow(self.pif, value)
  def __get__pif_clear_to_cpu_fifo_underflow(self): return PifMbClearStatus.get_pif_clear_to_cpu_fifo_underflow(self.pif)
  pif_clear_to_cpu_fifo_underflow = property(__get__pif_clear_to_cpu_fifo_underflow,__set__pif_clear_to_cpu_fifo_underflow,None,'')

  def __set__pif_clear_from_cpu_fifo_overflow(self,value): PifMbClearStatus.set_pif_clear_from_cpu_fifo_overflow(self.pif, value)
  def __get__pif_clear_from_cpu_fifo_overflow(self): return PifMbClearStatus.get_pif_clear_from_cpu_fifo_overflow(self.pif)
  pif_clear_from_cpu_fifo_overflow = property(__get__pif_clear_from_cpu_fifo_overflow,__set__pif_clear_from_cpu_fifo_overflow,None,'')

  def __set__pif_clear_from_cpu_fifo_underflow(self,value): PifMbClearStatus.set_pif_clear_from_cpu_fifo_underflow(self.pif, value)
  def __get__pif_clear_from_cpu_fifo_underflow(self): return PifMbClearStatus.get_pif_clear_from_cpu_fifo_underflow(self.pif)
  pif_clear_from_cpu_fifo_underflow = property(__get__pif_clear_from_cpu_fifo_underflow,__set__pif_clear_from_cpu_fifo_underflow,None,'')

  def __set__pif_to_mem_fifo_overflow(self,value): PifMemFifoStatus.set_pif_to_mem_fifo_overflow(self.pif, value)
  def __get__pif_to_mem_fifo_overflow(self): return PifMemFifoStatus.get_pif_to_mem_fifo_overflow(self.pif)
  pif_to_mem_fifo_overflow = property(__get__pif_to_mem_fifo_overflow,__set__pif_to_mem_fifo_overflow,None,'')

  def __set__pif_to_mem_fifo_underflow(self,value): PifMemFifoStatus.set_pif_to_mem_fifo_underflow(self.pif, value)
  def __get__pif_to_mem_fifo_underflow(self): return PifMemFifoStatus.get_pif_to_mem_fifo_underflow(self.pif)
  pif_to_mem_fifo_underflow = property(__get__pif_to_mem_fifo_underflow,__set__pif_to_mem_fifo_underflow,None,'')

  def __set__pif_from_mem_fifo_overflow(self,value): PifMemFifoStatus.set_pif_from_mem_fifo_overflow(self.pif, value)
  def __get__pif_from_mem_fifo_overflow(self): return PifMemFifoStatus.get_pif_from_mem_fifo_overflow(self.pif)
  pif_from_mem_fifo_overflow = property(__get__pif_from_mem_fifo_overflow,__set__pif_from_mem_fifo_overflow,None,'')

  def __set__pif_from_mem_fifo_underflow(self,value): PifMemFifoStatus.set_pif_from_mem_fifo_underflow(self.pif, value)
  def __get__pif_from_mem_fifo_underflow(self): return PifMemFifoStatus.get_pif_from_mem_fifo_underflow(self.pif)
  pif_from_mem_fifo_underflow = property(__get__pif_from_mem_fifo_underflow,__set__pif_from_mem_fifo_underflow,None,'')

  def __set__pif_clear_to_mem_fifo_overflow(self,value): PifMemClearStatus.set_pif_clear_to_mem_fifo_overflow(self.pif, value)
  def __get__pif_clear_to_mem_fifo_overflow(self): return PifMemClearStatus.get_pif_clear_to_mem_fifo_overflow(self.pif)
  pif_clear_to_mem_fifo_overflow = property(__get__pif_clear_to_mem_fifo_overflow,__set__pif_clear_to_mem_fifo_overflow,None,'')

  def __set__pif_clear_to_mem_fifo_underflow(self,value): PifMemClearStatus.set_pif_clear_to_mem_fifo_underflow(self.pif, value)
  def __get__pif_clear_to_mem_fifo_underflow(self): return PifMemClearStatus.get_pif_clear_to_mem_fifo_underflow(self.pif)
  pif_clear_to_mem_fifo_underflow = property(__get__pif_clear_to_mem_fifo_underflow,__set__pif_clear_to_mem_fifo_underflow,None,'')

  def __set__pif_clear_from_mem_fifo_overflow(self,value): PifMemClearStatus.set_pif_clear_from_mem_fifo_overflow(self.pif, value)
  def __get__pif_clear_from_mem_fifo_overflow(self): return PifMemClearStatus.get_pif_clear_from_mem_fifo_overflow(self.pif)
  pif_clear_from_mem_fifo_overflow = property(__get__pif_clear_from_mem_fifo_overflow,__set__pif_clear_from_mem_fifo_overflow,None,'')

  def __set__pif_clear_from_mem_fifo_underflow(self,value): PifMemClearStatus.set_pif_clear_from_mem_fifo_underflow(self.pif, value)
  def __get__pif_clear_from_mem_fifo_underflow(self): return PifMemClearStatus.get_pif_clear_from_mem_fifo_underflow(self.pif)
  pif_clear_from_mem_fifo_underflow = property(__get__pif_clear_from_mem_fifo_underflow,__set__pif_clear_from_mem_fifo_underflow,None,'')

  def __set__spi_master_send(self,value): SpiMasterSend.set_spi_master_send(self.pif, value)
  def __get__spi_master_send(self): return SpiMasterSend.get_spi_master_send(self.pif)
  spi_master_send = property(__get__spi_master_send,__set__spi_master_send,None,'')

  def __set__spi_master_nss(self,value): SpiMasterIdle.set_spi_master_nss(self.pif, value)
  def __get__spi_master_nss(self): return SpiMasterIdle.get_spi_master_nss(self.pif)
  spi_master_nss = property(__get__spi_master_nss,__set__spi_master_nss,None,'')

  def __set__spi_master_idle(self,value): SpiMasterIdle.set_spi_master_idle(self.pif, value)
  def __get__spi_master_idle(self): return SpiMasterIdle.get_spi_master_idle(self.pif)
  spi_master_idle = property(__get__spi_master_idle,__set__spi_master_idle,None,'')

  def __set__spi_master_radar_burst_size_msb(self,value): SpiMasterMode.set_spi_master_radar_burst_size_msb(self.pif, value)
  def __get__spi_master_radar_burst_size_msb(self): return SpiMasterMode.get_spi_master_radar_burst_size_msb(self.pif)
  spi_master_radar_burst_size_msb = property(__get__spi_master_radar_burst_size_msb,__set__spi_master_radar_burst_size_msb,None,'')

  def __set__spi_slave_sel(self,value): SpiMasterMode.set_spi_slave_sel(self.pif, value)
  def __get__spi_slave_sel(self): return SpiMasterMode.get_spi_slave_sel(self.pif)
  spi_slave_sel = property(__get__spi_slave_sel,__set__spi_slave_sel,None,'')

  def __set__spi_master_mode(self,value): SpiMasterMode.set_spi_master_mode(self.pif, value)
  def __get__spi_master_mode(self): return SpiMasterMode.get_spi_master_mode(self.pif)
  spi_master_mode = property(__get__spi_master_mode,__set__spi_master_mode,None,'')

  def __set__spi_master_radar_burst_size_lsb(self,value): SpiMasterRadarBurstSizeLsb.set_spi_master_radar_burst_size_lsb(self.pif, value)
  def __get__spi_master_radar_burst_size_lsb(self): return SpiMasterRadarBurstSizeLsb.get_spi_master_radar_burst_size_lsb(self.pif)
  spi_master_radar_burst_size_lsb = property(__get__spi_master_radar_burst_size_lsb,__set__spi_master_radar_burst_size_lsb,None,'')

  def __set__otp_ctrl_load(self,value): OtpCtrl.set_otp_ctrl_load(self.pif, value)
  def __get__otp_ctrl_load(self): return OtpCtrl.get_otp_ctrl_load(self.pif)
  otp_ctrl_load = property(__get__otp_ctrl_load,__set__otp_ctrl_load,None,'')

  def __set__boot_from_otp_pif(self,value): BootFromOtpPif.set_boot_from_otp_pif(self.pif, value)
  def __get__boot_from_otp_pif(self): return BootFromOtpPif.get_boot_from_otp_pif(self.pif)
  boot_from_otp_pif = property(__get__boot_from_otp_pif,__set__boot_from_otp_pif,None,'')

  def __set__rx_pll_fbdiv(self,value): RxPllCtrl1.set_rx_pll_fbdiv(self.pif, value)
  def __get__rx_pll_fbdiv(self): return RxPllCtrl1.get_rx_pll_fbdiv(self.pif)
  rx_pll_fbdiv = property(__get__rx_pll_fbdiv,__set__rx_pll_fbdiv,None,'')

  def __set__rx_pll_foutt_sel(self,value): RxPllCtrl1.set_rx_pll_foutt_sel(self.pif, value)
  def __get__rx_pll_foutt_sel(self): return RxPllCtrl1.get_rx_pll_foutt_sel(self.pif)
  rx_pll_foutt_sel = property(__get__rx_pll_foutt_sel,__set__rx_pll_foutt_sel,None,'')

  def __set__rx_pll_postdiv(self,value): RxPllCtrl2.set_rx_pll_postdiv(self.pif, value)
  def __get__rx_pll_postdiv(self): return RxPllCtrl2.get_rx_pll_postdiv(self.pif)
  rx_pll_postdiv = property(__get__rx_pll_postdiv,__set__rx_pll_postdiv,None,'')

  def __set__rx_pll_powerdown(self,value): RxPllCtrl2.set_rx_pll_powerdown(self.pif, value)
  def __get__rx_pll_powerdown(self): return RxPllCtrl2.get_rx_pll_powerdown(self.pif)
  rx_pll_powerdown = property(__get__rx_pll_powerdown,__set__rx_pll_powerdown,None,'')

  def __set__rx_pll_powerdown_foutdiv(self,value): RxPllCtrl2.set_rx_pll_powerdown_foutdiv(self.pif, value)
  def __get__rx_pll_powerdown_foutdiv(self): return RxPllCtrl2.get_rx_pll_powerdown_foutdiv(self.pif)
  rx_pll_powerdown_foutdiv = property(__get__rx_pll_powerdown_foutdiv,__set__rx_pll_powerdown_foutdiv,None,'')

  def __set__rx_pll_powerdown_foutt(self,value): RxPllCtrl2.set_rx_pll_powerdown_foutt(self.pif, value)
  def __get__rx_pll_powerdown_foutt(self): return RxPllCtrl2.get_rx_pll_powerdown_foutt(self.pif)
  rx_pll_powerdown_foutt = property(__get__rx_pll_powerdown_foutt,__set__rx_pll_powerdown_foutt,None,'')

  def __set__rx_pll_skewfastcal(self,value): RxPllSkewCtrl.set_rx_pll_skewfastcal(self.pif, value)
  def __get__rx_pll_skewfastcal(self): return RxPllSkewCtrl.get_rx_pll_skewfastcal(self.pif)
  rx_pll_skewfastcal = property(__get__rx_pll_skewfastcal,__set__rx_pll_skewfastcal,None,'')

  def __set__rx_pll_skewcalcnt(self,value): RxPllSkewCtrl.set_rx_pll_skewcalcnt(self.pif, value)
  def __get__rx_pll_skewcalcnt(self): return RxPllSkewCtrl.get_rx_pll_skewcalcnt(self.pif)
  rx_pll_skewcalcnt = property(__get__rx_pll_skewcalcnt,__set__rx_pll_skewcalcnt,None,'')

  def __set__rx_pll_skewcalbyp(self,value): RxPllSkewCtrl.set_rx_pll_skewcalbyp(self.pif, value)
  def __get__rx_pll_skewcalbyp(self): return RxPllSkewCtrl.get_rx_pll_skewcalbyp(self.pif)
  rx_pll_skewcalbyp = property(__get__rx_pll_skewcalbyp,__set__rx_pll_skewcalbyp,None,'')

  def __set__rx_pll_skewcalen(self,value): RxPllSkewCtrl.set_rx_pll_skewcalen(self.pif, value)
  def __get__rx_pll_skewcalen(self): return RxPllSkewCtrl.get_rx_pll_skewcalen(self.pif)
  rx_pll_skewcalen = property(__get__rx_pll_skewcalen,__set__rx_pll_skewcalen,None,'')

  def __set__rx_pll_skewcalin(self,value): RxPllSkewcalin.set_rx_pll_skewcalin(self.pif, value)
  def __get__rx_pll_skewcalin(self): return RxPllSkewcalin.get_rx_pll_skewcalin(self.pif)
  rx_pll_skewcalin = property(__get__rx_pll_skewcalin,__set__rx_pll_skewcalin,None,'')

  def __set__rx_pll_lock(self,value): RxPllStatus.set_rx_pll_lock(self.pif, value)
  def __get__rx_pll_lock(self): return RxPllStatus.get_rx_pll_lock(self.pif)
  rx_pll_lock = property(__get__rx_pll_lock,__set__rx_pll_lock,None,'')

  def __set__rx_pll_skewcalout(self,value): RxPllStatus.set_rx_pll_skewcalout(self.pif, value)
  def __get__rx_pll_skewcalout(self): return RxPllStatus.get_rx_pll_skewcalout(self.pif)
  rx_pll_skewcalout = property(__get__rx_pll_skewcalout,__set__rx_pll_skewcalout,None,'')

  def __set__tx_pll_fbdiv(self,value): TxPllCtrl1.set_tx_pll_fbdiv(self.pif, value)
  def __get__tx_pll_fbdiv(self): return TxPllCtrl1.get_tx_pll_fbdiv(self.pif)
  tx_pll_fbdiv = property(__get__tx_pll_fbdiv,__set__tx_pll_fbdiv,None,'')

  def __set__tx_pll_foutt_sel(self,value): TxPllCtrl1.set_tx_pll_foutt_sel(self.pif, value)
  def __get__tx_pll_foutt_sel(self): return TxPllCtrl1.get_tx_pll_foutt_sel(self.pif)
  tx_pll_foutt_sel = property(__get__tx_pll_foutt_sel,__set__tx_pll_foutt_sel,None,'')

  def __set__tx_pll_postdiv(self,value): TxPllCtrl2.set_tx_pll_postdiv(self.pif, value)
  def __get__tx_pll_postdiv(self): return TxPllCtrl2.get_tx_pll_postdiv(self.pif)
  tx_pll_postdiv = property(__get__tx_pll_postdiv,__set__tx_pll_postdiv,None,'')

  def __set__tx_pll_powerdown(self,value): TxPllCtrl2.set_tx_pll_powerdown(self.pif, value)
  def __get__tx_pll_powerdown(self): return TxPllCtrl2.get_tx_pll_powerdown(self.pif)
  tx_pll_powerdown = property(__get__tx_pll_powerdown,__set__tx_pll_powerdown,None,'')

  def __set__tx_pll_powerdown_foutdiv(self,value): TxPllCtrl2.set_tx_pll_powerdown_foutdiv(self.pif, value)
  def __get__tx_pll_powerdown_foutdiv(self): return TxPllCtrl2.get_tx_pll_powerdown_foutdiv(self.pif)
  tx_pll_powerdown_foutdiv = property(__get__tx_pll_powerdown_foutdiv,__set__tx_pll_powerdown_foutdiv,None,'')

  def __set__tx_pll_powerdown_foutt(self,value): TxPllCtrl2.set_tx_pll_powerdown_foutt(self.pif, value)
  def __get__tx_pll_powerdown_foutt(self): return TxPllCtrl2.get_tx_pll_powerdown_foutt(self.pif)
  tx_pll_powerdown_foutt = property(__get__tx_pll_powerdown_foutt,__set__tx_pll_powerdown_foutt,None,'')

  def __set__tx_pll_skewfastcal(self,value): TxPllSkewCtrl.set_tx_pll_skewfastcal(self.pif, value)
  def __get__tx_pll_skewfastcal(self): return TxPllSkewCtrl.get_tx_pll_skewfastcal(self.pif)
  tx_pll_skewfastcal = property(__get__tx_pll_skewfastcal,__set__tx_pll_skewfastcal,None,'')

  def __set__tx_pll_skewcalcnt(self,value): TxPllSkewCtrl.set_tx_pll_skewcalcnt(self.pif, value)
  def __get__tx_pll_skewcalcnt(self): return TxPllSkewCtrl.get_tx_pll_skewcalcnt(self.pif)
  tx_pll_skewcalcnt = property(__get__tx_pll_skewcalcnt,__set__tx_pll_skewcalcnt,None,'')

  def __set__tx_pll_skewcalbyp(self,value): TxPllSkewCtrl.set_tx_pll_skewcalbyp(self.pif, value)
  def __get__tx_pll_skewcalbyp(self): return TxPllSkewCtrl.get_tx_pll_skewcalbyp(self.pif)
  tx_pll_skewcalbyp = property(__get__tx_pll_skewcalbyp,__set__tx_pll_skewcalbyp,None,'')

  def __set__tx_pll_skewcalen(self,value): TxPllSkewCtrl.set_tx_pll_skewcalen(self.pif, value)
  def __get__tx_pll_skewcalen(self): return TxPllSkewCtrl.get_tx_pll_skewcalen(self.pif)
  tx_pll_skewcalen = property(__get__tx_pll_skewcalen,__set__tx_pll_skewcalen,None,'')

  def __set__tx_pll_skewcalin(self,value): TxPllSkewcalin.set_tx_pll_skewcalin(self.pif, value)
  def __get__tx_pll_skewcalin(self): return TxPllSkewcalin.get_tx_pll_skewcalin(self.pif)
  tx_pll_skewcalin = property(__get__tx_pll_skewcalin,__set__tx_pll_skewcalin,None,'')

  def __set__tx_pll_lock(self,value): TxPllStatus.set_tx_pll_lock(self.pif, value)
  def __get__tx_pll_lock(self): return TxPllStatus.get_tx_pll_lock(self.pif)
  tx_pll_lock = property(__get__tx_pll_lock,__set__tx_pll_lock,None,'')

  def __set__tx_pll_skewcalout(self,value): TxPllStatus.set_tx_pll_skewcalout(self.pif, value)
  def __get__tx_pll_skewcalout(self): return TxPllStatus.get_tx_pll_skewcalout(self.pif)
  tx_pll_skewcalout = property(__get__tx_pll_skewcalout,__set__tx_pll_skewcalout,None,'')

  def __set__common_pll_powerdown(self,value): CommonPllCtrl1.set_common_pll_powerdown(self.pif, value)
  def __get__common_pll_powerdown(self): return CommonPllCtrl1.get_common_pll_powerdown(self.pif)
  common_pll_powerdown = property(__get__common_pll_powerdown,__set__common_pll_powerdown,None,'')

  def __set__common_pll_dsmpd(self,value): CommonPllCtrl1.set_common_pll_dsmpd(self.pif, value)
  def __get__common_pll_dsmpd(self): return CommonPllCtrl1.get_common_pll_dsmpd(self.pif)
  common_pll_dsmpd = property(__get__common_pll_dsmpd,__set__common_pll_dsmpd,None,'')

  def __set__common_pll_dacpd(self,value): CommonPllCtrl1.set_common_pll_dacpd(self.pif, value)
  def __get__common_pll_dacpd(self): return CommonPllCtrl1.get_common_pll_dacpd(self.pif)
  common_pll_dacpd = property(__get__common_pll_dacpd,__set__common_pll_dacpd,None,'')

  def __set__common_pll_internal_bypass(self,value): CommonPllCtrl1.set_common_pll_internal_bypass(self.pif, value)
  def __get__common_pll_internal_bypass(self): return CommonPllCtrl1.get_common_pll_internal_bypass(self.pif)
  common_pll_internal_bypass = property(__get__common_pll_internal_bypass,__set__common_pll_internal_bypass,None,'')

  def __set__common_pll_fbdiv_msb(self,value): CommonPllCtrl1.set_common_pll_fbdiv_msb(self.pif, value)
  def __get__common_pll_fbdiv_msb(self): return CommonPllCtrl1.get_common_pll_fbdiv_msb(self.pif)
  common_pll_fbdiv_msb = property(__get__common_pll_fbdiv_msb,__set__common_pll_fbdiv_msb,None,'')

  def __set__common_pll_fbdiv_lsb(self,value): CommonPllCtrl2.set_common_pll_fbdiv_lsb(self.pif, value)
  def __get__common_pll_fbdiv_lsb(self): return CommonPllCtrl2.get_common_pll_fbdiv_lsb(self.pif)
  common_pll_fbdiv_lsb = property(__get__common_pll_fbdiv_lsb,__set__common_pll_fbdiv_lsb,None,'')

  def __set__common_pll_foutpostdivpd(self,value): CommonPllCtrl3.set_common_pll_foutpostdivpd(self.pif, value)
  def __get__common_pll_foutpostdivpd(self): return CommonPllCtrl3.get_common_pll_foutpostdivpd(self.pif)
  common_pll_foutpostdivpd = property(__get__common_pll_foutpostdivpd,__set__common_pll_foutpostdivpd,None,'')

  def __set__common_pll_foutvcopd(self,value): CommonPllCtrl3.set_common_pll_foutvcopd(self.pif, value)
  def __get__common_pll_foutvcopd(self): return CommonPllCtrl3.get_common_pll_foutvcopd(self.pif)
  common_pll_foutvcopd = property(__get__common_pll_foutvcopd,__set__common_pll_foutvcopd,None,'')

  def __set__common_pll_refdiv(self,value): CommonPllCtrl3.set_common_pll_refdiv(self.pif, value)
  def __get__common_pll_refdiv(self): return CommonPllCtrl3.get_common_pll_refdiv(self.pif)
  common_pll_refdiv = property(__get__common_pll_refdiv,__set__common_pll_refdiv,None,'')

  def __set__common_pll_fout4phasepd(self,value): CommonPllCtrl4.set_common_pll_fout4phasepd(self.pif, value)
  def __get__common_pll_fout4phasepd(self): return CommonPllCtrl4.get_common_pll_fout4phasepd(self.pif)
  common_pll_fout4phasepd = property(__get__common_pll_fout4phasepd,__set__common_pll_fout4phasepd,None,'')

  def __set__common_pll_external_bypass(self,value): CommonPllCtrl4.set_common_pll_external_bypass(self.pif, value)
  def __get__common_pll_external_bypass(self): return CommonPllCtrl4.get_common_pll_external_bypass(self.pif)
  common_pll_external_bypass = property(__get__common_pll_external_bypass,__set__common_pll_external_bypass,None,'')

  def __set__common_pll_postdiv1(self,value): CommonPllCtrl4.set_common_pll_postdiv1(self.pif, value)
  def __get__common_pll_postdiv1(self): return CommonPllCtrl4.get_common_pll_postdiv1(self.pif)
  common_pll_postdiv1 = property(__get__common_pll_postdiv1,__set__common_pll_postdiv1,None,'')

  def __set__common_pll_postdiv2(self,value): CommonPllCtrl4.set_common_pll_postdiv2(self.pif, value)
  def __get__common_pll_postdiv2(self): return CommonPllCtrl4.get_common_pll_postdiv2(self.pif)
  common_pll_postdiv2 = property(__get__common_pll_postdiv2,__set__common_pll_postdiv2,None,'')

  def __set__common_pll_frac_2(self,value): CommonPllFrac2.set_common_pll_frac_2(self.pif, value)
  def __get__common_pll_frac_2(self): return CommonPllFrac2.get_common_pll_frac_2(self.pif)
  common_pll_frac_2 = property(__get__common_pll_frac_2,__set__common_pll_frac_2,None,'')

  def __set__common_pll_frac_1(self,value): CommonPllFrac1.set_common_pll_frac_1(self.pif, value)
  def __get__common_pll_frac_1(self): return CommonPllFrac1.get_common_pll_frac_1(self.pif)
  common_pll_frac_1 = property(__get__common_pll_frac_1,__set__common_pll_frac_1,None,'')

  def __set__common_pll_frac_0(self,value): CommonPllFrac0.set_common_pll_frac_0(self.pif, value)
  def __get__common_pll_frac_0(self): return CommonPllFrac0.get_common_pll_frac_0(self.pif)
  common_pll_frac_0 = property(__get__common_pll_frac_0,__set__common_pll_frac_0,None,'')

  def __set__common_pll_lock(self,value): LockStatus.set_common_pll_lock(self.pif, value)
  def __get__common_pll_lock(self): return LockStatus.get_common_pll_lock(self.pif)
  common_pll_lock = property(__get__common_pll_lock,__set__common_pll_lock,None,'')

  def __set__xosc_lock(self,value): LockStatus.set_xosc_lock(self.pif, value)
  def __get__xosc_lock(self): return LockStatus.get_xosc_lock(self.pif)
  xosc_lock = property(__get__xosc_lock,__set__xosc_lock,None,'')

  def __set__cmu_clkout_sel(self,value): ClkoutSel.set_cmu_clkout_sel(self.pif, value)
  def __get__cmu_clkout_sel(self): return ClkoutSel.get_cmu_clkout_sel(self.pif)
  cmu_clkout_sel = property(__get__cmu_clkout_sel,__set__cmu_clkout_sel,None,'')

  def __set__pllauxclk_sel(self,value): ClkoutSel.set_pllauxclk_sel(self.pif, value)
  def __get__pllauxclk_sel(self): return ClkoutSel.get_pllauxclk_sel(self.pif)
  pllauxclk_sel = property(__get__pllauxclk_sel,__set__pllauxclk_sel,None,'')

  def __set__trx_clkout_1_sel(self,value): ClkoutSel.set_trx_clkout_1_sel(self.pif, value)
  def __get__trx_clkout_1_sel(self): return ClkoutSel.get_trx_clkout_1_sel(self.pif)
  trx_clkout_1_sel = property(__get__trx_clkout_1_sel,__set__trx_clkout_1_sel,None,'')

  def __set__trx_clkout_2_sel(self,value): ClkoutSel.set_trx_clkout_2_sel(self.pif, value)
  def __get__trx_clkout_2_sel(self): return ClkoutSel.get_trx_clkout_2_sel(self.pif)
  trx_clkout_2_sel = property(__get__trx_clkout_2_sel,__set__trx_clkout_2_sel,None,'')

  def __set__apc_testmode(self,value): ApcDvddTestmode.set_apc_testmode(self.pif, value)
  def __get__apc_testmode(self): return ApcDvddTestmode.get_apc_testmode(self.pif)
  apc_testmode = property(__get__apc_testmode,__set__apc_testmode,None,'')

  def __set__dvdd_testmode(self,value): ApcDvddTestmode.set_dvdd_testmode(self.pif, value)
  def __get__dvdd_testmode(self): return ApcDvddTestmode.get_dvdd_testmode(self.pif)
  dvdd_testmode = property(__get__dvdd_testmode,__set__dvdd_testmode,None,'')

  def __set__tx_bandsel(self,value): MiscCtrl.set_tx_bandsel(self.pif, value)
  def __get__tx_bandsel(self): return MiscCtrl.get_tx_bandsel(self.pif)
  tx_bandsel = property(__get__tx_bandsel,__set__tx_bandsel,None,'')

  def __set__tx_power(self,value): MiscCtrl.set_tx_power(self.pif, value)
  def __get__tx_power(self): return MiscCtrl.get_tx_power(self.pif)
  tx_power = property(__get__tx_power,__set__tx_power,None,'')

  def __set__dvdd_trim(self,value): MiscCtrl.set_dvdd_trim(self.pif, value)
  def __get__dvdd_trim(self): return MiscCtrl.get_dvdd_trim(self.pif)
  dvdd_trim = property(__get__dvdd_trim,__set__dvdd_trim,None,'')

  def __set__dvdd_rx_disable(self,value): DvddRxCtrl.set_dvdd_rx_disable(self.pif, value)
  def __get__dvdd_rx_disable(self): return DvddRxCtrl.get_dvdd_rx_disable(self.pif)
  dvdd_rx_disable = property(__get__dvdd_rx_disable,__set__dvdd_rx_disable,None,'')

  def __set__dvdd_rx_disable_pulldown(self,value): DvddRxCtrl.set_dvdd_rx_disable_pulldown(self.pif, value)
  def __get__dvdd_rx_disable_pulldown(self): return DvddRxCtrl.get_dvdd_rx_disable_pulldown(self.pif)
  dvdd_rx_disable_pulldown = property(__get__dvdd_rx_disable_pulldown,__set__dvdd_rx_disable_pulldown,None,'')

  def __set__dvdd_rx_trim(self,value): DvddRxCtrl.set_dvdd_rx_trim(self.pif, value)
  def __get__dvdd_rx_trim(self): return DvddRxCtrl.get_dvdd_rx_trim(self.pif)
  dvdd_rx_trim = property(__get__dvdd_rx_trim,__set__dvdd_rx_trim,None,'')

  def __set__dvdd_tx_disable(self,value): DvddTxCtrl.set_dvdd_tx_disable(self.pif, value)
  def __get__dvdd_tx_disable(self): return DvddTxCtrl.get_dvdd_tx_disable(self.pif)
  dvdd_tx_disable = property(__get__dvdd_tx_disable,__set__dvdd_tx_disable,None,'')

  def __set__dvdd_tx_disable_pulldown(self,value): DvddTxCtrl.set_dvdd_tx_disable_pulldown(self.pif, value)
  def __get__dvdd_tx_disable_pulldown(self): return DvddTxCtrl.get_dvdd_tx_disable_pulldown(self.pif)
  dvdd_tx_disable_pulldown = property(__get__dvdd_tx_disable_pulldown,__set__dvdd_tx_disable_pulldown,None,'')

  def __set__dvdd_tx_trim(self,value): DvddTxCtrl.set_dvdd_tx_trim(self.pif, value)
  def __get__dvdd_tx_trim(self): return DvddTxCtrl.get_dvdd_tx_trim(self.pif)
  dvdd_tx_trim = property(__get__dvdd_tx_trim,__set__dvdd_tx_trim,None,'')

  def __set__dvdd_rx_testmode(self,value): DvddTestmode.set_dvdd_rx_testmode(self.pif, value)
  def __get__dvdd_rx_testmode(self): return DvddTestmode.get_dvdd_rx_testmode(self.pif)
  dvdd_rx_testmode = property(__get__dvdd_rx_testmode,__set__dvdd_rx_testmode,None,'')

  def __set__dvdd_tx_testmode(self,value): DvddTestmode.set_dvdd_tx_testmode(self.pif, value)
  def __get__dvdd_tx_testmode(self): return DvddTestmode.get_dvdd_tx_testmode(self.pif)
  dvdd_tx_testmode = property(__get__dvdd_tx_testmode,__set__dvdd_tx_testmode,None,'')

  def __set__avdd_rx_disable(self,value): AvddRxCtrl.set_avdd_rx_disable(self.pif, value)
  def __get__avdd_rx_disable(self): return AvddRxCtrl.get_avdd_rx_disable(self.pif)
  avdd_rx_disable = property(__get__avdd_rx_disable,__set__avdd_rx_disable,None,'')

  def __set__avdd_rx_disable_pulldown(self,value): AvddRxCtrl.set_avdd_rx_disable_pulldown(self.pif, value)
  def __get__avdd_rx_disable_pulldown(self): return AvddRxCtrl.get_avdd_rx_disable_pulldown(self.pif)
  avdd_rx_disable_pulldown = property(__get__avdd_rx_disable_pulldown,__set__avdd_rx_disable_pulldown,None,'')

  def __set__avdd_rx_trim(self,value): AvddRxCtrl.set_avdd_rx_trim(self.pif, value)
  def __get__avdd_rx_trim(self): return AvddRxCtrl.get_avdd_rx_trim(self.pif)
  avdd_rx_trim = property(__get__avdd_rx_trim,__set__avdd_rx_trim,None,'')

  def __set__avdd_tx_disable(self,value): AvddTxCtrl.set_avdd_tx_disable(self.pif, value)
  def __get__avdd_tx_disable(self): return AvddTxCtrl.get_avdd_tx_disable(self.pif)
  avdd_tx_disable = property(__get__avdd_tx_disable,__set__avdd_tx_disable,None,'')

  def __set__avdd_tx_disable_pulldown(self,value): AvddTxCtrl.set_avdd_tx_disable_pulldown(self.pif, value)
  def __get__avdd_tx_disable_pulldown(self): return AvddTxCtrl.get_avdd_tx_disable_pulldown(self.pif)
  avdd_tx_disable_pulldown = property(__get__avdd_tx_disable_pulldown,__set__avdd_tx_disable_pulldown,None,'')

  def __set__avdd_tx_trim(self,value): AvddTxCtrl.set_avdd_tx_trim(self.pif, value)
  def __get__avdd_tx_trim(self): return AvddTxCtrl.get_avdd_tx_trim(self.pif)
  avdd_tx_trim = property(__get__avdd_tx_trim,__set__avdd_tx_trim,None,'')

  def __set__avdd_rx_testmode(self,value): AvddTestmode.set_avdd_rx_testmode(self.pif, value)
  def __get__avdd_rx_testmode(self): return AvddTestmode.get_avdd_rx_testmode(self.pif)
  avdd_rx_testmode = property(__get__avdd_rx_testmode,__set__avdd_rx_testmode,None,'')

  def __set__avdd_tx_testmode(self,value): AvddTestmode.set_avdd_tx_testmode(self.pif, value)
  def __get__avdd_tx_testmode(self): return AvddTestmode.get_avdd_tx_testmode(self.pif)
  avdd_tx_testmode = property(__get__avdd_tx_testmode,__set__avdd_tx_testmode,None,'')

  def __set__avdd_rx_anatestreq(self,value): LdoStatus1.set_avdd_rx_anatestreq(self.pif, value)
  def __get__avdd_rx_anatestreq(self): return LdoStatus1.get_avdd_rx_anatestreq(self.pif)
  avdd_rx_anatestreq = property(__get__avdd_rx_anatestreq,__set__avdd_rx_anatestreq,None,'')

  def __set__avdd_rx_digtestbus(self,value): LdoStatus1.set_avdd_rx_digtestbus(self.pif, value)
  def __get__avdd_rx_digtestbus(self): return LdoStatus1.get_avdd_rx_digtestbus(self.pif)
  avdd_rx_digtestbus = property(__get__avdd_rx_digtestbus,__set__avdd_rx_digtestbus,None,'')

  def __set__avdd_tx_anatestreq(self,value): LdoStatus1.set_avdd_tx_anatestreq(self.pif, value)
  def __get__avdd_tx_anatestreq(self): return LdoStatus1.get_avdd_tx_anatestreq(self.pif)
  avdd_tx_anatestreq = property(__get__avdd_tx_anatestreq,__set__avdd_tx_anatestreq,None,'')

  def __set__avdd_tx_digtestbus(self,value): LdoStatus1.set_avdd_tx_digtestbus(self.pif, value)
  def __get__avdd_tx_digtestbus(self): return LdoStatus1.get_avdd_tx_digtestbus(self.pif)
  avdd_tx_digtestbus = property(__get__avdd_tx_digtestbus,__set__avdd_tx_digtestbus,None,'')

  def __set__dvdd_rx_anatestreq(self,value): LdoStatus1.set_dvdd_rx_anatestreq(self.pif, value)
  def __get__dvdd_rx_anatestreq(self): return LdoStatus1.get_dvdd_rx_anatestreq(self.pif)
  dvdd_rx_anatestreq = property(__get__dvdd_rx_anatestreq,__set__dvdd_rx_anatestreq,None,'')

  def __set__dvdd_rx_digtestbus(self,value): LdoStatus1.set_dvdd_rx_digtestbus(self.pif, value)
  def __get__dvdd_rx_digtestbus(self): return LdoStatus1.get_dvdd_rx_digtestbus(self.pif)
  dvdd_rx_digtestbus = property(__get__dvdd_rx_digtestbus,__set__dvdd_rx_digtestbus,None,'')

  def __set__dvdd_tx_anatestreq(self,value): LdoStatus1.set_dvdd_tx_anatestreq(self.pif, value)
  def __get__dvdd_tx_anatestreq(self): return LdoStatus1.get_dvdd_tx_anatestreq(self.pif)
  dvdd_tx_anatestreq = property(__get__dvdd_tx_anatestreq,__set__dvdd_tx_anatestreq,None,'')

  def __set__dvdd_tx_digtestbus(self,value): LdoStatus1.set_dvdd_tx_digtestbus(self.pif, value)
  def __get__dvdd_tx_digtestbus(self): return LdoStatus1.get_dvdd_tx_digtestbus(self.pif)
  dvdd_tx_digtestbus = property(__get__dvdd_tx_digtestbus,__set__dvdd_tx_digtestbus,None,'')

  def __set__dvdd_anatestreq(self,value): LdoStatus2.set_dvdd_anatestreq(self.pif, value)
  def __get__dvdd_anatestreq(self): return LdoStatus2.get_dvdd_anatestreq(self.pif)
  dvdd_anatestreq = property(__get__dvdd_anatestreq,__set__dvdd_anatestreq,None,'')

  def __set__dvdd_digtestbus(self,value): LdoStatus2.set_dvdd_digtestbus(self.pif, value)
  def __get__dvdd_digtestbus(self): return LdoStatus2.get_dvdd_digtestbus(self.pif)
  dvdd_digtestbus = property(__get__dvdd_digtestbus,__set__dvdd_digtestbus,None,'')

  def __set__apc_anatestreq(self,value): LdoStatus2.set_apc_anatestreq(self.pif, value)
  def __get__apc_anatestreq(self): return LdoStatus2.get_apc_anatestreq(self.pif)
  apc_anatestreq = property(__get__apc_anatestreq,__set__apc_anatestreq,None,'')

  def __set__apc_digtestbus(self,value): LdoStatus2.set_apc_digtestbus(self.pif, value)
  def __get__apc_digtestbus(self): return LdoStatus2.get_apc_digtestbus(self.pif)
  apc_digtestbus = property(__get__apc_digtestbus,__set__apc_digtestbus,None,'')

  def __set__dvdd_rx_power_good(self,value): LdoStatus2.set_dvdd_rx_power_good(self.pif, value)
  def __get__dvdd_rx_power_good(self): return LdoStatus2.get_dvdd_rx_power_good(self.pif)
  dvdd_rx_power_good = property(__get__dvdd_rx_power_good,__set__dvdd_rx_power_good,None,'')

  def __set__dvdd_tx_power_good(self,value): LdoStatus2.set_dvdd_tx_power_good(self.pif, value)
  def __get__dvdd_tx_power_good(self): return LdoStatus2.get_dvdd_tx_power_good(self.pif)
  dvdd_tx_power_good = property(__get__dvdd_tx_power_good,__set__dvdd_tx_power_good,None,'')

  def __set__avdd_rx_power_good(self,value): LdoStatus2.set_avdd_rx_power_good(self.pif, value)
  def __get__avdd_rx_power_good(self): return LdoStatus2.get_avdd_rx_power_good(self.pif)
  avdd_rx_power_good = property(__get__avdd_rx_power_good,__set__avdd_rx_power_good,None,'')

  def __set__avdd_tx_power_good(self,value): LdoStatus2.set_avdd_tx_power_good(self.pif, value)
  def __get__avdd_tx_power_good(self): return LdoStatus2.get_avdd_tx_power_good(self.pif)
  avdd_tx_power_good = property(__get__avdd_tx_power_good,__set__avdd_tx_power_good,None,'')

  def __set__fetch_radar_data_spi(self,value): FetchRadarDataSpi.set_fetch_radar_data_spi(self.pif, value)
  def __get__fetch_radar_data_spi(self): return FetchRadarDataSpi.get_fetch_radar_data_spi(self.pif)
  fetch_radar_data_spi = property(__get__fetch_radar_data_spi,__set__fetch_radar_data_spi,None,'')

  def __set__fetch_radar_data_pif(self,value): FetchRadarDataPif.set_fetch_radar_data_pif(self.pif, value)
  def __get__fetch_radar_data_pif(self): return FetchRadarDataPif.get_fetch_radar_data_pif(self.pif)
  fetch_radar_data_pif = property(__get__fetch_radar_data_pif,__set__fetch_radar_data_pif,None,'')

  def __set__rx_reset_counters(self,value): RxResetCounters.set_rx_reset_counters(self.pif, value)
  def __get__rx_reset_counters(self): return RxResetCounters.get_rx_reset_counters(self.pif)
  rx_reset_counters = property(__get__rx_reset_counters,__set__rx_reset_counters,None,'')

  def __set__trx_start(self,value): TrxStart.set_trx_start(self.pif, value)
  def __get__trx_start(self): return TrxStart.get_trx_start(self.pif)
  trx_start = property(__get__trx_start,__set__trx_start,None,'')

  def __set__trx_lfsr_reset(self,value): TrxLfsrReset.set_trx_lfsr_reset(self.pif, value)
  def __get__trx_lfsr_reset(self): return TrxLfsrReset.get_trx_lfsr_reset(self.pif)
  trx_lfsr_reset = property(__get__trx_lfsr_reset,__set__trx_lfsr_reset,None,'')

  def __set__trx_dac_override_load(self,value): TrxDacOverrideLoad.set_trx_dac_override_load(self.pif, value)
  def __get__trx_dac_override_load(self): return TrxDacOverrideLoad.get_trx_dac_override_load(self.pif)
  trx_dac_override_load = property(__get__trx_dac_override_load,__set__trx_dac_override_load,None,'')

  def __set__spi_master_radar_burst_kick(self,value): SpiMasterRadarBurstKick.set_spi_master_radar_burst_kick(self.pif, value)
  def __get__spi_master_radar_burst_kick(self): return SpiMasterRadarBurstKick.get_spi_master_radar_burst_kick(self.pif)
  spi_master_radar_burst_kick = property(__get__spi_master_radar_burst_kick,__set__spi_master_radar_burst_kick,None,'')

  def __set__force_zero(self,value): ForceZero.set_force_zero(self.spi, value)
  def __get__force_zero(self): return ForceZero.get_force_zero(self.spi)
  force_zero = property(__get__force_zero,__set__force_zero,None,'')

  def __set__force_one(self,value): ForceOne.set_force_one(self.spi, value)
  def __get__force_one(self): return ForceOne.get_force_one(self.spi)
  force_one = property(__get__force_one,__set__force_one,None,'')

  def __set__chip_id_dig(self,value): ChipIdDig.set_chip_id_dig(self.spi, value)
  def __get__chip_id_dig(self): return ChipIdDig.get_chip_id_dig(self.spi)
  chip_id_dig = property(__get__chip_id_dig,__set__chip_id_dig,None,'')

  def __set__chip_id_sys(self,value): ChipIdSys.set_chip_id_sys(self.spi, value)
  def __get__chip_id_sys(self): return ChipIdSys.get_chip_id_sys(self.spi)
  chip_id_sys = property(__get__chip_id_sys,__set__chip_id_sys,None,'')

  def __set__debug(self,value): Debug.set_debug(self.spi, value)
  def __get__debug(self): return Debug.get_debug(self.spi)
  debug = property(__get__debug,__set__debug,None,'')

  def __set__radar_data_spi(self,value): RadarDataSpi.set_radar_data_spi(self.spi, value)
  def __get__radar_data_spi(self): return RadarDataSpi.get_radar_data_spi(self.spi)
  radar_data_spi = property(__get__radar_data_spi,__set__radar_data_spi,None,'')

  def __set__spi_radar_data_spi_fifo_overflow(self,value): RadarDataSpiStatus.set_spi_radar_data_spi_fifo_overflow(self.spi, value)
  def __get__spi_radar_data_spi_fifo_overflow(self): return RadarDataSpiStatus.get_spi_radar_data_spi_fifo_overflow(self.spi)
  spi_radar_data_spi_fifo_overflow = property(__get__spi_radar_data_spi_fifo_overflow,__set__spi_radar_data_spi_fifo_overflow,None,'')

  def __set__spi_radar_data_spi_fifo_underflow(self,value): RadarDataSpiStatus.set_spi_radar_data_spi_fifo_underflow(self.spi, value)
  def __get__spi_radar_data_spi_fifo_underflow(self): return RadarDataSpiStatus.get_spi_radar_data_spi_fifo_underflow(self.spi)
  spi_radar_data_spi_fifo_underflow = property(__get__spi_radar_data_spi_fifo_underflow,__set__spi_radar_data_spi_fifo_underflow,None,'')

  def __set__spi_radar_data_pif_fifo_overflow(self,value): RadarDataSpiStatus.set_spi_radar_data_pif_fifo_overflow(self.spi, value)
  def __get__spi_radar_data_pif_fifo_overflow(self): return RadarDataSpiStatus.get_spi_radar_data_pif_fifo_overflow(self.spi)
  spi_radar_data_pif_fifo_overflow = property(__get__spi_radar_data_pif_fifo_overflow,__set__spi_radar_data_pif_fifo_overflow,None,'')

  def __set__spi_radar_data_pif_fifo_underflow(self,value): RadarDataSpiStatus.set_spi_radar_data_pif_fifo_underflow(self.spi, value)
  def __get__spi_radar_data_pif_fifo_underflow(self): return RadarDataSpiStatus.get_spi_radar_data_pif_fifo_underflow(self.spi)
  spi_radar_data_pif_fifo_underflow = property(__get__spi_radar_data_pif_fifo_underflow,__set__spi_radar_data_pif_fifo_underflow,None,'')

  def __set__radar_data_spi_fifo_empty(self,value): RadarDataSpiStatus.set_radar_data_spi_fifo_empty(self.spi, value)
  def __get__radar_data_spi_fifo_empty(self): return RadarDataSpiStatus.get_radar_data_spi_fifo_empty(self.spi)
  radar_data_spi_fifo_empty = property(__get__radar_data_spi_fifo_empty,__set__radar_data_spi_fifo_empty,None,'')

  def __set__spi_clear_radar_data_spi_fifo_overflow(self,value): SpiRadarDataClearStatus.set_spi_clear_radar_data_spi_fifo_overflow(self.spi, value)
  def __get__spi_clear_radar_data_spi_fifo_overflow(self): return SpiRadarDataClearStatus.get_spi_clear_radar_data_spi_fifo_overflow(self.spi)
  spi_clear_radar_data_spi_fifo_overflow = property(__get__spi_clear_radar_data_spi_fifo_overflow,__set__spi_clear_radar_data_spi_fifo_overflow,None,'')

  def __set__spi_clear_radar_data_spi_fifo_underflow(self,value): SpiRadarDataClearStatus.set_spi_clear_radar_data_spi_fifo_underflow(self.spi, value)
  def __get__spi_clear_radar_data_spi_fifo_underflow(self): return SpiRadarDataClearStatus.get_spi_clear_radar_data_spi_fifo_underflow(self.spi)
  spi_clear_radar_data_spi_fifo_underflow = property(__get__spi_clear_radar_data_spi_fifo_underflow,__set__spi_clear_radar_data_spi_fifo_underflow,None,'')

  def __set__spi_clear_radar_data_pif_fifo_overflow(self,value): SpiRadarDataClearStatus.set_spi_clear_radar_data_pif_fifo_overflow(self.spi, value)
  def __get__spi_clear_radar_data_pif_fifo_overflow(self): return SpiRadarDataClearStatus.get_spi_clear_radar_data_pif_fifo_overflow(self.spi)
  spi_clear_radar_data_pif_fifo_overflow = property(__get__spi_clear_radar_data_pif_fifo_overflow,__set__spi_clear_radar_data_pif_fifo_overflow,None,'')

  def __set__spi_clear_radar_data_pif_fifo_underflow(self,value): SpiRadarDataClearStatus.set_spi_clear_radar_data_pif_fifo_underflow(self.spi, value)
  def __get__spi_clear_radar_data_pif_fifo_underflow(self): return SpiRadarDataClearStatus.get_spi_clear_radar_data_pif_fifo_underflow(self.spi)
  spi_clear_radar_data_pif_fifo_underflow = property(__get__spi_clear_radar_data_pif_fifo_underflow,__set__spi_clear_radar_data_pif_fifo_underflow,None,'')

  def __set__spi_radar_data0_fifo_overflow(self,value): SpiRadarData0FifoStatus.set_spi_radar_data0_fifo_overflow(self.spi, value)
  def __get__spi_radar_data0_fifo_overflow(self): return SpiRadarData0FifoStatus.get_spi_radar_data0_fifo_overflow(self.spi)
  spi_radar_data0_fifo_overflow = property(__get__spi_radar_data0_fifo_overflow,__set__spi_radar_data0_fifo_overflow,None,'')

  def __set__spi_radar_data0_fifo_underflow(self,value): SpiRadarData0FifoStatus.set_spi_radar_data0_fifo_underflow(self.spi, value)
  def __get__spi_radar_data0_fifo_underflow(self): return SpiRadarData0FifoStatus.get_spi_radar_data0_fifo_underflow(self.spi)
  spi_radar_data0_fifo_underflow = property(__get__spi_radar_data0_fifo_underflow,__set__spi_radar_data0_fifo_underflow,None,'')

  def __set__spi_fifo_ram_word0_overflow(self,value): SpiRadarData0FifoStatus.set_spi_fifo_ram_word0_overflow(self.spi, value)
  def __get__spi_fifo_ram_word0_overflow(self): return SpiRadarData0FifoStatus.get_spi_fifo_ram_word0_overflow(self.spi)
  spi_fifo_ram_word0_overflow = property(__get__spi_fifo_ram_word0_overflow,__set__spi_fifo_ram_word0_overflow,None,'')

  def __set__spi_fifo_ram_word0_underflow(self,value): SpiRadarData0FifoStatus.set_spi_fifo_ram_word0_underflow(self.spi, value)
  def __get__spi_fifo_ram_word0_underflow(self): return SpiRadarData0FifoStatus.get_spi_fifo_ram_word0_underflow(self.spi)
  spi_fifo_ram_word0_underflow = property(__get__spi_fifo_ram_word0_underflow,__set__spi_fifo_ram_word0_underflow,None,'')

  def __set__spi_fifo_sample0_overflow(self,value): SpiRadarData0FifoStatus.set_spi_fifo_sample0_overflow(self.spi, value)
  def __get__spi_fifo_sample0_overflow(self): return SpiRadarData0FifoStatus.get_spi_fifo_sample0_overflow(self.spi)
  spi_fifo_sample0_overflow = property(__get__spi_fifo_sample0_overflow,__set__spi_fifo_sample0_overflow,None,'')

  def __set__spi_fifo_sample0_underflow(self,value): SpiRadarData0FifoStatus.set_spi_fifo_sample0_underflow(self.spi, value)
  def __get__spi_fifo_sample0_underflow(self): return SpiRadarData0FifoStatus.get_spi_fifo_sample0_underflow(self.spi)
  spi_fifo_sample0_underflow = property(__get__spi_fifo_sample0_underflow,__set__spi_fifo_sample0_underflow,None,'')

  def __set__spi_clear_radar_data0_fifo_overflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_radar_data0_fifo_overflow(self.spi, value)
  def __get__spi_clear_radar_data0_fifo_overflow(self): return SpiRadarData0ClearStatus.get_spi_clear_radar_data0_fifo_overflow(self.spi)
  spi_clear_radar_data0_fifo_overflow = property(__get__spi_clear_radar_data0_fifo_overflow,__set__spi_clear_radar_data0_fifo_overflow,None,'')

  def __set__spi_clear_radar_data0_fifo_underflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_radar_data0_fifo_underflow(self.spi, value)
  def __get__spi_clear_radar_data0_fifo_underflow(self): return SpiRadarData0ClearStatus.get_spi_clear_radar_data0_fifo_underflow(self.spi)
  spi_clear_radar_data0_fifo_underflow = property(__get__spi_clear_radar_data0_fifo_underflow,__set__spi_clear_radar_data0_fifo_underflow,None,'')

  def __set__spi_clear_fifo_ram_word0_overflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_fifo_ram_word0_overflow(self.spi, value)
  def __get__spi_clear_fifo_ram_word0_overflow(self): return SpiRadarData0ClearStatus.get_spi_clear_fifo_ram_word0_overflow(self.spi)
  spi_clear_fifo_ram_word0_overflow = property(__get__spi_clear_fifo_ram_word0_overflow,__set__spi_clear_fifo_ram_word0_overflow,None,'')

  def __set__spi_clear_fifo_ram_word0_underflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_fifo_ram_word0_underflow(self.spi, value)
  def __get__spi_clear_fifo_ram_word0_underflow(self): return SpiRadarData0ClearStatus.get_spi_clear_fifo_ram_word0_underflow(self.spi)
  spi_clear_fifo_ram_word0_underflow = property(__get__spi_clear_fifo_ram_word0_underflow,__set__spi_clear_fifo_ram_word0_underflow,None,'')

  def __set__spi_clear_fifo_sample0_overflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_fifo_sample0_overflow(self.spi, value)
  def __get__spi_clear_fifo_sample0_overflow(self): return SpiRadarData0ClearStatus.get_spi_clear_fifo_sample0_overflow(self.spi)
  spi_clear_fifo_sample0_overflow = property(__get__spi_clear_fifo_sample0_overflow,__set__spi_clear_fifo_sample0_overflow,None,'')

  def __set__spi_clear_fifo_sample0_underflow(self,value): SpiRadarData0ClearStatus.set_spi_clear_fifo_sample0_underflow(self.spi, value)
  def __get__spi_clear_fifo_sample0_underflow(self): return SpiRadarData0ClearStatus.get_spi_clear_fifo_sample0_underflow(self.spi)
  spi_clear_fifo_sample0_underflow = property(__get__spi_clear_fifo_sample0_underflow,__set__spi_clear_fifo_sample0_underflow,None,'')

  def __set__spi_radar_data1_fifo_overflow(self,value): SpiRadarData1FifoStatus.set_spi_radar_data1_fifo_overflow(self.spi, value)
  def __get__spi_radar_data1_fifo_overflow(self): return SpiRadarData1FifoStatus.get_spi_radar_data1_fifo_overflow(self.spi)
  spi_radar_data1_fifo_overflow = property(__get__spi_radar_data1_fifo_overflow,__set__spi_radar_data1_fifo_overflow,None,'')

  def __set__spi_radar_data1_fifo_underflow(self,value): SpiRadarData1FifoStatus.set_spi_radar_data1_fifo_underflow(self.spi, value)
  def __get__spi_radar_data1_fifo_underflow(self): return SpiRadarData1FifoStatus.get_spi_radar_data1_fifo_underflow(self.spi)
  spi_radar_data1_fifo_underflow = property(__get__spi_radar_data1_fifo_underflow,__set__spi_radar_data1_fifo_underflow,None,'')

  def __set__spi_fifo_ram_word1_overflow(self,value): SpiRadarData1FifoStatus.set_spi_fifo_ram_word1_overflow(self.spi, value)
  def __get__spi_fifo_ram_word1_overflow(self): return SpiRadarData1FifoStatus.get_spi_fifo_ram_word1_overflow(self.spi)
  spi_fifo_ram_word1_overflow = property(__get__spi_fifo_ram_word1_overflow,__set__spi_fifo_ram_word1_overflow,None,'')

  def __set__spi_fifo_ram_word1_underflow(self,value): SpiRadarData1FifoStatus.set_spi_fifo_ram_word1_underflow(self.spi, value)
  def __get__spi_fifo_ram_word1_underflow(self): return SpiRadarData1FifoStatus.get_spi_fifo_ram_word1_underflow(self.spi)
  spi_fifo_ram_word1_underflow = property(__get__spi_fifo_ram_word1_underflow,__set__spi_fifo_ram_word1_underflow,None,'')

  def __set__spi_fifo_sample1_overflow(self,value): SpiRadarData1FifoStatus.set_spi_fifo_sample1_overflow(self.spi, value)
  def __get__spi_fifo_sample1_overflow(self): return SpiRadarData1FifoStatus.get_spi_fifo_sample1_overflow(self.spi)
  spi_fifo_sample1_overflow = property(__get__spi_fifo_sample1_overflow,__set__spi_fifo_sample1_overflow,None,'')

  def __set__spi_fifo_sample1_underflow(self,value): SpiRadarData1FifoStatus.set_spi_fifo_sample1_underflow(self.spi, value)
  def __get__spi_fifo_sample1_underflow(self): return SpiRadarData1FifoStatus.get_spi_fifo_sample1_underflow(self.spi)
  spi_fifo_sample1_underflow = property(__get__spi_fifo_sample1_underflow,__set__spi_fifo_sample1_underflow,None,'')

  def __set__spi_clear_radar_data1_fifo_overflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_radar_data1_fifo_overflow(self.spi, value)
  def __get__spi_clear_radar_data1_fifo_overflow(self): return SpiRadarData1ClearStatus.get_spi_clear_radar_data1_fifo_overflow(self.spi)
  spi_clear_radar_data1_fifo_overflow = property(__get__spi_clear_radar_data1_fifo_overflow,__set__spi_clear_radar_data1_fifo_overflow,None,'')

  def __set__spi_clear_radar_data1_fifo_underflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_radar_data1_fifo_underflow(self.spi, value)
  def __get__spi_clear_radar_data1_fifo_underflow(self): return SpiRadarData1ClearStatus.get_spi_clear_radar_data1_fifo_underflow(self.spi)
  spi_clear_radar_data1_fifo_underflow = property(__get__spi_clear_radar_data1_fifo_underflow,__set__spi_clear_radar_data1_fifo_underflow,None,'')

  def __set__spi_clear_fifo_ram_word1_overflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_fifo_ram_word1_overflow(self.spi, value)
  def __get__spi_clear_fifo_ram_word1_overflow(self): return SpiRadarData1ClearStatus.get_spi_clear_fifo_ram_word1_overflow(self.spi)
  spi_clear_fifo_ram_word1_overflow = property(__get__spi_clear_fifo_ram_word1_overflow,__set__spi_clear_fifo_ram_word1_overflow,None,'')

  def __set__spi_clear_fifo_ram_word1_underflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_fifo_ram_word1_underflow(self.spi, value)
  def __get__spi_clear_fifo_ram_word1_underflow(self): return SpiRadarData1ClearStatus.get_spi_clear_fifo_ram_word1_underflow(self.spi)
  spi_clear_fifo_ram_word1_underflow = property(__get__spi_clear_fifo_ram_word1_underflow,__set__spi_clear_fifo_ram_word1_underflow,None,'')

  def __set__spi_clear_fifo_sample1_overflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_fifo_sample1_overflow(self.spi, value)
  def __get__spi_clear_fifo_sample1_overflow(self): return SpiRadarData1ClearStatus.get_spi_clear_fifo_sample1_overflow(self.spi)
  spi_clear_fifo_sample1_overflow = property(__get__spi_clear_fifo_sample1_overflow,__set__spi_clear_fifo_sample1_overflow,None,'')

  def __set__spi_clear_fifo_sample1_underflow(self,value): SpiRadarData1ClearStatus.set_spi_clear_fifo_sample1_underflow(self.spi, value)
  def __get__spi_clear_fifo_sample1_underflow(self): return SpiRadarData1ClearStatus.get_spi_clear_fifo_sample1_underflow(self.spi)
  spi_clear_fifo_sample1_underflow = property(__get__spi_clear_fifo_sample1_underflow,__set__spi_clear_fifo_sample1_underflow,None,'')

  def __set__smpl_ram1_bist_en(self,value): RadarBistCtrl.set_smpl_ram1_bist_en(self.spi, value)
  def __get__smpl_ram1_bist_en(self): return RadarBistCtrl.get_smpl_ram1_bist_en(self.spi)
  smpl_ram1_bist_en = property(__get__smpl_ram1_bist_en,__set__smpl_ram1_bist_en,None,'')

  def __set__smpl_ram0_bist_en(self,value): RadarBistCtrl.set_smpl_ram0_bist_en(self.spi, value)
  def __get__smpl_ram0_bist_en(self): return RadarBistCtrl.get_smpl_ram0_bist_en(self.spi)
  smpl_ram0_bist_en = property(__get__smpl_ram0_bist_en,__set__smpl_ram0_bist_en,None,'')

  def __set__smpl_ram1_bist_pass(self,value): RadarBistStatus.set_smpl_ram1_bist_pass(self.spi, value)
  def __get__smpl_ram1_bist_pass(self): return RadarBistStatus.get_smpl_ram1_bist_pass(self.spi)
  smpl_ram1_bist_pass = property(__get__smpl_ram1_bist_pass,__set__smpl_ram1_bist_pass,None,'')

  def __set__smpl_ram1_bist_done(self,value): RadarBistStatus.set_smpl_ram1_bist_done(self.spi, value)
  def __get__smpl_ram1_bist_done(self): return RadarBistStatus.get_smpl_ram1_bist_done(self.spi)
  smpl_ram1_bist_done = property(__get__smpl_ram1_bist_done,__set__smpl_ram1_bist_done,None,'')

  def __set__smpl_ram0_bist_pass(self,value): RadarBistStatus.set_smpl_ram0_bist_pass(self.spi, value)
  def __get__smpl_ram0_bist_pass(self): return RadarBistStatus.get_smpl_ram0_bist_pass(self.spi)
  smpl_ram0_bist_pass = property(__get__smpl_ram0_bist_pass,__set__smpl_ram0_bist_pass,None,'')

  def __set__smpl_ram0_bist_done(self,value): RadarBistStatus.set_smpl_ram0_bist_done(self.spi, value)
  def __get__smpl_ram0_bist_done(self): return RadarBistStatus.get_smpl_ram0_bist_done(self.spi)
  smpl_ram0_bist_done = property(__get__smpl_ram0_bist_done,__set__smpl_ram0_bist_done,None,'')

  def __set__firmware_version_spi(self,value): FirmwareVersionSpi.set_firmware_version_spi(self.spi, value)
  def __get__firmware_version_spi(self): return FirmwareVersionSpi.get_firmware_version_spi(self.spi)
  firmware_version_spi = property(__get__firmware_version_spi,__set__firmware_version_spi,None,'')

  def __set__to_cpu_write_data(self,value): ToCpuWriteData.set_to_cpu_write_data(self.spi, value)
  def __get__to_cpu_write_data(self): return ToCpuWriteData.get_to_cpu_write_data(self.spi)
  to_cpu_write_data = property(__get__to_cpu_write_data,__set__to_cpu_write_data,None,'')

  def __set__spi_to_cpu_fifo_overflow(self,value): SpiMbFifoStatus.set_spi_to_cpu_fifo_overflow(self.spi, value)
  def __get__spi_to_cpu_fifo_overflow(self): return SpiMbFifoStatus.get_spi_to_cpu_fifo_overflow(self.spi)
  spi_to_cpu_fifo_overflow = property(__get__spi_to_cpu_fifo_overflow,__set__spi_to_cpu_fifo_overflow,None,'')

  def __set__spi_to_cpu_fifo_underflow(self,value): SpiMbFifoStatus.set_spi_to_cpu_fifo_underflow(self.spi, value)
  def __get__spi_to_cpu_fifo_underflow(self): return SpiMbFifoStatus.get_spi_to_cpu_fifo_underflow(self.spi)
  spi_to_cpu_fifo_underflow = property(__get__spi_to_cpu_fifo_underflow,__set__spi_to_cpu_fifo_underflow,None,'')

  def __set__spi_from_cpu_fifo_overflow(self,value): SpiMbFifoStatus.set_spi_from_cpu_fifo_overflow(self.spi, value)
  def __get__spi_from_cpu_fifo_overflow(self): return SpiMbFifoStatus.get_spi_from_cpu_fifo_overflow(self.spi)
  spi_from_cpu_fifo_overflow = property(__get__spi_from_cpu_fifo_overflow,__set__spi_from_cpu_fifo_overflow,None,'')

  def __set__spi_from_cpu_fifo_underflow(self,value): SpiMbFifoStatus.set_spi_from_cpu_fifo_underflow(self.spi, value)
  def __get__spi_from_cpu_fifo_underflow(self): return SpiMbFifoStatus.get_spi_from_cpu_fifo_underflow(self.spi)
  spi_from_cpu_fifo_underflow = property(__get__spi_from_cpu_fifo_underflow,__set__spi_from_cpu_fifo_underflow,None,'')

  def __set__to_cpu_fifo_empty(self,value): SpiMbFifoStatus.set_to_cpu_fifo_empty(self.spi, value)
  def __get__to_cpu_fifo_empty(self): return SpiMbFifoStatus.get_to_cpu_fifo_empty(self.spi)
  to_cpu_fifo_empty = property(__get__to_cpu_fifo_empty,__set__to_cpu_fifo_empty,None,'')

  def __set__from_cpu_data_valid(self,value): SpiMbFifoStatus.set_from_cpu_data_valid(self.spi, value)
  def __get__from_cpu_data_valid(self): return SpiMbFifoStatus.get_from_cpu_data_valid(self.spi)
  from_cpu_data_valid = property(__get__from_cpu_data_valid,__set__from_cpu_data_valid,None,'')

  def __set__to_cpu_fifo_full(self,value): SpiMbFifoStatus.set_to_cpu_fifo_full(self.spi, value)
  def __get__to_cpu_fifo_full(self): return SpiMbFifoStatus.get_to_cpu_fifo_full(self.spi)
  to_cpu_fifo_full = property(__get__to_cpu_fifo_full,__set__to_cpu_fifo_full,None,'')

  def __set__from_cpu_read_data(self,value): FromCpuReadData.set_from_cpu_read_data(self.spi, value)
  def __get__from_cpu_read_data(self): return FromCpuReadData.get_from_cpu_read_data(self.spi)
  from_cpu_read_data = property(__get__from_cpu_read_data,__set__from_cpu_read_data,None,'')

  def __set__spi_clear_to_cpu_fifo_overflow(self,value): SpiMbClearStatus.set_spi_clear_to_cpu_fifo_overflow(self.spi, value)
  def __get__spi_clear_to_cpu_fifo_overflow(self): return SpiMbClearStatus.get_spi_clear_to_cpu_fifo_overflow(self.spi)
  spi_clear_to_cpu_fifo_overflow = property(__get__spi_clear_to_cpu_fifo_overflow,__set__spi_clear_to_cpu_fifo_overflow,None,'')

  def __set__spi_clear_to_cpu_fifo_underflow(self,value): SpiMbClearStatus.set_spi_clear_to_cpu_fifo_underflow(self.spi, value)
  def __get__spi_clear_to_cpu_fifo_underflow(self): return SpiMbClearStatus.get_spi_clear_to_cpu_fifo_underflow(self.spi)
  spi_clear_to_cpu_fifo_underflow = property(__get__spi_clear_to_cpu_fifo_underflow,__set__spi_clear_to_cpu_fifo_underflow,None,'')

  def __set__spi_clear_from_cpu_fifo_overflow(self,value): SpiMbClearStatus.set_spi_clear_from_cpu_fifo_overflow(self.spi, value)
  def __get__spi_clear_from_cpu_fifo_overflow(self): return SpiMbClearStatus.get_spi_clear_from_cpu_fifo_overflow(self.spi)
  spi_clear_from_cpu_fifo_overflow = property(__get__spi_clear_from_cpu_fifo_overflow,__set__spi_clear_from_cpu_fifo_overflow,None,'')

  def __set__spi_clear_from_cpu_fifo_underflow(self,value): SpiMbClearStatus.set_spi_clear_from_cpu_fifo_underflow(self.spi, value)
  def __get__spi_clear_from_cpu_fifo_underflow(self): return SpiMbClearStatus.get_spi_clear_from_cpu_fifo_underflow(self.spi)
  spi_clear_from_cpu_fifo_underflow = property(__get__spi_clear_from_cpu_fifo_underflow,__set__spi_clear_from_cpu_fifo_underflow,None,'')

  def __set__to_mem_write_data(self,value): ToMemWriteData.set_to_mem_write_data(self.spi, value)
  def __get__to_mem_write_data(self): return ToMemWriteData.get_to_mem_write_data(self.spi)
  to_mem_write_data = property(__get__to_mem_write_data,__set__to_mem_write_data,None,'')

  def __set__spi_to_mem_fifo_overflow(self,value): SpiMemFifoStatus.set_spi_to_mem_fifo_overflow(self.spi, value)
  def __get__spi_to_mem_fifo_overflow(self): return SpiMemFifoStatus.get_spi_to_mem_fifo_overflow(self.spi)
  spi_to_mem_fifo_overflow = property(__get__spi_to_mem_fifo_overflow,__set__spi_to_mem_fifo_overflow,None,'')

  def __set__spi_to_mem_fifo_underflow(self,value): SpiMemFifoStatus.set_spi_to_mem_fifo_underflow(self.spi, value)
  def __get__spi_to_mem_fifo_underflow(self): return SpiMemFifoStatus.get_spi_to_mem_fifo_underflow(self.spi)
  spi_to_mem_fifo_underflow = property(__get__spi_to_mem_fifo_underflow,__set__spi_to_mem_fifo_underflow,None,'')

  def __set__spi_from_mem_fifo_overflow(self,value): SpiMemFifoStatus.set_spi_from_mem_fifo_overflow(self.spi, value)
  def __get__spi_from_mem_fifo_overflow(self): return SpiMemFifoStatus.get_spi_from_mem_fifo_overflow(self.spi)
  spi_from_mem_fifo_overflow = property(__get__spi_from_mem_fifo_overflow,__set__spi_from_mem_fifo_overflow,None,'')

  def __set__spi_from_mem_fifo_underflow(self,value): SpiMemFifoStatus.set_spi_from_mem_fifo_underflow(self.spi, value)
  def __get__spi_from_mem_fifo_underflow(self): return SpiMemFifoStatus.get_spi_from_mem_fifo_underflow(self.spi)
  spi_from_mem_fifo_underflow = property(__get__spi_from_mem_fifo_underflow,__set__spi_from_mem_fifo_underflow,None,'')

  def __set__from_mem_data_valid(self,value): SpiMemFifoStatus.set_from_mem_data_valid(self.spi, value)
  def __get__from_mem_data_valid(self): return SpiMemFifoStatus.get_from_mem_data_valid(self.spi)
  from_mem_data_valid = property(__get__from_mem_data_valid,__set__from_mem_data_valid,None,'')

  def __set__to_mem_fifo_empty(self,value): SpiMemFifoStatus.set_to_mem_fifo_empty(self.spi, value)
  def __get__to_mem_fifo_empty(self): return SpiMemFifoStatus.get_to_mem_fifo_empty(self.spi)
  to_mem_fifo_empty = property(__get__to_mem_fifo_empty,__set__to_mem_fifo_empty,None,'')

  def __set__to_mem_fifo_full(self,value): SpiMemFifoStatus.set_to_mem_fifo_full(self.spi, value)
  def __get__to_mem_fifo_full(self): return SpiMemFifoStatus.get_to_mem_fifo_full(self.spi)
  to_mem_fifo_full = property(__get__to_mem_fifo_full,__set__to_mem_fifo_full,None,'')

  def __set__from_mem_read_data(self,value): FromMemReadData.set_from_mem_read_data(self.spi, value)
  def __get__from_mem_read_data(self): return FromMemReadData.get_from_mem_read_data(self.spi)
  from_mem_read_data = property(__get__from_mem_read_data,__set__from_mem_read_data,None,'')

  def __set__spi_clear_to_mem_fifo_overflow(self,value): SpiMemClearStatus.set_spi_clear_to_mem_fifo_overflow(self.spi, value)
  def __get__spi_clear_to_mem_fifo_overflow(self): return SpiMemClearStatus.get_spi_clear_to_mem_fifo_overflow(self.spi)
  spi_clear_to_mem_fifo_overflow = property(__get__spi_clear_to_mem_fifo_overflow,__set__spi_clear_to_mem_fifo_overflow,None,'')

  def __set__spi_clear_to_mem_fifo_underflow(self,value): SpiMemClearStatus.set_spi_clear_to_mem_fifo_underflow(self.spi, value)
  def __get__spi_clear_to_mem_fifo_underflow(self): return SpiMemClearStatus.get_spi_clear_to_mem_fifo_underflow(self.spi)
  spi_clear_to_mem_fifo_underflow = property(__get__spi_clear_to_mem_fifo_underflow,__set__spi_clear_to_mem_fifo_underflow,None,'')

  def __set__spi_clear_from_mem_fifo_overflow(self,value): SpiMemClearStatus.set_spi_clear_from_mem_fifo_overflow(self.spi, value)
  def __get__spi_clear_from_mem_fifo_overflow(self): return SpiMemClearStatus.get_spi_clear_from_mem_fifo_overflow(self.spi)
  spi_clear_from_mem_fifo_overflow = property(__get__spi_clear_from_mem_fifo_overflow,__set__spi_clear_from_mem_fifo_overflow,None,'')

  def __set__spi_clear_from_mem_fifo_underflow(self,value): SpiMemClearStatus.set_spi_clear_from_mem_fifo_underflow(self.spi, value)
  def __get__spi_clear_from_mem_fifo_underflow(self): return SpiMemClearStatus.get_spi_clear_from_mem_fifo_underflow(self.spi)
  spi_clear_from_mem_fifo_underflow = property(__get__spi_clear_from_mem_fifo_underflow,__set__spi_clear_from_mem_fifo_underflow,None,'')

  def __set__mem_readback_mode(self,value): MemMode.set_mem_readback_mode(self.spi, value)
  def __get__mem_readback_mode(self): return MemMode.get_mem_readback_mode(self.spi)
  mem_readback_mode = property(__get__mem_readback_mode,__set__mem_readback_mode,None,'')

  def __set__mem_programming_mode(self,value): MemMode.set_mem_programming_mode(self.spi, value)
  def __get__mem_programming_mode(self): return MemMode.get_mem_programming_mode(self.spi)
  mem_programming_mode = property(__get__mem_programming_mode,__set__mem_programming_mode,None,'')

  def __set__mem_first_addr_msb(self,value): MemFirstAddrMsb.set_mem_first_addr_msb(self.spi, value)
  def __get__mem_first_addr_msb(self): return MemFirstAddrMsb.get_mem_first_addr_msb(self.spi)
  mem_first_addr_msb = property(__get__mem_first_addr_msb,__set__mem_first_addr_msb,None,'')

  def __set__mem_first_addr_lsb(self,value): MemFirstAddrLsb.set_mem_first_addr_lsb(self.spi, value)
  def __get__mem_first_addr_lsb(self): return MemFirstAddrLsb.get_mem_first_addr_lsb(self.spi)
  mem_first_addr_lsb = property(__get__mem_first_addr_lsb,__set__mem_first_addr_lsb,None,'')

  def __set__boot_from_otp_spi(self,value): BootFromOtpSpi.set_boot_from_otp_spi(self.spi, value)
  def __get__boot_from_otp_spi(self): return BootFromOtpSpi.get_boot_from_otp_spi(self.spi)
  boot_from_otp_spi = property(__get__boot_from_otp_spi,__set__boot_from_otp_spi,None,'')

  def __set__progmem_bist_en(self,value): McuBistCtrl.set_progmem_bist_en(self.spi, value)
  def __get__progmem_bist_en(self): return McuBistCtrl.get_progmem_bist_en(self.spi)
  progmem_bist_en = property(__get__progmem_bist_en,__set__progmem_bist_en,None,'')

  def __set__intram_bist_en(self,value): McuBistCtrl.set_intram_bist_en(self.spi, value)
  def __get__intram_bist_en(self): return McuBistCtrl.get_intram_bist_en(self.spi)
  intram_bist_en = property(__get__intram_bist_en,__set__intram_bist_en,None,'')

  def __set__progmem_bist_pass(self,value): McuBistStatus.set_progmem_bist_pass(self.spi, value)
  def __get__progmem_bist_pass(self): return McuBistStatus.get_progmem_bist_pass(self.spi)
  progmem_bist_pass = property(__get__progmem_bist_pass,__set__progmem_bist_pass,None,'')

  def __set__progmem_bist_done(self,value): McuBistStatus.set_progmem_bist_done(self.spi, value)
  def __get__progmem_bist_done(self): return McuBistStatus.get_progmem_bist_done(self.spi)
  progmem_bist_done = property(__get__progmem_bist_done,__set__progmem_bist_done,None,'')

  def __set__intram_bist_pass(self,value): McuBistStatus.set_intram_bist_pass(self.spi, value)
  def __get__intram_bist_pass(self): return McuBistStatus.get_intram_bist_pass(self.spi)
  intram_bist_pass = property(__get__intram_bist_pass,__set__intram_bist_pass,None,'')

  def __set__intram_bist_done(self,value): McuBistStatus.set_intram_bist_done(self.spi, value)
  def __get__intram_bist_done(self): return McuBistStatus.get_intram_bist_done(self.spi)
  intram_bist_done = property(__get__intram_bist_done,__set__intram_bist_done,None,'')

  def __set__spi_mode(self,value): SpiConfig.set_spi_mode(self.spi, value)
  def __get__spi_mode(self): return SpiConfig.get_spi_mode(self.spi)
  spi_mode = property(__get__spi_mode,__set__spi_mode,None,'')

  def __set__cpu_reset(self,value): CpuReset.set_cpu_reset(self.spi, value)
  def __get__cpu_reset(self): return CpuReset.get_cpu_reset(self.spi)
  cpu_reset = property(__get__cpu_reset,__set__cpu_reset,None,'')

  def __set__debug_xif(self,value): DebugXif.set_debug_xif(self.xif, value)
  def __get__debug_xif(self): return DebugXif.get_debug_xif(self.xif)
  debug_xif = property(__get__debug_xif,__set__debug_xif,None,'')

  def __set__sampler_preset_en(self,value): SamplerPresetMsb.set_sampler_preset_en(self.xif, value)
  def __get__sampler_preset_en(self): return SamplerPresetMsb.get_sampler_preset_en(self.xif)
  sampler_preset_en = property(__get__sampler_preset_en,__set__sampler_preset_en,None,'')

  def __set__sampler_preset_val_msb(self,value): SamplerPresetMsb.set_sampler_preset_val_msb(self.xif, value)
  def __get__sampler_preset_val_msb(self): return SamplerPresetMsb.get_sampler_preset_val_msb(self.xif)
  sampler_preset_val_msb = property(__get__sampler_preset_val_msb,__set__sampler_preset_val_msb,None,'')

  def __set__sampler_preset_val_lsb(self,value): SamplerPresetLsb.set_sampler_preset_val_lsb(self.xif, value)
  def __get__sampler_preset_val_lsb(self): return SamplerPresetLsb.get_sampler_preset_val_lsb(self.xif)
  sampler_preset_val_lsb = property(__get__sampler_preset_val_lsb,__set__sampler_preset_val_lsb,None,'')

  def __set__dac_trim_a(self,value): DacTrim.set_dac_trim_a(self.xif, value)
  def __get__dac_trim_a(self): return DacTrim.get_dac_trim_a(self.xif)
  dac_trim_a = property(__get__dac_trim_a,__set__dac_trim_a,None,'')

  def __set__dac_trim_b(self,value): DacTrim.set_dac_trim_b(self.xif, value)
  def __get__dac_trim_b(self): return DacTrim.get_dac_trim_b(self.xif)
  dac_trim_b = property(__get__dac_trim_b,__set__dac_trim_b,None,'')

  def __set__preamp_trim(self,value): PreampTrim.set_preamp_trim(self.xif, value)
  def __get__preamp_trim(self): return PreampTrim.get_preamp_trim(self.xif)
  preamp_trim = property(__get__preamp_trim,__set__preamp_trim,None,'')

  def __set__rx_fe_anatestreq(self,value): RxFeAnatestreq.set_rx_fe_anatestreq(self.xif, value)
  def __get__rx_fe_anatestreq(self): return RxFeAnatestreq.get_rx_fe_anatestreq(self.xif)
  rx_fe_anatestreq = property(__get__rx_fe_anatestreq,__set__rx_fe_anatestreq,None,'')

  def __set__lna_anatestreq(self,value): LnaAnatestreq.set_lna_anatestreq(self.xif, value)
  def __get__lna_anatestreq(self): return LnaAnatestreq.get_lna_anatestreq(self.xif)
  lna_anatestreq = property(__get__lna_anatestreq,__set__lna_anatestreq,None,'')

  def __set__dac_anatestreq(self,value): DacAnatestreq.set_dac_anatestreq(self.xif, value)
  def __get__dac_anatestreq(self): return DacAnatestreq.get_dac_anatestreq(self.xif)
  dac_anatestreq = property(__get__dac_anatestreq,__set__dac_anatestreq,None,'')

  def __set__vref_trim(self,value): VrefTrim.set_vref_trim(self.xif, value)
  def __get__vref_trim(self): return VrefTrim.get_vref_trim(self.xif)
  vref_trim = property(__get__vref_trim,__set__vref_trim,None,'')

  def __set__iref_trim(self,value): IrefTrim.set_iref_trim(self.xif, value)
  def __get__iref_trim(self): return IrefTrim.get_iref_trim(self.xif)
  iref_trim = property(__get__iref_trim,__set__iref_trim,None,'')

  def __set__apc_temp_trim(self,value): ApcTempTrim.set_apc_temp_trim(self.xif, value)
  def __get__apc_temp_trim(self): return ApcTempTrim.get_apc_temp_trim(self.xif)
  apc_temp_trim = property(__get__apc_temp_trim,__set__apc_temp_trim,None,'')

  
  def __init__(self, radar, *args, **kwargs):
    super(X4, self).__init__(radar, *args, **kwargs)
    with self._addattr():
       self.pif = PIF(self,"pif")
       self.__add_map__(self.pif)
       self.spi = SPI(self,"spi")
       self.__add_map__(self.spi)
       self.xif = XIF(self,"xif")
       self.__add_map__(self.xif)
