<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: FreeRTOS USART peripheral</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">FreeRTOS USART peripheral<div class="ingroups"><a class="el" href="group__freertos__service__group.xhtml">FreeRTOS Peripheral Control</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>control  
<a href="#details">More...</a></p>
<div class="dynheader">
Collaboration diagram for FreeRTOS USART peripheral:</div>
<div class="dyncontent">
<center><table><tr><td><div class="center"><iframe scrolling="no" frameborder="0" src="group__freertos__usart__peripheral__control__group.svg" width="395" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</td></tr></table></center>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga2925311f072889cff22626013ef87310"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga2925311f072889cff22626013ef87310">freertos_usart_write_packet</a>(p_usart,  data,  len,  block_time_ticks)&#160;&#160;&#160;<a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga4f47ec231efeccf8f159c5a14124d0ff">freertos_usart_write_packet_async</a>((p_usart), (data), (len), (block_time_ticks), (NULL))</td></tr>
<tr class="memdesc:ga2925311f072889cff22626013ef87310"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initiate a multi-byte write operation on an USART peripheral.  <a href="#ga2925311f072889cff22626013ef87310">More...</a><br /></td></tr>
<tr class="separator:ga2925311f072889cff22626013ef87310"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:gaa09713e6ef0f41982d6fee5168d6fc93"><td class="memItemLeft" align="right" valign="top">typedef void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#gaa09713e6ef0f41982d6fee5168d6fc93">freertos_usart_if</a></td></tr>
<tr class="memdesc:gaa09713e6ef0f41982d6fee5168d6fc93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type returned from a call to <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a>, and then used to reference a USART port in calls to FreeRTOS peripheral control functions.  <a href="#gaa09713e6ef0f41982d6fee5168d6fc93">More...</a><br /></td></tr>
<tr class="separator:gaa09713e6ef0f41982d6fee5168d6fc93"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga09bccd303f0eafa482a0ffb56d0438b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#gaa09713e6ef0f41982d6fee5168d6fc93">freertos_usart_if</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8">freertos_usart_serial_init</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *const uart_parameters, const <a class="el" href="group__freertos__service__group.xhtml#gae311acbb26b7f10405c6e9f29ef9281b">freertos_peripheral_options_t</a> *const freertos_driver_parameters)</td></tr>
<tr class="memdesc:ga09bccd303f0eafa482a0ffb56d0438b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the FreeRTOS ASF USART driver for the specified USART port.  <a href="#ga09bccd303f0eafa482a0ffb56d0438b8">More...</a><br /></td></tr>
<tr class="separator:ga09bccd303f0eafa482a0ffb56d0438b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4f47ec231efeccf8f159c5a14124d0ff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="status__codes_8h.xhtml#a1f12e07903f974729de22ebe2f52273e">status_code_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga4f47ec231efeccf8f159c5a14124d0ff">freertos_usart_write_packet_async</a> (<a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#gaa09713e6ef0f41982d6fee5168d6fc93">freertos_usart_if</a> p_usart, const uint8_t *data, size_t len, <a class="el" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a> block_time_ticks, <a class="el" href="semphr_8h.xhtml#aa91aa1b6835a184838f9ccf138a6ad10">xSemaphoreHandle</a> notification_semaphore)</td></tr>
<tr class="memdesc:ga4f47ec231efeccf8f159c5a14124d0ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initiate a completely asynchronous multi-byte write operation on a USART peripheral.  <a href="#ga4f47ec231efeccf8f159c5a14124d0ff">More...</a><br /></td></tr>
<tr class="separator:ga4f47ec231efeccf8f159c5a14124d0ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f4de374d2019244881290bf4943cb81"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga9f4de374d2019244881290bf4943cb81">freertos_usart_serial_read_packet</a> (<a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#gaa09713e6ef0f41982d6fee5168d6fc93">freertos_usart_if</a> p_usart, uint8_t *data, uint32_t len, <a class="el" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a> block_time_ticks)</td></tr>
<tr class="memdesc:ga9f4de374d2019244881290bf4943cb81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initiate a completely multi-byte read operation on a USART peripheral.  <a href="#ga9f4de374d2019244881290bf4943cb81">More...</a><br /></td></tr>
<tr class="separator:ga9f4de374d2019244881290bf4943cb81"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>control </p>
<p>FreeRTOS peripheral control functions for the USART peripheral </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="ga2925311f072889cff22626013ef87310"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2925311f072889cff22626013ef87310">&sect;&nbsp;</a></span>freertos_usart_write_packet</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define freertos_usart_write_packet</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">p_usart, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">data, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">len, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">block_time_ticks&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga4f47ec231efeccf8f159c5a14124d0ff">freertos_usart_write_packet_async</a>((p_usart), (data), (len), (block_time_ticks), (NULL))</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initiate a multi-byte write operation on an USART peripheral. </p>
<p><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga2925311f072889cff22626013ef87310" title="Initiate a multi-byte write operation on an USART peripheral. ">freertos_usart_write_packet()</a> is an ASF specific FreeRTOS driver function. It configures the USART peripheral DMA controller (PDC) to transmit data on the USART port, then waits until the transmission is complete. Other RTOS tasks execute while the transmission is in progress.</p>
<p><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga4f47ec231efeccf8f159c5a14124d0ff" title="Initiate a completely asynchronous multi-byte write operation on a USART peripheral. ">freertos_usart_write_packet_async()</a> is a version that does not wait for the transmission to complete before returning.</p>
<p>The FreeRTOS ASF USART driver is initialized using a call to <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a>. The freertos_driver_parameters.options_flags parameter passed into the initialization function defines the driver behavior. <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga2925311f072889cff22626013ef87310" title="Initiate a multi-byte write operation on an USART peripheral. ">freertos_usart_write_packet()</a> can only be used if the freertos_driver_parameters.options_flags parameter passed to the initialization function had the WAIT_TX_COMPLETE bit set.</p>
<p>Readers are recommended to also reference the application note and examples that accompany the FreeRTOS ASF drivers.</p>
<p>The FreeRTOS ASF driver both installs and handles the USART PDC interrupts. Users do not need to concern themselves with interrupt handling, and must not install their own interrupt handler.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>The handle to the USART port returned by the <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a> call used to initialise the port. </td></tr>
    <tr><td class="paramname">data</td><td>A pointer to the data to be transmitted. </td></tr>
    <tr><td class="paramname">len</td><td>The number of bytes to transmit. </td></tr>
    <tr><td class="paramname">block_time_ticks</td><td>The FreeRTOS ASF USART driver is initialized using a call to <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a>. The freertos_driver_parameters.options_flags parameter passed to the initialization function defines the driver behavior. If freertos_driver_parameters.options_flags had the USE_TX_ACCESS_MUTEX bit set, then the driver will only write to the USART peripheral if it has first gained exclusive access to it. block_time_ticks specifies the maximum amount of time the driver will wait to get exclusive access before aborting the write operation. Other tasks will execute during any waiting time. block_time_ticks is specified in RTOS tick periods. To specify a block time in milliseconds, divide the milliseconds value by portTICK_RATE_MS, and pass the result in block_time_ticks. portTICK_RATE_MS is defined by FreeRTOS.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ERR_INVALID_ARG is returned if an input parameter is invalid. ERR_TIMEOUT is returned if block_time_ticks passed before exclusive access to the USART peripheral could be obtained. STATUS_OK is returned if the PDC was successfully configured to perform the USART write operation. </dd></dl>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="gaa09713e6ef0f41982d6fee5168d6fc93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa09713e6ef0f41982d6fee5168d6fc93">&sect;&nbsp;</a></span>freertos_usart_if</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#gaa09713e6ef0f41982d6fee5168d6fc93">freertos_usart_if</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type returned from a call to <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a>, and then used to reference a USART port in calls to FreeRTOS peripheral control functions. </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga09bccd303f0eafa482a0ffb56d0438b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga09bccd303f0eafa482a0ffb56d0438b8">&sect;&nbsp;</a></span>freertos_usart_serial_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#gaa09713e6ef0f41982d6fee5168d6fc93">freertos_usart_if</a> freertos_usart_serial_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *const&#160;</td>
          <td class="paramname"><em>uart_parameters</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__freertos__service__group.xhtml#gae311acbb26b7f10405c6e9f29ef9281b">freertos_peripheral_options_t</a> *const&#160;</td>
          <td class="paramname"><em>freertos_driver_parameters</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initializes the FreeRTOS ASF USART driver for the specified USART port. </p>
<p><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a> is an ASF specific FreeRTOS driver function. It must be called before any other ASF specific FreeRTOS driver functions attempt to access the same USART port.</p>
<p>If freertos_driver_parameters-&gt;operation_mode equals USART_RS232 then <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a> will configure the USART port for standard RS232 operation. If freertos_driver_parameters-&gt;operation_mode equals any other value then <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a> will not take any action.</p>
<p>Other ASF USART functions can be called after <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a> has completed successfully.</p>
<p>The FreeRTOS ASF driver both installs and handles the USART PDC interrupts. Users do not need to concern themselves with interrupt handling, and must not install their own interrupt handler.</p>
<p>This driver is provided with an application note, and an example project that demonstrates the use of this function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>The USART peripheral being initialized. </td></tr>
    <tr><td class="paramname">uart_parameters</td><td>Structure that defines the USART bus and transfer parameters, such the baud rate and the number of data bits. <a class="el" href="structsam__usart__opt__t.xhtml" title="micro definition for LIN mode of SAMV71 ">sam_usart_opt_t</a> is a standard ASF type (it is not FreeRTOS specific). </td></tr>
    <tr><td class="paramname">freertos_driver_parameters</td><td>Defines the driver behavior. See the freertos_peripheral_options_t documentation, and the application note that accompanies the ASF specific FreeRTOS functions.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>If the initialization completes successfully then a handle that can be used with FreeRTOS USART read and write functions is returned. If the initialisation fails then NULL is returned. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__freertos__usart__peripheral__control__group_ga09bccd303f0eafa482a0ffb56d0438b8_cgraph.svg" width="442" height="1048"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__freertos__usart__peripheral__control__group_ga09bccd303f0eafa482a0ffb56d0438b8_icgraph.svg" width="336" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga9f4de374d2019244881290bf4943cb81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9f4de374d2019244881290bf4943cb81">&sect;&nbsp;</a></span>freertos_usart_serial_read_packet()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t freertos_usart_serial_read_packet </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#gaa09713e6ef0f41982d6fee5168d6fc93">freertos_usart_if</a>&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a>&#160;</td>
          <td class="paramname"><em>block_time_ticks</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initiate a completely multi-byte read operation on a USART peripheral. </p>
<p>The FreeRTOS ASF USART driver uses the PDC to transfer data from a peripheral to a circular buffer. Reception happens in the background, while the microcontroller is executing application code.* freertos_usart_read_packet() copies bytes from the DMA buffer into the buffer passed as a freertos_usart_read_packet() parameter.</p>
<p>Readers are recommended to also reference the application note and examples that accompany the FreeRTOS ASF drivers.</p>
<p>The FreeRTOS ASF driver both installs and handles the USART PDC interrupts. Users do not need to concern themselves with interrupt handling, and must not install their own interrupt handler.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>The handle to the USART port returned by the <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a> call used to initialise the port. </td></tr>
    <tr><td class="paramname">data</td><td>A pointer to the buffer into which received data is to be copied. </td></tr>
    <tr><td class="paramname">len</td><td>The number of bytes to copy. </td></tr>
    <tr><td class="paramname">block_time_ticks</td><td>Defines the maximum combined time the function will wait to get exclusive access to the peripheral and receive the requested number of bytes. Other tasks will execute during any waiting time.</td></tr>
  </table>
  </dd>
</dl>
<p>The FreeRTOS ASF USART driver is initialized using a call to <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a>. The freertos_driver_parameters.options_flags parameter passed to the initialization function defines the driver behavior. If freertos_driver_parameters.options_flags had the USE_RX_ACCESS_MUTEX bit set, then the driver will only read from the USART buffer if it has first gained exclusive access to it. block_time_ticks specifies the maximum amount of time the driver will wait to get exclusive access before aborting the read operation.</p>
<p>If the number of bytes available is less than the number requested then <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga9f4de374d2019244881290bf4943cb81" title="Initiate a completely multi-byte read operation on a USART peripheral. ">freertos_usart_serial_read_packet()</a> will wait for more bytes to become available. block_time_ticks specifies the maximum amount of time the driver will wait before returning fewer bytes than were requested.</p>
<p>block_time_ticks is specified in RTOS tick periods. To specify a block time in milliseconds, divide the milliseconds value by portTICK_RATE_MS, and pass the result in block_time_ticks. portTICK_RATE_MS is defined by FreeRTOS.</p>
<dl class="section return"><dt>Returns</dt><dd>The number of bytes that were copied into data. This will be less than the requested number of bytes if a time out occurred. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__freertos__usart__peripheral__control__group_ga9f4de374d2019244881290bf4943cb81_cgraph.svg" width="367" height="272"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__freertos__usart__peripheral__control__group_ga9f4de374d2019244881290bf4943cb81_icgraph.svg" width="342" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga4f47ec231efeccf8f159c5a14124d0ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4f47ec231efeccf8f159c5a14124d0ff">&sect;&nbsp;</a></span>freertos_usart_write_packet_async()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="status__codes_8h.xhtml#a1f12e07903f974729de22ebe2f52273e">status_code_t</a> freertos_usart_write_packet_async </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#gaa09713e6ef0f41982d6fee5168d6fc93">freertos_usart_if</a>&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a>&#160;</td>
          <td class="paramname"><em>block_time_ticks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="semphr_8h.xhtml#aa91aa1b6835a184838f9ccf138a6ad10">xSemaphoreHandle</a>&#160;</td>
          <td class="paramname"><em>notification_semaphore</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initiate a completely asynchronous multi-byte write operation on a USART peripheral. </p>
<p><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga4f47ec231efeccf8f159c5a14124d0ff" title="Initiate a completely asynchronous multi-byte write operation on a USART peripheral. ">freertos_usart_write_packet_async()</a> is an ASF specific FreeRTOS driver function. It configures the USART peripheral DMA controller (PDC) to transmit data on the USART port, then returns. <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga4f47ec231efeccf8f159c5a14124d0ff" title="Initiate a completely asynchronous multi-byte write operation on a USART peripheral. ">freertos_usart_write_packet_async()</a> does not wait for the transmission to complete before returning.</p>
<p>The FreeRTOS USART driver is initialized using a call to <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a>. The freertos_driver_parameters.options_flags parameter passed into the initialization function defines the driver behavior. <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga4f47ec231efeccf8f159c5a14124d0ff" title="Initiate a completely asynchronous multi-byte write operation on a USART peripheral. ">freertos_usart_write_packet_async()</a> can only be used if the freertos_driver_parameters.options_flags parameter passed to the initialization function had the WAIT_TX_COMPLETE bit clear.</p>
<p><a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga4f47ec231efeccf8f159c5a14124d0ff" title="Initiate a completely asynchronous multi-byte write operation on a USART peripheral. ">freertos_usart_write_packet_async()</a> is an advanced function and readers are recommended to also reference the application note and examples that accompany the FreeRTOS ASF drivers. <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga2925311f072889cff22626013ef87310" title="Initiate a multi-byte write operation on an USART peripheral. ">freertos_usart_write_packet()</a> is a version that does not exit until the PDC transfer is complete, but still allows other RTOS tasks to execute while the transmission is in progress.</p>
<p>The FreeRTOS ASF driver both installs and handles the USART PDC interrupts. Users do not need to concern themselves with interrupt handling, and must not install their own interrupt handler.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>The handle to the USART peripheral returned by the <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a> call used to initialise the peripheral. </td></tr>
    <tr><td class="paramname">data</td><td>A pointer to the data to be transmitted. </td></tr>
    <tr><td class="paramname">len</td><td>The number of bytes to transmit. </td></tr>
    <tr><td class="paramname">block_time_ticks</td><td>The FreeRTOS ASF USART driver is initialized using a call to <a class="el" href="group__freertos__usart__peripheral__control__group.xhtml#ga09bccd303f0eafa482a0ffb56d0438b8" title="Initializes the FreeRTOS ASF USART driver for the specified USART port. ">freertos_usart_serial_init()</a>. The freertos_driver_parameters.options_flags parameter passed to the initialization function defines the driver behavior. If freertos_driver_parameters.options_flags had the USE_TX_ACCESS_MUTEX bit set, then the driver will only write to the USART peripheral if it has first gained exclusive access to it. block_time_ticks specifies the maximum amount of time the driver will wait to get exclusive access before aborting the write operation. Other tasks will execute during any waiting time. block_time_ticks is specified in RTOS tick periods. To specify a block time in milliseconds, divide the milliseconds value by portTICK_RATE_MS, and pass the result in block_time_ticks. portTICK_RATE_MS is defined by FreeRTOS. </td></tr>
    <tr><td class="paramname">notification_semaphore</td><td>The RTOS task that calls the transmit function exits the transmit function as soon as the transmission starts. The data being transmitted by the PDC must not be modified until after the transmission has completed. The PDC interrupt (handled internally by the FreeRTOS ASF driver) 'gives' the semaphore when the PDC transfer completes. The notification_semaphore therefore provides a mechanism for the calling task to know when the PDC has finished accessing the data. The calling task can call standard FreeRTOS functions to block on the semaphore until the PDC interrupt occurs. Other RTOS tasks will execute while the the calling task is in the Blocked state. The semaphore must be created using the FreeRTOS <a class="el" href="semphr_8h.xhtml#ae10bffadd26fbd5bcce76bf33a83ef30">vSemaphoreCreateBinary()</a> API function before it is used as a parameter.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>ERR_INVALID_ARG is returned if an input parameter is invalid. ERR_TIMEOUT is returned if block_time_ticks passed before exclusive access to the USART peripheral could be obtained. STATUS_OK is returned if the PDC was successfully configured to perform the USART write operation. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__freertos__usart__peripheral__control__group_ga4f47ec231efeccf8f159c5a14124d0ff_cgraph.svg" width="366" height="235"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__freertos__usart__peripheral__control__group_ga4f47ec231efeccf8f159c5a14124d0ff_icgraph.svg" width="338" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
