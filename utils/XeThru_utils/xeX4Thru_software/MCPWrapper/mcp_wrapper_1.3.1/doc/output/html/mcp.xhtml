<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: XeThru Module Communication Protocol</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">XeThru Module Communication Protocol </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>PRELIMINARY</p>
<p>This document describes the serial protocol used by the XeThru sensor modules.</p>
<p>Version:</p><ul>
<li>Firmware version: 1.1.4</li>
<li>Document revision: A</li>
</ul>
<h2>Notation</h2>
<p>The following notation is used in this document:</p>
<div class="fragment"><div class="line">&lt;X&gt; = Single byte</div><div class="line">[X] = Multiple bytes</div><div class="line">[“abc”] = [0x61,0x62,0x63] = Ascii text</div><div class="line">[X(i)] = 32 bit Integer, 4 bytes</div><div class="line">[X(f)] = 32 bit Float, 4 bytes</div></div><!-- fragment --><h2>Protocol binary format</h2>
<p>The binary protocol supports two packaging modes, Normal and NoEscape. Normal packaging mode is most common, and uses flag bytes and escaping. NoEscape packaging mode does not use escaping, but rather a binary start sequence and packet length.</p>
<p>All messages are supported by both packaging modes, and they can be used side by side.</p>
<h3>Normal packaging mode</h3>
<p>Normal packaging mode is most common, and uses flag bytes and escaping. This ensures immediate resync of the protocol parsing in the event of discontinuity between the module and host. Should be considered most robust, in particular when using UART as transport layer. Requires more processing to use, and is best suited with medium to low data throughput requirement. All high-level module output messages are supported in Normal packaging mode.</p>
<p>Example: <code>&lt;Start&gt; + [Data] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<table class="doxtable">
<tr>
<th>Flag </th><th>bytes  </th></tr>
<tr>
<td><code>&lt;Start&gt;</code> </td><td>0x7D </td></tr>
<tr>
<td><code>&lt;End&gt;</code> </td><td>0x7E </td></tr>
<tr>
<td><code>&lt;Esc&gt;</code> </td><td>0x7F </td></tr>
</table>
<h4>Escaping</h4>
<p>Escaping means that if the escape byte occurs in the message, the next byte is not <code>&lt;Start&gt;</code>, <code>&lt;End&gt;</code> or <code>&lt;Esc&gt;</code>, but intended byte with same value as one of the flags.</p>
<p>Example: <code>0x7D + 0x10 + 0x7F + 0x7E + 0x04 + 0xFF + 0x7E</code></p>
<p>Here the byte 0x7E in the middle is intended, and should not be read as a &lt;Start&gt; flag. The 0x7E byte is prepended with the escape byte 0x7F. After parsing for escape bytes, the data becomes:</p>
<p><code>0x7D + 0x10 + 0x7E + 0x04 + 0xFF + 0x7E</code></p>
<h4>Checksum</h4>
<p>Calculated by XOR’ing all bytes from <code>&lt;Start&gt; + [Data]</code>. Note that the CRC is done after escape bytes is removed. This means that CRC is also calculated before adding escape bytes.</p>
<h3>NoEscape packaging mode</h3>
<p>NoEscape packaging mode does not use escaping, but rather a binary start sequence and packet length. This is a great advantage when high data throughput is required, because the added complexity of adding and removing excape bytes is removed. However, in situations where the module and host get out of sync, this method may take longer to resynchronize compared to Normal packaging mode. When using USB this is less likely a problem, but when using UART, this should be taken into consideration.</p>
<p>When using some of the high throughput module output messages, this packaging mode may be required.</p>
<p>Example: <code>[<a class="el" href="xtserial__definitions_8h.xhtml#a82b09806b70c85a28f5272f55b234a65">XTS_FLAGSEQUENCE_START_NOESCAPE(i)</a>] + [PacketLength] + &lt;RESERVED&gt; + [Data]</code></p>
<p>PacketLength is the number of bytes sent after the start sequence, i.e. 4 + 1 + number of bytes in <code>[Data]</code>.</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td><code>XTS_FLAGSEQUENCE_START_NOESCAPE</code> </td><td>0x7C7C7C7C </td></tr>
</table>
<p>Example: <code>0x7C + 0x7C + 0x7C + 0x7C + 0x03 + 0x00 + 0x00 + 0x00 + 0x00 + 0x01 + 0x02 + 0x03</code></p>
<h3>Byte order</h3>
<p>The XeThru serial protocol assumes litle-endian byte order.</p>
<h2>How it works</h2>
<p>When powering up the sensor module for the first time, it enters an idle mode. In this mode, the user can choose module behaviour by loading the desired profile. After loading the profile, it can be configured by sending profile level commands. Finally, after configuring the profile, the user can send a command to start it.</p>
<p>Next time the module is powered, it will automatically load previous configuration and resume operation.</p>
<p>If you want to change sensor module behaviour, reset the module and start again. Once the profile is running, it is not possible to change parameters or profile without performing a reset first.</p>
<p>Typical configuration workflow:</p>
<p><code>Reset module --&gt; Idle mode --&gt; Load profile --&gt; Load parameters --&gt; Run profile</code></p>
<h4>USB connection</h4>
<p>When connecting to the module directly using USB, use the following procedure to ensure proper behaviour:</p>
<ol type="1">
<li>Reset module. Wait for ACK and immediately disconnect from the virtual serial port provided by the USB.</li>
<li>Module enters Idle mode</li>
<li>Load profile</li>
<li>Load parameters</li>
<li>Run profile</li>
</ol>
<p>See sections on <code>Reset module</code> and <code>Ping</code> for more information.</p>
<h2>Module Commands</h2>
<p>Spec of module commands, from host to module.</p>
<h3>Reset module</h3>
<p>Use this command to completely reset the sensor module. After the module has responded with ACK, it will wait for 0.5 seconds before it actually starts the reset procedure. This gives the host time to disconnect from the serial connection prior to the module reset, which is necessary when the USB interface is used.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_MOD_RESET&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_MOD_RESET </td><td>0x22 </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<p>After the module resets, it sends a set of system messages to inform the host about the bootup status. At first startup, the XTS_SPRS_BOOTING message is sent. Then, after the module booting sequence is completed and the module is ready to accept further commands, the XTS_SPRS_READY command is issued.</p>
<p>Message: <code>&lt;Start&gt; + &lt;XTS_SPR_SYSTEM&gt; + [Responsecode(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPR_SYSTEM </td><td>0x30 </td></tr>
</table>
<table class="doxtable">
<tr>
<th>Responsecode </th><th>Value  </th></tr>
<tr>
<td>XTS_SPRS_BOOTING </td><td>0x10 </td></tr>
<tr>
<td>XTS_SPRS_READY </td><td>0x11 </td></tr>
</table>
<h3>Ping</h3>
<p>The ping command can be used to check connection to the module, and verify module readyness.</p>
<p>During the module boot procedure, when connecting using USB, it can be difficult to make sure you are able to receive the system status messages saying that the module is ready. In that case, the PING command comes in handy, where you can ask the module if it is ready to receive commands.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_PING&gt; + [<a class="el" href="xtserial__definitions_8h.xhtml#acecf2daf06edd4ba0d6516d9d09f9eb0">XTS_DEF_PINGVAL(i)</a>] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_PONG&gt; + [Pongval(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value </th><th>Description  </th></tr>
<tr>
<td>XTS_SPC_PING </td><td>0x01 </td><td>Ping command code </td></tr>
<tr>
<td>XTS_DEF_PINGVAL </td><td>0xeeaaeaae </td><td>Ping seed value </td></tr>
<tr>
<td>XTS_SPR_PONG </td><td>0x01 </td><td>Pong responce code </td></tr>
<tr>
<td>XTS_DEF_PONGVAL_READY </td><td>0xaaeeaeea </td><td>Module is ready </td></tr>
<tr>
<td>XTS_DEF_PONGVAL_NOTREADY </td><td>0xaeeaeeaa </td><td>Module is not ready </td></tr>
</table>
<h3>Load profile</h3>
<p>Loads the desired sensor module profile.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_MOD_LOADAPP&gt; + [AppID(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_MOD_LOADAPP </td><td>0x21 </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<p>AppID values can be found in the Profile section (XTS_ID_APP_x).</p>
<h3>Execute profile</h3>
<p>After the profile is loaded, it can be configured using 'Profile level' commands (see below). Then the profile is executed by setting the module mode.</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value </th><th>Description  </th></tr>
<tr>
<td>XTS_SM_RUN </td><td>0x01 </td><td>Sensor module in running mode. </td></tr>
<tr>
<td>XTS_SM_IDLE </td><td>0x11 </td><td>Idle mode. Sensor module ready but not active. </td></tr>
</table>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_MOD_SETMODE&gt; + &lt;XTS_SM_RUN&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_MOD_SETMODE </td><td>0x20 </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<h3>LED control</h3>
<p>Use this command to choose the behaviour of the sensor LED. There are three levels of LED operations, Off, Simple and Full. Different profiles may use the LED differently, but in general the three levels will behave like this:</p><ul>
<li>Off: Very simple LED indicator during startup and initialization. LED is always off in operating mode.</li>
<li>Simple: More indication during startup and initialization. Simple indication during operation, e.g. fixed indication or subtle blinking.</li>
<li>Full: Full indication during startup and initialization. Extensive use of blinking and colors to indicate sensor state and if possible values.</li>
</ul>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_MOD_SETLEDCONTROL&gt; + &lt;Mode&gt; + &lt;Reserved&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_MOD_SETLEDCONTROL </td><td>0x24 </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<table class="doxtable">
<tr>
<th>Mode </th><th>Value  </th></tr>
<tr>
<td>XT_UI_LED_MODE_OFF </td><td>0 </td></tr>
<tr>
<td>XT_UI_LED_MODE_SIMPLE </td><td>1 </td></tr>
<tr>
<td>XT_UI_LED_MODE_FULL </td><td>2 </td></tr>
</table>
<h2>Profile level</h2>
<h3>Generic profile commands</h3>
<h4>Set Detection Zone</h4>
<p>Set the desired detection zone.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_APPCOMMAND&gt; + &lt;XTS_SPCA_SET&gt; + [<a class="el" href="xtid_8h.xhtml#a0c33b52d81892d329bd9be596c94386b">XTS_ID_DETECTION_ZONE(i)</a>] + [Start(f)] + [End(f)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_APPCOMMAND </td><td>0x10 </td></tr>
<tr>
<td>XTS_SPCA_SET </td><td>0x10 </td></tr>
<tr>
<td>XTS_ID_DETECTION_ZONE </td><td>0x96a10a1c </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<h4>Set Sensitivity</h4>
<p>Set the desired sensitivity.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_APPCOMMAND&gt; + &lt;XTS_SPCA_SET&gt; + [<a class="el" href="xtid_8h.xhtml#aa4be334c619df069644a62497f1b4088">XTS_ID_SENSITIVITY(i)</a>] + [Sensitivity(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Sensitivity value must be between 0 (low sensitivity) and 9 (high sensitivity).</p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_APPCOMMAND </td><td>0x10 </td></tr>
<tr>
<td>XTS_SPCA_SET </td><td>0x10 </td></tr>
<tr>
<td>XTS_ID_SENSITIVITY </td><td>0x10a5112b </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<h3>Sleep profile (Sleep)</h3>
<h4>Sleep status</h4>
<p>Outputs the status of the Sleep profile, with data when available. Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#a46fd395d23fbc564b94fc964e0e2a11b">XTS_ID_SLEEP_STATUS(i)</a>] + [Counter(i)] + [StateCode(i)] + [StateData(f)] + [Distance(f)] [SignalQuality(i)] + [MovementSlow(f)] + [MovementFast(f)] &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>StateCode values:</p>
<table class="doxtable">
<tr>
<th>StateCode </th><th>Value </th><th>Description </th><th>StateData  </th></tr>
<tr>
<td>XTS_VAL_RESP_STATE_BREATHING </td><td>0 </td><td>Valid RPM detected </td><td>Current RPM value </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT </td><td>1 </td><td>Detects motion, but can not identify breath </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT_TRACKING </td><td>2 </td><td>Detects motion, possible breathing </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_NO_MOVEMENT </td><td>3 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_INITIALIZING </td><td>4 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>Reserved </td><td>5 </td><td></td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_UNKNOWN </td><td>6 </td><td>Undefined state. </td><td>0 </td></tr>
</table>
<p>Output:</p>
<ul>
<li>StateData: RPM, respirations per minute (Breathing state only).</li>
<li>Distance: Distance to where respiration is detected (Breathing state only).</li>
<li>SignalQuality: A measure of the signal quality giving respiration. Typically used to identify if the sensor is positioned correctly. Value from 0 to 10 where 0=low and 10=high. (Breathing state only).</li>
<li>MovementSlow: A measure of movement with long integration time.</li>
<li>MovementFast: A measure of movement with short integration time.</li>
</ul>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_SLEEP </td><td>0x00f17b17 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_SLEEP_STATUS </td><td>0x2375a16c </td></tr>
</table>
<h3>Respiration profile (RESP)</h3>
<h4>RESP status</h4>
<p>Outputs the status of the RESP profile, with data when available.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#a359380692b7ba2a43a03bf16ddf57270">XTS_ID_RESP_STATUS(i)</a>] + [Counter(i)] + [StateCode(i)] + [StateData(i)] + [Distance(f)] + [Movement(f)] + [SignalQuality(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>StateCode values:</p>
<table class="doxtable">
<tr>
<th>StateCode </th><th>Value </th><th>Description </th><th>StateData  </th></tr>
<tr>
<td>XTS_VAL_RESP_STATE_BREATHING </td><td>0 </td><td>Valid RPM detected </td><td>Current RPM value </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT </td><td>1 </td><td>Detects motion, but can not identify breath </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT_TRACKING </td><td>2 </td><td>Detects motion, possible breathing </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_NO_MOVEMENT </td><td>3 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_INITIALIZING </td><td>4 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>Reserved </td><td>5 </td><td></td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_UNKNOWN </td><td>6 </td><td>Undefined state. </td><td>0 </td></tr>
</table>
<p>Output:</p>
<ul>
<li>StateData: RPM, respirations per minute (Breathing state only).</li>
<li>Distance: Distance to where respiration is detected (Breathing state only).</li>
<li>Movement: Relative movement of the respiration, in mm (Breathing state only).</li>
<li>SignalQuality: A measure of the signal quality giving respiration. Typically used to identify if the sensor is positioned correctly. Value from 0 to 10 where 0=low and 10=high. (Breathing state only).</li>
</ul>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_RESP </td><td>0x1423a2d6 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_RESP_STATUS </td><td>0x2375fe26 </td></tr>
</table>
<h3>Presence (Presence2)</h3>
<p>Presence profile.</p>
<h4>Presence Single message</h4>
<p>Outputs the Presence Single message of the Presence profile, with data when available.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#aa84a12b4b5232f0e945e9ee9ee244e90">XTS_ID_PRESENCE_SINGLE(i)</a>] + [Counter(i)] + [PresenceState(i)] + [Distance(f)] + &lt;Direction&gt; + [SignalQuality(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Output:</p>
<table class="doxtable">
<tr>
<th>Parameter </th><th>Type </th><th>Description  </th></tr>
<tr>
<td>Counter </td><td>uint32_t </td><td>Frame counter as basis for sensor. </td></tr>
<tr>
<td>PresenceState </td><td>uint32_t </td><td>Sensor state output. See table above </td></tr>
<tr>
<td>Distance </td><td>float </td><td>Distance to where presence is detected. </td></tr>
<tr>
<td>Direction</td><td>uint8_t </td><td>Direction of detected object. 0=stationary, 1=towards sensor, 2=away from sensor. </td></tr>
<tr>
<td>SignalQuality </td><td>uint32_t </td><td>A measure of the signal quality giving presence detection. Typically used to identify if the sensor is positioned correctly. Value from 0 to 10 where 0=low and 10=high. (Presence state only). </td></tr>
</table>
<p>PresenceState values:</p>
<table class="doxtable">
<tr>
<th>PresenceState </th><th>Value </th><th>Description  </th></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_NO_PRESENCE </td><td>0 </td><td>No presence detected </td></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_PRESENCE </td><td>1 </td><td>Presence detected </td></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_INITIALIZING </td><td>2 </td><td>The sensor initializes after the True Presence Profile is executed </td></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_UNKNOWN </td><td>3 </td><td>The sensor is in an unknown state and requires a Profile and User Settings to be loaded </td></tr>
</table>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_PRESENCE_2 </td><td>0x014d4ab8 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_PRESENCE_SINGLE </td><td>0x723bfa1e </td></tr>
</table>
<h4>Presence MovingList message</h4>
<p>Outputs the Presence MovingList message of the Presence profile, with data regarding moving targets when available.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#abce3900d23e00657a38efde2e745a94e">XTS_ID_PRESENCE_MOVINGLIST(i)</a>] + [Counter(i)] + [PresenceState(i)] + [MovementIntervalCount(i)] + [DetectionCount(i)] + [MovementSlowItems(f)] + ... + [MovementFastItems(f)] + ... + [DetectionDistanceItems(f)] + ... + [DetectionRadarCrossSectionItems(f)] + ... + [DetectionVelocityItems(f)] + ... + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Output:</p>
<table class="doxtable">
<tr>
<th>Parameter </th><th>Type </th><th>Description  </th></tr>
<tr>
<td>Counter </td><td>uint32_t </td><td>Frame counter as basis for sensor. </td></tr>
<tr>
<td>PresenceState </td><td>uint32_t </td><td>Sensor state output. See table above. </td></tr>
<tr>
<td>MovementIntervalCount </td><td>uint32_t </td><td>MovementIntervalCount is the number of items in the MovementSlowItems and MovementFastItems list. Deterministic, depending on DetectionZone. </td></tr>
<tr>
<td>DetectionCount </td><td>uint32_t </td><td>Number of detections observed, listed in DetectionDistanceItems, DetectionRadarCrossSectionItems and DetectionVelocityItems lists. </td></tr>
<tr>
<td>MovementSlowItems </td><td>float array [0, MovementIntervalCount&gt; </td><td>List of movement slow values. </td></tr>
<tr>
<td>MovementFastItems </td><td>float array [0, MovementIntervalCount&gt; </td><td>List of movement fast values. </td></tr>
<tr>
<td>DetectionDistanceItems </td><td>float array [0, DetectionCount&gt; </td><td>List of distance to detections in meters. </td></tr>
<tr>
<td>DetectionRadarCrossSectionItems </td><td>float array [0, DetectionCount&gt; </td><td>List of radar cross sections of detections in cm2. </td></tr>
<tr>
<td>DetectionVelocityItems </td><td>float array [0, DetectionCount&gt; </td><td>List of radial velocity of detected objects in meters/second. </td></tr>
</table>
<p>PresenceState values:</p>
<table class="doxtable">
<tr>
<th>PresenceState </th><th>Value </th><th>Description  </th></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_NO_PRESENCE </td><td>0 </td><td>No presence detected </td></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_PRESENCE </td><td>1 </td><td>Presence detected </td></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_INITIALIZING </td><td>2 </td><td>The sensor initializes after the True Presence Profile is executed </td></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_UNKNOWN </td><td>3 </td><td>The sensor is in an unknown state and requires a Profile and User Settings to be loaded </td></tr>
</table>
<p><b>NOTE:</b> The first item in the <em>MovementSlowItems</em> and <em>MovementFastItems</em> lists are the global movement strength for the whole detectionzone.</p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_PRESENCE_2 </td><td>0x014d4ab8 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_PRESENCE_MOVINGLIST </td><td>0x723bfa1f </td></tr>
</table>
<h4>Presence Static message</h4>
<p>Outputs the Presence Static message of the Presence profile, with data regarding static targets when available.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [XTS_ID_PRESENCE_STATICLIST(i)] + [Counter(i)] + [PresenceState(i)] + [StaticCount(i)] + [StaticDistanceItems(f)] + ... + [StaticRadarCrossSectionItems(f)] + ... + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>PresenceState values:</p>
<table class="doxtable">
<tr>
<th>PresenceState </th><th>Value </th><th>Description  </th></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_NO_PRESENCE </td><td>0 </td><td>No presence detected </td></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_PRESENCE </td><td>1 </td><td>Presence detected </td></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_INITIALIZING </td><td>2 </td><td>The sensor initializes after the True Presence Profile is executed </td></tr>
<tr>
<td>XTS_VAL_PRESENCE_PRESENCESTATE_UNKNOWN </td><td>3 </td><td>The sensor is in an unknown state and requires a Profile and User Settings to be loaded </td></tr>
</table>
<p>Output:</p>
<ul>
<li>Counter: Frame counter as basis for sensor.</li>
<li>PresenceState: Sensor state output. See table above.</li>
<li>StaticCount: Number of static objects observed and listed in StaticDistanceItems and StaticRadarCrossSectionItems lists.</li>
<li>StaticDistanceItems: List of distance to static detections.</li>
<li>StaticRadarCrossSectionItems: List of radar cross section of static detections.</li>
</ul>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_PRESENCE_2 </td><td>0x014d4ab8 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_PRESENCE_STATICLIST </td><td>TBD </td></tr>
</table>
<h3>Respiration (Respiration2)</h3>
<h4>Respiration Legacy message</h4>
<p>Legacy message, compatible with X2M200 RESP message.</p>
<p>Outputs the legacy RESP message of the respiration profile, with data when available.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#a359380692b7ba2a43a03bf16ddf57270">XTS_ID_RESP_STATUS(i)</a>] + [Counter(i)] + [StateCode(i)] + [StateData(i)] + [Distance(f)] + [Movement(f)] + [SignalQuality(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Output:</p>
<ul>
<li>StateCode: Profile state, see table.</li>
<li>StateData: RPM, respirations per minute (Breathing state only).</li>
<li>Distance: Distance to where respiration is detected (Breathing state only).</li>
<li>Movement: Relative movement of the respiration, in mm (Breathing state only).</li>
<li>SignalQuality: A measure of the signal quality giving respiration. Typically used to identify if the sensor is positioned correctly. Value from 0 to 10 where 0=low and 10=high. (Breathing state only).</li>
</ul>
<p>StateCode values:</p>
<table class="doxtable">
<tr>
<th>StateCode </th><th>Value </th><th>Description </th><th>StateData  </th></tr>
<tr>
<td>XTS_VAL_RESP_STATE_BREATHING </td><td>0 </td><td>Valid RPM detected </td><td>Current RPM value </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT </td><td>1 </td><td>Detects motion, but can not identify breath </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT_TRACKING </td><td>2 </td><td>Detects motion, possible breathing </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_NO_MOVEMENT </td><td>3 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_INITIALIZING </td><td>4 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>Reserved </td><td>5 </td><td></td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_UNKNOWN </td><td>6 </td><td>Undefined state. </td><td>0 </td></tr>
</table>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_RESP </td><td>0x1423a2d6 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_RESP_STATUS </td><td>0x2375fe26 </td></tr>
</table>
<h4>Respiration Sleep message</h4>
<p>Compatible with X2M200 SLEEP message.</p>
<p>Outputs the Sleep message of the respiration profile, with data when available. Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#a46fd395d23fbc564b94fc964e0e2a11b">XTS_ID_SLEEP_STATUS(i)</a>] + [Counter(i)] + [StateCode(i)] + [RespirationsPerMinute(f)] + [Distance(f)] [SignalQuality(i)] + [MovementSlow(f)] + [MovementFast(f)] &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Output:</p>
<ul>
<li>StateCode: Profile state, see table.</li>
<li>RespirationsPerMinute: RPM, respirations per minute (Breathing state only).</li>
<li>Distance: Distance to where respiration is detected (Breathing state only).</li>
<li>SignalQuality: A measure of the signal quality giving respiration. Typically used to identify if the sensor is positioned correctly. Value from 0 to 10 where 0=low and 10=high. (Breathing state only).</li>
<li>MovementSlow: A measure of movement with long integration time.</li>
<li>MovementFast: A measure of movement with short integration time.</li>
</ul>
<p>StateCode values:</p>
<table class="doxtable">
<tr>
<th>StateCode </th><th>Value </th><th>Description </th><th>StateData  </th></tr>
<tr>
<td>XTS_VAL_RESP_STATE_BREATHING </td><td>0 </td><td>Valid RPM detected </td><td>Current RPM value </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT </td><td>1 </td><td>Detects motion, but can not identify breath </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT_TRACKING </td><td>2 </td><td>Detects motion, possible breathing </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_NO_MOVEMENT </td><td>3 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_INITIALIZING </td><td>4 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>Reserved </td><td>5 </td><td></td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_UNKNOWN </td><td>6 </td><td>Undefined state. </td><td>0 </td></tr>
</table>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_SLEEP </td><td>0x00f17b17 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_SLEEP_STATUS </td><td>0x2375a16c </td></tr>
</table>
<p>_**Remark**: RespirationsPerMinute was named StateData in X2M200, but is backward compatible._</p>
<h4>Respiration Movinglist message</h4>
<p>Outputs the Respiration MovingList message of the Respiration profile, with data regarding moving targets when available.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#a83545f2b0b4e5d99c01a232d93cdc330">XTS_ID_RESPIRATION_MOVINGLIST(i)</a>] + [Counter(i)] + [MovementIntervalCount(i)] + [MovementSlowItems(f)] + ... + [MovementFastItems(f)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Output:</p>
<table class="doxtable">
<tr>
<th>Parameter </th><th>Type </th><th>Description  </th></tr>
<tr>
<td>Counter </td><td>uint32_t </td><td>Frame counter as basis for sensor. </td></tr>
<tr>
<td>MovementIntervalCount </td><td>uint32_t </td><td>MovementIntervalCount is the number of items in the MovementSlowItems and MovementFastItems list. Deterministic, depending on DetectionZone. </td></tr>
<tr>
<td>MovementSlowItems </td><td>float array [0, MovementIntervalCount&gt; </td><td>List of movement slow values. </td></tr>
<tr>
<td>MovementFastItems </td><td>float array [0, MovementIntervalCount&gt; </td><td>List of movement fast values. </td></tr>
</table>
<p>** NOTE ** The first item in the <em>MovementSlowItems</em> and <em>MovementFastItems</em> lists are the global movement strength for the whole detectionzone.</p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_PRESENCE_2 </td><td>0x014d4ab8 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_RESPIRATION_MOVINGLIST </td><td>0x610a3b00 </td></tr>
</table>
<h4>Respiration Detectionlist message</h4>
<p>Outputs the Presence Detectionlist message of the Presence profile, with data regarding moving targets when available.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#a40201e5f5fe9a66ad7ee494ccd470f5b">XTS_ID_RESPIRATION_DETECTIONLIST(i)</a>] + [Counter(i)] + [DetectionCount(i)] + [DetectionDistanceItems(f)] + ... + [DetectionRadarCrossSectionItems(f)] + ... + [DetectionVelocityItems(f)] + ... + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Output:</p>
<table class="doxtable">
<tr>
<th>Parameter </th><th>Type </th><th>Description  </th></tr>
<tr>
<td>Counter </td><td>uint32_t </td><td>Frame counter as basis for sensor. </td></tr>
<tr>
<td>DetectionCount </td><td>uint32_t </td><td>Number of detections observed, listed in DetectionDistanceItems, DetectionRadarCrossSectionItems and DetectionVelocityItems lists. </td></tr>
<tr>
<td>DetectionDistanceItems </td><td>float array [0, DetectionCount&gt; </td><td>List of distance to detections in meters. </td></tr>
<tr>
<td>DetectionRadarCrossSectionItems </td><td>float array [0, DetectionCount&gt; </td><td>List of radar cross sections of detections in cm2. </td></tr>
<tr>
<td>DetectionVelocityItems </td><td>float array [0, DetectionCount&gt; </td><td>List of radial velocity of detected objects in meters/second. </td></tr>
</table>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_PRESENCE_2 </td><td>0x014d4ab8 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_RESPIRATION_DETECTIONLIST </td><td>0x610a3b02 </td></tr>
</table>
</div></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
