<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: examples/atmel_samg55/src/ASF/sam/drivers/usart/usart.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="dir_0e96b936377161858012b6f31c3bd790.xhtml">atmel_samg55</a></li><li class="navelem"><a class="el" href="dir_0ae219bfaa679f3dbaaacda5fb614d9c.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_67951177d7f5e66661a526635115739c.xhtml">ASF</a></li><li class="navelem"><a class="el" href="dir_48be2503ae6ae6de0698f11fb632640c.xhtml">sam</a></li><li class="navelem"><a class="el" href="dir_e6d561ac73579e0cda4a92437875255b.xhtml">drivers</a></li><li class="navelem"><a class="el" href="dir_81baf62f2db4b23720ab7ecc8517864e.xhtml">usart</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">usart.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="drivers_2usart_2usart_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * Support and FAQ: visit &lt;a href=&quot;http://www.atmel.com/design-support/&quot;&gt;Atmel Support&lt;/a&gt;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#ifndef USART_H_INCLUDED</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#define USART_H_INCLUDED</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="compiler_8h.xhtml">compiler.h</a>&quot;</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="group__group__sam__drivers__usart.xhtml#ga49e8927a636f45641d6231ac63b9e598">   74</a></span>&#160;<span class="preprocessor">#define SPI_CPHA    (1 &lt;&lt; 0)</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="group__group__sam__drivers__usart.xhtml#gad8e335b1f808bd7408d2aef2377adcb1">   77</a></span>&#160;<span class="preprocessor">#define SPI_CPOL    (1 &lt;&lt; 1)</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="group__group__sam__drivers__usart.xhtml#ga1ec07ad94d5f6276c1c0b41d0550fe52">   80</a></span>&#160;<span class="preprocessor">#define SPI_MODE_0  0</span></div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="group__group__sam__drivers__usart.xhtml#gaf2af9f45539491c9753960535dc20fde">   81</a></span>&#160;<span class="preprocessor">#define SPI_MODE_1  (SPI_CPHA)</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="group__group__sam__drivers__usart.xhtml#ga8fa3edd8616f8803490c93f09243a612">   82</a></span>&#160;<span class="preprocessor">#define SPI_MODE_2  (SPI_CPOL)</span></div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="group__group__sam__drivers__usart.xhtml#ga6a091da9f9011457fe28ab25f64c858d">   83</a></span>&#160;<span class="preprocessor">#define SPI_MODE_3  (SPI_CPOL | SPI_CPHA)</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">#if (SAMV71 || SAMV70 || SAME70 || SAMS70)</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">#define US_MR_USART_MODE_LIN_MASTER  0x0A</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#define US_MR_USART_MODE_LIN_SLAVE   0x0B</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">/* Input parameters when initializing RS232 and similar modes. */</span></div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="structsam__usart__opt__t.xhtml">   91</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">/* Set baud rate of the USART (unused in slave modes). */</span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="structsam__usart__opt__t.xhtml#a48bb096d6aa0c6f397239a7970b0aa3a">   93</a></span>&#160;    uint32_t <a class="code" href="structsam__usart__opt__t.xhtml#a48bb096d6aa0c6f397239a7970b0aa3a">baudrate</a>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">     * Number of bits, which should be one of the following: US_MR_CHRL_5_BIT,</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">     * US_MR_CHRL_6_BIT, US_MR_CHRL_7_BIT, US_MR_CHRL_8_BIT or</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">     * US_MR_MODE9.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="structsam__usart__opt__t.xhtml#a7d8ae828c050417bedcd418d9b593950">  100</a></span>&#160;    uint32_t <a class="code" href="structsam__usart__opt__t.xhtml#a7d8ae828c050417bedcd418d9b593950">char_length</a>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">     * Parity type, which should be one of the following: US_MR_PAR_EVEN,</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">     * US_MR_PAR_ODD, US_MR_PAR_SPACE, US_MR_PAR_MARK, US_MR_PAR_NO</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     * or US_MR_PAR_MULTIDROP.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="structsam__usart__opt__t.xhtml#ade787fb1f3396157673a7021c4dcf56e">  107</a></span>&#160;    uint32_t <a class="code" href="structsam__usart__opt__t.xhtml#ade787fb1f3396157673a7021c4dcf56e">parity_type</a>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     * Number of stop bits between two characters: US_MR_NBSTOP_1_BIT,</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     * US_MR_NBSTOP_1_5_BIT, US_MR_NBSTOP_2_BIT.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     * \note US_MR_NBSTOP_1_5_BIT is supported in asynchronous modes only.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="structsam__usart__opt__t.xhtml#ac5848a65163c97627b8412f60fded824">  114</a></span>&#160;    uint32_t <a class="code" href="structsam__usart__opt__t.xhtml#ac5848a65163c97627b8412f60fded824">stop_bits</a>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">     * Run the channel in test mode, which should be one of following:</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">     * US_MR_CHMODE_NORMAL, US_MR_CHMODE_AUTOMATIC,</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">     * US_MR_CHMODE_LOCAL_LOOPBACK, US_MR_CHMODE_REMOTE_LOOPBACK.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="structsam__usart__opt__t.xhtml#ac49607b710079748558fdb875e456e99">  121</a></span>&#160;    uint32_t <a class="code" href="structsam__usart__opt__t.xhtml#ac49607b710079748558fdb875e456e99">channel_mode</a>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">/* Filter of IrDA mode, useless in other modes. */</span></div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="structsam__usart__opt__t.xhtml#aaeff3c1969cc0440097f9eeb9b7f8e46">  124</a></span>&#160;    uint32_t <a class="code" href="structsam__usart__opt__t.xhtml#aaeff3c1969cc0440097f9eeb9b7f8e46">irda_filter</a>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;} <a class="code" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">/* Input parameters when initializing ISO7816 mode. */</span></div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="structusart__iso7816__opt__t.xhtml">  128</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">/* Set the frequency of the ISO7816 clock. */</span></div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="structusart__iso7816__opt__t.xhtml#a75fa8e6e3536f239464e58bc9f3ee68f">  130</a></span>&#160;    uint32_t <a class="code" href="structusart__iso7816__opt__t.xhtml#a75fa8e6e3536f239464e58bc9f3ee68f">iso7816_hz</a>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     * The number of ISO7816 clock ticks in every bit period (1 to 2047,</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     * 0 = disable clock). Baudrate rate = iso7816_hz / fidi_ratio.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="structusart__iso7816__opt__t.xhtml#af3621d045c0a6b0a7645a95d779b22d7">  136</a></span>&#160;    uint32_t <a class="code" href="structusart__iso7816__opt__t.xhtml#af3621d045c0a6b0a7645a95d779b22d7">fidi_ratio</a>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     * How to calculate the parity bit: US_MR_PAR_EVEN for normal mode or</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     * US_MR_PAR_ODD for inverse mode.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="structusart__iso7816__opt__t.xhtml#af07d270bcacb556a5ea8d08d70671d8e">  142</a></span>&#160;    uint32_t <a class="code" href="structusart__iso7816__opt__t.xhtml#af07d270bcacb556a5ea8d08d70671d8e">parity_type</a>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     * Inhibit Non Acknowledge:</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     *   - 0: the NACK is generated;</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     *   - 1: the NACK is not generated.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">     * \note This bit will be used only in ISO7816 mode, protocol T = 0</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">     * receiver.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="structusart__iso7816__opt__t.xhtml#ae517c6ab96cc59a7a405bafb185cf328">  152</a></span>&#160;    uint32_t <a class="code" href="structusart__iso7816__opt__t.xhtml#ae517c6ab96cc59a7a405bafb185cf328">inhibit_nack</a>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * Disable successive NACKs.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     *  - 0: NACK is sent on the ISO line as soon as a parity error occurs</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     * in the received character. Successive parity errors are counted up to</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">     * the value in the max_iterations field. These parity errors generate</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">     * a NACK on the ISO line. As soon as this value is reached, no additional</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">     * NACK is sent on the ISO line. The ITERATION flag is asserted.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="structusart__iso7816__opt__t.xhtml#af5cea7c8c53aa409fd166e7d3c83ed85">  162</a></span>&#160;    uint32_t <a class="code" href="structusart__iso7816__opt__t.xhtml#af5cea7c8c53aa409fd166e7d3c83ed85">dis_suc_nack</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">/* Max number of repetitions (0 to 7). */</span></div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="structusart__iso7816__opt__t.xhtml#a04e4ea16baa0ed4792f7b97007915f04">  165</a></span>&#160;    uint32_t <a class="code" href="structusart__iso7816__opt__t.xhtml#a04e4ea16baa0ed4792f7b97007915f04">max_iterations</a>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">     * Bit order in transmitted characters:</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     *   - 0: LSB first;</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     *   - 1: MSB first.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="structusart__iso7816__opt__t.xhtml#a661af25e490185b850538c69f030f0b7">  172</a></span>&#160;    uint32_t <a class="code" href="structusart__iso7816__opt__t.xhtml#a661af25e490185b850538c69f030f0b7">bit_order</a>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     * Which protocol is used:</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">     *   - 0: T = 0;</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">     *   - 1: T = 1.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="structusart__iso7816__opt__t.xhtml#a41ade4dcdac61630473c07cdf2655932">  179</a></span>&#160;    uint32_t <a class="code" href="structusart__iso7816__opt__t.xhtml#a41ade4dcdac61630473c07cdf2655932">protocol_type</a>;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;} <a class="code" href="structusart__iso7816__opt__t.xhtml">usart_iso7816_opt_t</a>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">/* Input parameters when initializing SPI mode. */</span></div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="structusart__spi__opt__t.xhtml">  183</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">/* Set the frequency of the SPI clock (unused in slave mode). */</span></div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="structusart__spi__opt__t.xhtml#acf5809b8e89a0c2bafc9fd44e8115f7b">  185</a></span>&#160;    uint32_t <a class="code" href="structusart__spi__opt__t.xhtml#acf5809b8e89a0c2bafc9fd44e8115f7b">baudrate</a>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">     * Number of bits, which should be one of the following: US_MR_CHRL_5_BIT,</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">     * US_MR_CHRL_6_BIT, US_MR_CHRL_7_BIT, US_MR_CHRL_8_BIT or</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">     * US_MR_MODE9.</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="structusart__spi__opt__t.xhtml#abe9dfa96a961b7c7beb80ccf4812f93c">  192</a></span>&#160;    uint32_t <a class="code" href="structusart__spi__opt__t.xhtml#abe9dfa96a961b7c7beb80ccf4812f93c">char_length</a>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">     * Which SPI mode to use, which should be one of the following:</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">     * SPI_MODE_0, SPI_MODE_1, SPI_MODE_2, SPI_MODE_3.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="structusart__spi__opt__t.xhtml#a868ead9c91f2e99ac07c407dd91003a5">  198</a></span>&#160;    uint32_t <a class="code" href="structusart__spi__opt__t.xhtml#a868ead9c91f2e99ac07c407dd91003a5">spi_mode</a>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">     * Run the channel in test mode, which should be one of following:</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">     * US_MR_CHMODE_NORMAL, US_MR_CHMODE_AUTOMATIC,</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">     * US_MR_CHMODE_LOCAL_LOOPBACK, US_MR_CHMODE_REMOTE_LOOPBACK.</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="structusart__spi__opt__t.xhtml#a360bd76e70bfa6e0ba714e5492070fb6">  205</a></span>&#160;    uint32_t <a class="code" href="structusart__spi__opt__t.xhtml#a360bd76e70bfa6e0ba714e5492070fb6">channel_mode</a>;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;} <a class="code" href="structusart__spi__opt__t.xhtml">usart_spi_opt_t</a>;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga6cb84f0297ddca62d4077f616efa5c5b">usart_reset</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gaafe097c01c082b270c1057722d524f5b">usart_set_async_baudrate</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        uint32_t baudrate, uint32_t ul_mck);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gaeef2121bcab41f9850e58c59fdc34d10">usart_init_rs232</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keyword">const</span> <a class="code" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga8ea87f1c2b00747e7a5de5b36aa0cc71">usart_init_hw_handshaking</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keyword">const</span> <a class="code" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;uint32_t usart_init_modem(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keyword">const</span> <a class="code" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga6bd028774207fe19e370e77f0fdf820f">usart_init_sync_master</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keyword">const</span> <a class="code" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gad7379a739d799d82f34da103d32757c1">usart_init_sync_slave</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keyword">const</span> <a class="code" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga7265d736a562d24e880c0c5e10c41a48">usart_init_rs485</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keyword">const</span> <a class="code" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor">#if (!SAMG55 &amp;&amp; !SAMV71 &amp;&amp; !SAMV70 &amp;&amp; !SAME70 &amp;&amp; !SAMS70)</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga952a5fffe9547e48e5d1c74230786d78">usart_init_irda</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keyword">const</span> <a class="code" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="preprocessor">#if (!SAMV71 &amp;&amp; !SAMV70 &amp;&amp; !SAME70 &amp;&amp; !SAMS70)</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga32c4c057c3d5961bb3d6977b8e72483b">usart_init_iso7816</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keyword">const</span> <a class="code" href="structusart__iso7816__opt__t.xhtml">usart_iso7816_opt_t</a> *p_usart_opt, uint32_t ul_mck);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga7c516011cb7f9a4d59d173a8be206d19">usart_reset_iterations</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gad4bb30861c72801f19bb8fb0ac19362e">usart_reset_nack</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gab39cc4289bde563c4d58ecd22765319c">usart_is_rx_buf_end</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga3e7df5c46585d438d8886b4461d15d62">usart_is_tx_buf_end</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga212169bdb555142fa879a1f3ed7b0fd7">usart_is_rx_buf_full</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga911274fe177ba10bbd156ac1a212ae23">usart_is_tx_buf_empty</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;uint8_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gaddb54159a61d5b777ffcf99cd3914ca1">usart_get_error_number</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gaf3725cfa2de4be9eceab8b0c36a2080a">usart_init_spi_master</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">const</span> <a class="code" href="structusart__spi__opt__t.xhtml">usart_spi_opt_t</a> *p_usart_opt, uint32_t ul_mck);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gaf42f05f73f1095fc7a2b28ebbf97bf4b">usart_init_spi_slave</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keyword">const</span> <a class="code" href="structusart__spi__opt__t.xhtml">usart_spi_opt_t</a> *p_usart_opt);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">#if (SAM3XA || SAM4L || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;uint32_t usart_init_lin_master(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_baudrate,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        uint32_t ul_mck);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;uint32_t usart_init_lin_slave(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_baudrate,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        uint32_t ul_mck);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keywordtype">void</span> usart_lin_abort_tx(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keywordtype">void</span> usart_lin_send_wakeup_signal(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keywordtype">void</span> usart_lin_set_node_action(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_action);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keywordtype">void</span> usart_lin_disable_parity(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keywordtype">void</span> usart_lin_enable_parity(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keywordtype">void</span> usart_lin_disable_checksum(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="keywordtype">void</span> usart_lin_enable_checksum(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keywordtype">void</span> usart_lin_set_checksum_type(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_type);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keywordtype">void</span> usart_lin_set_data_len_mode(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_mode);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keywordtype">void</span> usart_lin_disable_frame_slot(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keywordtype">void</span> usart_lin_enable_frame_slot(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="keywordtype">void</span> usart_lin_set_wakeup_signal_type(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_type);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keywordtype">void</span> usart_lin_set_response_data_len(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_len);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keywordtype">void</span> usart_lin_disable_pdc_mode(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keywordtype">void</span> usart_lin_enable_pdc_mode(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="keywordtype">void</span> usart_lin_set_tx_identifier(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_id);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;uint8_t usart_lin_read_identifier(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;uint8_t usart_lin_get_data_length(<a class="code" href="struct_usart.xhtml">Usart</a> *usart);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor">#if (SAMV71 || SAMV70 || SAME70 || SAMS70)</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;uint8_t usart_lin_identifier_send_complete(<a class="code" href="struct_usart.xhtml">Usart</a> *usart);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;uint8_t usart_lin_identifier_reception_complete(<a class="code" href="struct_usart.xhtml">Usart</a> *usart);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;uint8_t usart_lin_tx_complete(<a class="code" href="struct_usart.xhtml">Usart</a> *usart);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;uint32_t usart_init_lon(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_baudrate, uint32_t ul_mck);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_comm_type(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_type);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keywordtype">void</span> usart_lon_disable_coll_detection(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="keywordtype">void</span> usart_lon_enable_coll_detection(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_tcol(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_type);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_cdtail(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_type);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_dmam(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_type);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_beta1_tx_len(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_len);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_beta1_rx_len(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_len);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_priority(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_psnb, uint8_t uc_nps);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_tx_idt(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_time);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_rx_idt(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_time);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_pre_len(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_len);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_data_len(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_len);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keywordtype">void</span>  usart_lon_set_l2hdr(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_bli, uint8_t uc_altp, uint8_t uc_pb);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;uint32_t usart_lon_is_tx_end(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;uint32_t usart_lon_is_rx_end(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga1c3a4036f8b9b21f833a641b07b84f6c">usart_enable_tx</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gaf12c50dd99d9b0e3e3719e840e05aaf6">usart_disable_tx</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga123b84a0d5be1cbf1a3c5bac4af3d27d">usart_reset_tx</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga75f8c53d5b4c51d302970f94ec296115">usart_set_tx_timeguard</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t timeguard);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga7fd617322d666621fee15501ae0de7c7">usart_enable_rx</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gad9c333a3706f3bfad6f9b74f30495879">usart_disable_rx</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga86ad3a57b19fb497ef2271d6dc87c359">usart_reset_rx</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga6c93002d564e25a12975a7f0c6c1564b">usart_set_rx_timeout</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t timeout);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga33c4b214e790bf6b04c8867dd66c3336">usart_enable_interrupt</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_sources);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gaa3a3c3eb673f70359570302dcf1a5b6a">usart_disable_interrupt</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_sources);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gaf2a63720ac25579075bf9191c601c7ea">usart_get_interrupt_mask</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gadedd154647a6401b9feab44a0620fea1">usart_get_status</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga4e19efeb524c1fba4b962e72283dcc11">usart_reset_status</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gac81e3129ca9032294961167a86a1da5f">usart_start_tx_break</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gaf581748a222b09334b4e7b963eaccc0c">usart_stop_tx_break</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga21b61657bfa8bc395dd4c5f05f531788">usart_start_rx_timeout</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga55533226a26ce5279457601bc995b9c5">usart_send_address</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_addr);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga5d7a3fc36901ee31049c661066af6553">usart_restart_rx_timeout</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="keywordtype">void</span> usart_drive_DTR_pin_low(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keywordtype">void</span> usart_drive_DTR_pin_high(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga790d8d33caa3f4d925f1ec143d6305ae">usart_drive_RTS_pin_low</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#ga930438dce6fbe82394c706b775cf2f0a">usart_drive_RTS_pin_high</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gaf29b2e7c010fb15a137cc647742dd7f7">usart_spi_force_chip_select</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gab5ecc0dc1577f065fda6afaaaa069a57">usart_spi_release_chip_select</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gac0b33a2b7a3115c29dd85565984f46b5">usart_is_tx_ready</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gac30ba4e208ac3928d05aa06ef22ac266">usart_is_tx_empty</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga9f88f9b3e78b92b53016420c3594fcf6">usart_is_rx_ready</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gaa9593727b910df8c0e9c359c5d7004ec">usart_write</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t c);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gace816375e1905a329cffd46e3ffd89b1">usart_putchar</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t c);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gafdee4a457c8cefe46e45ec63902a86c7">usart_write_line</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keywordtype">string</span>);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#gae2776f27eb9e4219bbc6245f41662fa9">usart_read</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t *c);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga09984d6dcb9a64117a0a8c2e5c32a8ec">usart_getchar</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t *c);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="preprocessor">#if (SAM3XA || SAM3U)</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;uint32_t *usart_get_tx_access(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;uint32_t *usart_get_rx_access(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="preprocessor">#if (!SAM4L &amp;&amp; !SAMV71 &amp;&amp; !SAMV70 &amp;&amp; !SAME70 &amp;&amp; !SAMS70)</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<a class="code" href="struct_pdc.xhtml">Pdc</a> *<a class="code" href="group__group__sam__drivers__usart.xhtml#gae309dfc5ea5e993434ea031e2ac616c4">usart_get_pdc_base</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gaa74733b3e78a560568cc22708ac0d1be">usart_enable_writeprotect</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__group__sam__drivers__usart.xhtml#gabdf1b8bf1b4da95d3a314c4916799e88">usart_disable_writeprotect</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;uint32_t <a class="code" href="group__group__sam__drivers__usart.xhtml#ga548d63d04cff612d9b9b628d1fdd98cb">usart_get_writeprotect_status</a>(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="preprocessor">#if (SAM3S || SAM4S || SAM3U || SAM3XA || SAM4L || SAM4E || SAM4C || SAM4CP || SAM4CM || SAMV70 || SAMV71 || SAMS70 || SAME70)</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keywordtype">void</span> usart_man_set_tx_pre_len(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_len);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keywordtype">void</span> usart_man_set_tx_pre_pattern(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_pattern);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keywordtype">void</span> usart_man_set_tx_polarity(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_polarity);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="keywordtype">void</span> usart_man_set_rx_pre_len(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_len);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="keywordtype">void</span> usart_man_set_rx_pre_pattern(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_pattern);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keywordtype">void</span> usart_man_set_rx_polarity(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart, uint8_t uc_polarity);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="keywordtype">void</span> usart_man_enable_drift_compensation(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="keywordtype">void</span> usart_man_disable_drift_compensation(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="preprocessor">#if SAM4L</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;uint32_t usart_get_version(<a class="code" href="struct_usart.xhtml">Usart</a> *p_usart);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="preprocessor">#if SAMG55</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="keywordtype">void</span> usart_set_sleepwalking(<a class="code" href="struct_usart.xhtml">Usart</a> *p_uart, uint8_t ul_low_value,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordtype">bool</span> cmpmode, <span class="keywordtype">bool</span> cmppar, uint8_t ul_high_value);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* USART_H_INCLUDED */</span><span class="preprocessor"></span></div><div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga1c3a4036f8b9b21f833a641b07b84f6c"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga1c3a4036f8b9b21f833a641b07b84f6c">usart_enable_tx</a></div><div class="ttdeci">void usart_enable_tx(Usart *p_usart)</div><div class="ttdoc">Enable USART transmitter. </div><div class="ttdef"><b>Definition:</b> usart.c:1392</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga930438dce6fbe82394c706b775cf2f0a"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga930438dce6fbe82394c706b775cf2f0a">usart_drive_RTS_pin_high</a></div><div class="ttdeci">void usart_drive_RTS_pin_high(Usart *p_usart)</div><div class="ttdoc">Drive the pin RTS to 1. </div><div class="ttdef"><b>Definition:</b> usart.c:1632</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga7c516011cb7f9a4d59d173a8be206d19"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga7c516011cb7f9a4d59d173a8be206d19">usart_reset_iterations</a></div><div class="ttdeci">void usart_reset_iterations(Usart *p_usart)</div><div class="ttdoc">Reset the ITERATION in US_CSR when the ISO7816 mode is enabled. </div><div class="ttdef"><b>Definition:</b> usart.c:633</div></div>
<div class="ttc" id="struct_usart_xhtml"><div class="ttname"><a href="struct_usart.xhtml">Usart</a></div><div class="ttdoc">Usart hardware registers. </div><div class="ttdef"><b>Definition:</b> usart.h:56</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gac81e3129ca9032294961167a86a1da5f"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gac81e3129ca9032294961167a86a1da5f">usart_start_tx_break</a></div><div class="ttdeci">void usart_start_tx_break(Usart *p_usart)</div><div class="ttdoc">Start transmission of a break. </div><div class="ttdef"><b>Definition:</b> usart.c:1532</div></div>
<div class="ttc" id="structusart__spi__opt__t_xhtml_abe9dfa96a961b7c7beb80ccf4812f93c"><div class="ttname"><a href="structusart__spi__opt__t.xhtml#abe9dfa96a961b7c7beb80ccf4812f93c">usart_spi_opt_t::char_length</a></div><div class="ttdeci">uint32_t char_length</div><div class="ttdef"><b>Definition:</b> usart.h:192</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaddb54159a61d5b777ffcf99cd3914ca1"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaddb54159a61d5b777ffcf99cd3914ca1">usart_get_error_number</a></div><div class="ttdeci">uint8_t usart_get_error_number(Usart *p_usart)</div><div class="ttdoc">Get the total number of errors that occur during an ISO7816 transfer. </div><div class="ttdef"><b>Definition:</b> usart.c:707</div></div>
<div class="ttc" id="structusart__iso7816__opt__t_xhtml_a75fa8e6e3536f239464e58bc9f3ee68f"><div class="ttname"><a href="structusart__iso7816__opt__t.xhtml#a75fa8e6e3536f239464e58bc9f3ee68f">usart_iso7816_opt_t::iso7816_hz</a></div><div class="ttdeci">uint32_t iso7816_hz</div><div class="ttdef"><b>Definition:</b> usart.h:130</div></div>
<div class="ttc" id="structusart__iso7816__opt__t_xhtml_af07d270bcacb556a5ea8d08d70671d8e"><div class="ttname"><a href="structusart__iso7816__opt__t.xhtml#af07d270bcacb556a5ea8d08d70671d8e">usart_iso7816_opt_t::parity_type</a></div><div class="ttdeci">uint32_t parity_type</div><div class="ttdef"><b>Definition:</b> usart.h:142</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaf3725cfa2de4be9eceab8b0c36a2080a"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaf3725cfa2de4be9eceab8b0c36a2080a">usart_init_spi_master</a></div><div class="ttdeci">uint32_t usart_init_spi_master(Usart *p_usart, const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)</div><div class="ttdoc">Configure USART to work in SPI mode and act as a master. </div><div class="ttdef"><b>Definition:</b> usart.c:726</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaf12c50dd99d9b0e3e3719e840e05aaf6"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaf12c50dd99d9b0e3e3719e840e05aaf6">usart_disable_tx</a></div><div class="ttdeci">void usart_disable_tx(Usart *p_usart)</div><div class="ttdoc">Disable USART transmitter. </div><div class="ttdef"><b>Definition:</b> usart.c:1402</div></div>
<div class="ttc" id="structusart__iso7816__opt__t_xhtml_a41ade4dcdac61630473c07cdf2655932"><div class="ttname"><a href="structusart__iso7816__opt__t.xhtml#a41ade4dcdac61630473c07cdf2655932">usart_iso7816_opt_t::protocol_type</a></div><div class="ttdeci">uint32_t protocol_type</div><div class="ttdef"><b>Definition:</b> usart.h:179</div></div>
<div class="ttc" id="structusart__iso7816__opt__t_xhtml_a04e4ea16baa0ed4792f7b97007915f04"><div class="ttname"><a href="structusart__iso7816__opt__t.xhtml#a04e4ea16baa0ed4792f7b97007915f04">usart_iso7816_opt_t::max_iterations</a></div><div class="ttdeci">uint32_t max_iterations</div><div class="ttdef"><b>Definition:</b> usart.h:165</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gae309dfc5ea5e993434ea031e2ac616c4"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gae309dfc5ea5e993434ea031e2ac616c4">usart_get_pdc_base</a></div><div class="ttdeci">Pdc * usart_get_pdc_base(Usart *p_usart)</div><div class="ttdoc">Get USART PDC base address. </div><div class="ttdef"><b>Definition:</b> usart.c:1835</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gae2776f27eb9e4219bbc6245f41662fa9"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gae2776f27eb9e4219bbc6245f41662fa9">usart_read</a></div><div class="ttdeci">uint32_t usart_read(Usart *p_usart, uint32_t *c)</div><div class="ttdoc">Read from USART Receive Holding Register. </div><div class="ttdef"><b>Definition:</b> usart.c:1767</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga952a5fffe9547e48e5d1c74230786d78"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga952a5fffe9547e48e5d1c74230786d78">usart_init_irda</a></div><div class="ttdeci">uint32_t usart_init_irda(Usart *p_usart, const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)</div><div class="ttdoc">Configure USART to work in IrDA mode. </div><div class="ttdef"><b>Definition:</b> usart.c:500</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga32c4c057c3d5961bb3d6977b8e72483b"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga32c4c057c3d5961bb3d6977b8e72483b">usart_init_iso7816</a></div><div class="ttdeci">uint32_t usart_init_iso7816(Usart *p_usart, const usart_iso7816_opt_t *p_usart_opt, uint32_t ul_mck)</div><div class="ttdoc">Configure USART to work in ISO7816 mode. </div><div class="ttdef"><b>Definition:</b> usart.c:567</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga4e19efeb524c1fba4b962e72283dcc11"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga4e19efeb524c1fba4b962e72283dcc11">usart_reset_status</a></div><div class="ttdeci">void usart_reset_status(Usart *p_usart)</div><div class="ttdoc">Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR). </div><div class="ttdef"><b>Definition:</b> usart.c:1522</div></div>
<div class="ttc" id="structusart__spi__opt__t_xhtml_a868ead9c91f2e99ac07c407dd91003a5"><div class="ttname"><a href="structusart__spi__opt__t.xhtml#a868ead9c91f2e99ac07c407dd91003a5">usart_spi_opt_t::spi_mode</a></div><div class="ttdeci">uint32_t spi_mode</div><div class="ttdef"><b>Definition:</b> usart.h:198</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga3e7df5c46585d438d8886b4461d15d62"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga3e7df5c46585d438d8886b4461d15d62">usart_is_tx_buf_end</a></div><div class="ttdeci">uint32_t usart_is_tx_buf_end(Usart *p_usart)</div><div class="ttdoc">Check if one transmit buffer is empty. </div><div class="ttdef"><b>Definition:</b> usart.c:669</div></div>
<div class="ttc" id="structusart__iso7816__opt__t_xhtml_af5cea7c8c53aa409fd166e7d3c83ed85"><div class="ttname"><a href="structusart__iso7816__opt__t.xhtml#af5cea7c8c53aa409fd166e7d3c83ed85">usart_iso7816_opt_t::dis_suc_nack</a></div><div class="ttdeci">uint32_t dis_suc_nack</div><div class="ttdef"><b>Definition:</b> usart.h:162</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga6bd028774207fe19e370e77f0fdf820f"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga6bd028774207fe19e370e77f0fdf820f">usart_init_sync_master</a></div><div class="ttdeci">uint32_t usart_init_sync_master(Usart *p_usart, const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)</div><div class="ttdoc">Configure USART to work in SYNC mode and act as a master. </div><div class="ttdef"><b>Definition:</b> usart.c:396</div></div>
<div class="ttc" id="structusart__iso7816__opt__t_xhtml"><div class="ttname"><a href="structusart__iso7816__opt__t.xhtml">usart_iso7816_opt_t</a></div><div class="ttdef"><b>Definition:</b> usart.h:128</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga790d8d33caa3f4d925f1ec143d6305ae"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga790d8d33caa3f4d925f1ec143d6305ae">usart_drive_RTS_pin_low</a></div><div class="ttdeci">void usart_drive_RTS_pin_low(Usart *p_usart)</div><div class="ttdoc">Drive the pin RTS to 0. </div><div class="ttdef"><b>Definition:</b> usart.c:1622</div></div>
<div class="ttc" id="structsam__usart__opt__t_xhtml_ac5848a65163c97627b8412f60fded824"><div class="ttname"><a href="structsam__usart__opt__t.xhtml#ac5848a65163c97627b8412f60fded824">sam_usart_opt_t::stop_bits</a></div><div class="ttdeci">uint32_t stop_bits</div><div class="ttdef"><b>Definition:</b> usart.h:114</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga21b61657bfa8bc395dd4c5f05f531788"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga21b61657bfa8bc395dd4c5f05f531788">usart_start_rx_timeout</a></div><div class="ttdeci">void usart_start_rx_timeout(Usart *p_usart)</div><div class="ttdoc">Start waiting for a character before clocking the timeout count. </div><div class="ttdef"><b>Definition:</b> usart.c:1553</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga212169bdb555142fa879a1f3ed7b0fd7"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga212169bdb555142fa879a1f3ed7b0fd7">usart_is_rx_buf_full</a></div><div class="ttdeci">uint32_t usart_is_rx_buf_full(Usart *p_usart)</div><div class="ttdoc">Check if both receive buffers are full. </div><div class="ttdef"><b>Definition:</b> usart.c:682</div></div>
<div class="ttc" id="compiler_8h_xhtml"><div class="ttname"><a href="compiler_8h.xhtml">compiler.h</a></div><div class="ttdoc">Commonly used includes, types and macros. </div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gad9c333a3706f3bfad6f9b74f30495879"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gad9c333a3706f3bfad6f9b74f30495879">usart_disable_rx</a></div><div class="ttdeci">void usart_disable_rx(Usart *p_usart)</div><div class="ttdoc">Disable USART receiver. </div><div class="ttdef"><b>Definition:</b> usart.c:1444</div></div>
<div class="ttc" id="structusart__spi__opt__t_xhtml"><div class="ttname"><a href="structusart__spi__opt__t.xhtml">usart_spi_opt_t</a></div><div class="ttdef"><b>Definition:</b> usart.h:183</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaeef2121bcab41f9850e58c59fdc34d10"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaeef2121bcab41f9850e58c59fdc34d10">usart_init_rs232</a></div><div class="ttdeci">uint32_t usart_init_rs232(Usart *p_usart, const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)</div><div class="ttdoc">Configure USART to work in RS232 mode. </div><div class="ttdef"><b>Definition:</b> usart.c:284</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaafe097c01c082b270c1057722d524f5b"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaafe097c01c082b270c1057722d524f5b">usart_set_async_baudrate</a></div><div class="ttdeci">uint32_t usart_set_async_baudrate(Usart *p_usart, uint32_t baudrate, uint32_t ul_mck)</div><div class="ttdoc">Calculate a clock divider(CD) and a fractional part (FP) for the USART asynchronous modes to generate...</div><div class="ttdef"><b>Definition:</b> usart.c:121</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gad7379a739d799d82f34da103d32757c1"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gad7379a739d799d82f34da103d32757c1">usart_init_sync_slave</a></div><div class="ttdeci">uint32_t usart_init_sync_slave(Usart *p_usart, const sam_usart_opt_t *p_usart_opt)</div><div class="ttdoc">Configure USART to work in SYNC mode and act as a slave. </div><div class="ttdef"><b>Definition:</b> usart.c:433</div></div>
<div class="ttc" id="structusart__iso7816__opt__t_xhtml_af3621d045c0a6b0a7645a95d779b22d7"><div class="ttname"><a href="structusart__iso7816__opt__t.xhtml#af3621d045c0a6b0a7645a95d779b22d7">usart_iso7816_opt_t::fidi_ratio</a></div><div class="ttdeci">uint32_t fidi_ratio</div><div class="ttdef"><b>Definition:</b> usart.h:136</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gadedd154647a6401b9feab44a0620fea1"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gadedd154647a6401b9feab44a0620fea1">usart_get_status</a></div><div class="ttdeci">uint32_t usart_get_status(Usart *p_usart)</div><div class="ttdoc">Get current status. </div><div class="ttdef"><b>Definition:</b> usart.c:1512</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga548d63d04cff612d9b9b628d1fdd98cb"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga548d63d04cff612d9b9b628d1fdd98cb">usart_get_writeprotect_status</a></div><div class="ttdeci">uint32_t usart_get_writeprotect_status(Usart *p_usart)</div><div class="ttdoc">Get write protect status. </div><div class="ttdef"><b>Definition:</b> usart.c:1928</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga6cb84f0297ddca62d4077f616efa5c5b"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga6cb84f0297ddca62d4077f616efa5c5b">usart_reset</a></div><div class="ttdeci">void usart_reset(Usart *p_usart)</div><div class="ttdoc">Reset the USART and disable TX and RX. </div><div class="ttdef"><b>Definition:</b> usart.c:250</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gac0b33a2b7a3115c29dd85565984f46b5"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gac0b33a2b7a3115c29dd85565984f46b5">usart_is_tx_ready</a></div><div class="ttdeci">uint32_t usart_is_tx_ready(Usart *p_usart)</div><div class="ttdoc">Check if Transmit is Ready. </div><div class="ttdef"><b>Definition:</b> usart.c:1667</div></div>
<div class="ttc" id="structsam__usart__opt__t_xhtml_a7d8ae828c050417bedcd418d9b593950"><div class="ttname"><a href="structsam__usart__opt__t.xhtml#a7d8ae828c050417bedcd418d9b593950">sam_usart_opt_t::char_length</a></div><div class="ttdeci">uint32_t char_length</div><div class="ttdef"><b>Definition:</b> usart.h:100</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga8ea87f1c2b00747e7a5de5b36aa0cc71"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga8ea87f1c2b00747e7a5de5b36aa0cc71">usart_init_hw_handshaking</a></div><div class="ttdeci">uint32_t usart_init_hw_handshaking(Usart *p_usart, const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)</div><div class="ttdoc">Configure USART to work in hardware handshaking mode. </div><div class="ttdef"><b>Definition:</b> usart.c:323</div></div>
<div class="ttc" id="structusart__iso7816__opt__t_xhtml_ae517c6ab96cc59a7a405bafb185cf328"><div class="ttname"><a href="structusart__iso7816__opt__t.xhtml#ae517c6ab96cc59a7a405bafb185cf328">usart_iso7816_opt_t::inhibit_nack</a></div><div class="ttdeci">uint32_t inhibit_nack</div><div class="ttdef"><b>Definition:</b> usart.h:152</div></div>
<div class="ttc" id="structsam__usart__opt__t_xhtml_ade787fb1f3396157673a7021c4dcf56e"><div class="ttname"><a href="structsam__usart__opt__t.xhtml#ade787fb1f3396157673a7021c4dcf56e">sam_usart_opt_t::parity_type</a></div><div class="ttdeci">uint32_t parity_type</div><div class="ttdef"><b>Definition:</b> usart.h:107</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga911274fe177ba10bbd156ac1a212ae23"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga911274fe177ba10bbd156ac1a212ae23">usart_is_tx_buf_empty</a></div><div class="ttdeci">uint32_t usart_is_tx_buf_empty(Usart *p_usart)</div><div class="ttdoc">Check if both transmit buffers are empty. </div><div class="ttdef"><b>Definition:</b> usart.c:695</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaa9593727b910df8c0e9c359c5d7004ec"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaa9593727b910df8c0e9c359c5d7004ec">usart_write</a></div><div class="ttdeci">uint32_t usart_write(Usart *p_usart, uint32_t c)</div><div class="ttdoc">Write to USART Transmit Holding Register. </div><div class="ttdef"><b>Definition:</b> usart.c:1712</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gab5ecc0dc1577f065fda6afaaaa069a57"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gab5ecc0dc1577f065fda6afaaaa069a57">usart_spi_release_chip_select</a></div><div class="ttdeci">void usart_spi_release_chip_select(Usart *p_usart)</div><div class="ttdoc">Drive the slave select line NSS (RTS pin) to 1 in SPI master mode. </div><div class="ttdef"><b>Definition:</b> usart.c:1652</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga9f88f9b3e78b92b53016420c3594fcf6"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga9f88f9b3e78b92b53016420c3594fcf6">usart_is_rx_ready</a></div><div class="ttdeci">uint32_t usart_is_rx_ready(Usart *p_usart)</div><div class="ttdoc">Check if the received data are ready. </div><div class="ttdef"><b>Definition:</b> usart.c:1696</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gac30ba4e208ac3928d05aa06ef22ac266"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gac30ba4e208ac3928d05aa06ef22ac266">usart_is_tx_empty</a></div><div class="ttdeci">uint32_t usart_is_tx_empty(Usart *p_usart)</div><div class="ttdoc">Check if Transmit Holding Register is empty. </div><div class="ttdef"><b>Definition:</b> usart.c:1682</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga33c4b214e790bf6b04c8867dd66c3336"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga33c4b214e790bf6b04c8867dd66c3336">usart_enable_interrupt</a></div><div class="ttdeci">void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)</div><div class="ttdoc">Enable USART interrupts. </div><div class="ttdef"><b>Definition:</b> usart.c:1477</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gabdf1b8bf1b4da95d3a314c4916799e88"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gabdf1b8bf1b4da95d3a314c4916799e88">usart_disable_writeprotect</a></div><div class="ttdeci">void usart_disable_writeprotect(Usart *p_usart)</div><div class="ttdoc">Disable write protect of USART registers. </div><div class="ttdef"><b>Definition:</b> usart.c:1915</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gab39cc4289bde563c4d58ecd22765319c"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gab39cc4289bde563c4d58ecd22765319c">usart_is_rx_buf_end</a></div><div class="ttdeci">uint32_t usart_is_rx_buf_end(Usart *p_usart)</div><div class="ttdoc">Check if one receive buffer is filled. </div><div class="ttdef"><b>Definition:</b> usart.c:656</div></div>
<div class="ttc" id="structusart__iso7816__opt__t_xhtml_a661af25e490185b850538c69f030f0b7"><div class="ttname"><a href="structusart__iso7816__opt__t.xhtml#a661af25e490185b850538c69f030f0b7">usart_iso7816_opt_t::bit_order</a></div><div class="ttdeci">uint32_t bit_order</div><div class="ttdef"><b>Definition:</b> usart.h:172</div></div>
<div class="ttc" id="struct_pdc_xhtml"><div class="ttname"><a href="struct_pdc.xhtml">Pdc</a></div><div class="ttdoc">Pdc hardware registers. </div><div class="ttdef"><b>Definition:</b> pdc.h:56</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga86ad3a57b19fb497ef2271d6dc87c359"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga86ad3a57b19fb497ef2271d6dc87c359">usart_reset_rx</a></div><div class="ttdeci">void usart_reset_rx(Usart *p_usart)</div><div class="ttdoc">Immediately stop and disable USART receiver. </div><div class="ttdef"><b>Definition:</b> usart.c:1454</div></div>
<div class="ttc" id="structsam__usart__opt__t_xhtml_aaeff3c1969cc0440097f9eeb9b7f8e46"><div class="ttname"><a href="structsam__usart__opt__t.xhtml#aaeff3c1969cc0440097f9eeb9b7f8e46">sam_usart_opt_t::irda_filter</a></div><div class="ttdeci">uint32_t irda_filter</div><div class="ttdef"><b>Definition:</b> usart.h:124</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaf42f05f73f1095fc7a2b28ebbf97bf4b"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaf42f05f73f1095fc7a2b28ebbf97bf4b">usart_init_spi_slave</a></div><div class="ttdeci">uint32_t usart_init_spi_slave(Usart *p_usart, const usart_spi_opt_t *p_usart_opt)</div><div class="ttdoc">Configure USART to work in SPI mode and act as a slave. </div><div class="ttdef"><b>Definition:</b> usart.c:790</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gace816375e1905a329cffd46e3ffd89b1"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gace816375e1905a329cffd46e3ffd89b1">usart_putchar</a></div><div class="ttdeci">uint32_t usart_putchar(Usart *p_usart, uint32_t c)</div><div class="ttdoc">Write to USART Transmit Holding Register. </div><div class="ttdef"><b>Definition:</b> usart.c:1733</div></div>
<div class="ttc" id="structusart__spi__opt__t_xhtml_acf5809b8e89a0c2bafc9fd44e8115f7b"><div class="ttname"><a href="structusart__spi__opt__t.xhtml#acf5809b8e89a0c2bafc9fd44e8115f7b">usart_spi_opt_t::baudrate</a></div><div class="ttdeci">uint32_t baudrate</div><div class="ttdef"><b>Definition:</b> usart.h:185</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaa74733b3e78a560568cc22708ac0d1be"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaa74733b3e78a560568cc22708ac0d1be">usart_enable_writeprotect</a></div><div class="ttdeci">void usart_enable_writeprotect(Usart *p_usart)</div><div class="ttdoc">Enable write protect of USART registers. </div><div class="ttdef"><b>Definition:</b> usart.c:1905</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaf29b2e7c010fb15a137cc647742dd7f7"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaf29b2e7c010fb15a137cc647742dd7f7">usart_spi_force_chip_select</a></div><div class="ttdeci">void usart_spi_force_chip_select(Usart *p_usart)</div><div class="ttdoc">Drive the slave select line NSS (RTS pin) to 0 in SPI master mode. </div><div class="ttdef"><b>Definition:</b> usart.c:1642</div></div>
<div class="ttc" id="structsam__usart__opt__t_xhtml"><div class="ttname"><a href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a></div><div class="ttdoc">micro definition for LIN mode of SAMV71 </div><div class="ttdef"><b>Definition:</b> usart.h:91</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga7fd617322d666621fee15501ae0de7c7"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga7fd617322d666621fee15501ae0de7c7">usart_enable_rx</a></div><div class="ttdeci">void usart_enable_rx(Usart *p_usart)</div><div class="ttdoc">Enable USART receiver. </div><div class="ttdef"><b>Definition:</b> usart.c:1434</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga55533226a26ce5279457601bc995b9c5"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga55533226a26ce5279457601bc995b9c5">usart_send_address</a></div><div class="ttdeci">uint32_t usart_send_address(Usart *p_usart, uint32_t ul_addr)</div><div class="ttdoc">In Multidrop mode only, the next character written to the US_THR is sent with the address bit set...</div><div class="ttdef"><b>Definition:</b> usart.c:1568</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga5d7a3fc36901ee31049c661066af6553"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga5d7a3fc36901ee31049c661066af6553">usart_restart_rx_timeout</a></div><div class="ttdeci">void usart_restart_rx_timeout(Usart *p_usart)</div><div class="ttdoc">Restart the receive timeout. </div><div class="ttdef"><b>Definition:</b> usart.c:1588</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga09984d6dcb9a64117a0a8c2e5c32a8ec"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga09984d6dcb9a64117a0a8c2e5c32a8ec">usart_getchar</a></div><div class="ttdeci">uint32_t usart_getchar(Usart *p_usart, uint32_t *c)</div><div class="ttdoc">Read from USART Receive Holding Register. </div><div class="ttdef"><b>Definition:</b> usart.c:1789</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga6c93002d564e25a12975a7f0c6c1564b"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga6c93002d564e25a12975a7f0c6c1564b">usart_set_rx_timeout</a></div><div class="ttdeci">void usart_set_rx_timeout(Usart *p_usart, uint32_t timeout)</div><div class="ttdoc">Configure the receive timeout register. </div><div class="ttdef"><b>Definition:</b> usart.c:1466</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaf581748a222b09334b4e7b963eaccc0c"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaf581748a222b09334b4e7b963eaccc0c">usart_stop_tx_break</a></div><div class="ttdeci">void usart_stop_tx_break(Usart *p_usart)</div><div class="ttdoc">Stop transmission of a break. </div><div class="ttdef"><b>Definition:</b> usart.c:1542</div></div>
<div class="ttc" id="structusart__spi__opt__t_xhtml_a360bd76e70bfa6e0ba714e5492070fb6"><div class="ttname"><a href="structusart__spi__opt__t.xhtml#a360bd76e70bfa6e0ba714e5492070fb6">usart_spi_opt_t::channel_mode</a></div><div class="ttdeci">uint32_t channel_mode</div><div class="ttdef"><b>Definition:</b> usart.h:205</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gafdee4a457c8cefe46e45ec63902a86c7"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gafdee4a457c8cefe46e45ec63902a86c7">usart_write_line</a></div><div class="ttdeci">void usart_write_line(Usart *p_usart, const char *string)</div><div class="ttdoc">Write one-line string through USART. </div><div class="ttdef"><b>Definition:</b> usart.c:1749</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gad4bb30861c72801f19bb8fb0ac19362e"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gad4bb30861c72801f19bb8fb0ac19362e">usart_reset_nack</a></div><div class="ttdeci">void usart_reset_nack(Usart *p_usart)</div><div class="ttdoc">Reset NACK in US_CSR. </div><div class="ttdef"><b>Definition:</b> usart.c:643</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaa3a3c3eb673f70359570302dcf1a5b6a"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaa3a3c3eb673f70359570302dcf1a5b6a">usart_disable_interrupt</a></div><div class="ttdeci">void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)</div><div class="ttdoc">Disable USART interrupts. </div><div class="ttdef"><b>Definition:</b> usart.c:1488</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga75f8c53d5b4c51d302970f94ec296115"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga75f8c53d5b4c51d302970f94ec296115">usart_set_tx_timeguard</a></div><div class="ttdeci">void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)</div><div class="ttdoc">Configure the transmit timeguard register. </div><div class="ttdef"><b>Definition:</b> usart.c:1424</div></div>
<div class="ttc" id="structsam__usart__opt__t_xhtml_a48bb096d6aa0c6f397239a7970b0aa3a"><div class="ttname"><a href="structsam__usart__opt__t.xhtml#a48bb096d6aa0c6f397239a7970b0aa3a">sam_usart_opt_t::baudrate</a></div><div class="ttdeci">uint32_t baudrate</div><div class="ttdef"><b>Definition:</b> usart.h:93</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_gaf2a63720ac25579075bf9191c601c7ea"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#gaf2a63720ac25579075bf9191c601c7ea">usart_get_interrupt_mask</a></div><div class="ttdeci">uint32_t usart_get_interrupt_mask(Usart *p_usart)</div><div class="ttdoc">Read USART interrupt mask. </div><div class="ttdef"><b>Definition:</b> usart.c:1500</div></div>
<div class="ttc" id="structsam__usart__opt__t_xhtml_ac49607b710079748558fdb875e456e99"><div class="ttname"><a href="structsam__usart__opt__t.xhtml#ac49607b710079748558fdb875e456e99">sam_usart_opt_t::channel_mode</a></div><div class="ttdeci">uint32_t channel_mode</div><div class="ttdef"><b>Definition:</b> usart.h:121</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga7265d736a562d24e880c0c5e10c41a48"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga7265d736a562d24e880c0c5e10c41a48">usart_init_rs485</a></div><div class="ttdeci">uint32_t usart_init_rs485(Usart *p_usart, const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)</div><div class="ttdoc">Configure USART to work in RS485 mode. </div><div class="ttdef"><b>Definition:</b> usart.c:472</div></div>
<div class="ttc" id="group__group__sam__drivers__usart_xhtml_ga123b84a0d5be1cbf1a3c5bac4af3d27d"><div class="ttname"><a href="group__group__sam__drivers__usart.xhtml#ga123b84a0d5be1cbf1a3c5bac4af3d27d">usart_reset_tx</a></div><div class="ttdeci">void usart_reset_tx(Usart *p_usart)</div><div class="ttdoc">Immediately stop and disable USART transmitter. </div><div class="ttdef"><b>Definition:</b> usart.c:1412</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
