<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: examples/atmel_samg55/src/ASF/thirdparty/freertos/freertos-7.0.0/source/include/timers.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="dir_0e96b936377161858012b6f31c3bd790.xhtml">atmel_samg55</a></li><li class="navelem"><a class="el" href="dir_0ae219bfaa679f3dbaaacda5fb614d9c.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_67951177d7f5e66661a526635115739c.xhtml">ASF</a></li><li class="navelem"><a class="el" href="dir_2ebaa83b9a80a062a45c97b62e911ab2.xhtml">thirdparty</a></li><li class="navelem"><a class="el" href="dir_d4fc68e8089e8b200ed8404bd11d9cbc.xhtml">freertos</a></li><li class="navelem"><a class="el" href="dir_dc107d22e5a3efad33abbabba5eee61e.xhtml">freertos-7.0.0</a></li><li class="navelem"><a class="el" href="dir_7676a97cf995c7f6012a96736129d95f.xhtml">source</a></li><li class="navelem"><a class="el" href="dir_63f54b98461c1e9b6e74b1aecf4fc76e.xhtml">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">timers.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="portable_8h_source.xhtml">portable.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="list_8h_source.xhtml">list.h</a>&quot;</code><br />
</div><div class="textblock"><div class="dynheader">
Include dependency graph for timers.h:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="timers_8h__incl.svg" width="202" height="156"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div><div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="timers_8h__dep__incl.svg" width="615" height="186"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<p><a href="timers_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:afc38af63403775cc4ced3995f920343a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#afc38af63403775cc4ced3995f920343a">tmrCOMMAND_START</a>&#160;&#160;&#160;0</td></tr>
<tr class="separator:afc38af63403775cc4ced3995f920343a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cd6f6a41dcd52d2fc06c350f43516c0"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a0cd6f6a41dcd52d2fc06c350f43516c0">tmrCOMMAND_STOP</a>&#160;&#160;&#160;1</td></tr>
<tr class="separator:a0cd6f6a41dcd52d2fc06c350f43516c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb27881a1a1118b9cc4d711391c89414"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#adb27881a1a1118b9cc4d711391c89414">tmrCOMMAND_CHANGE_PERIOD</a>&#160;&#160;&#160;2</td></tr>
<tr class="separator:adb27881a1a1118b9cc4d711391c89414"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a5586339a9dbc1320153fd96a1c2f33"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a5a5586339a9dbc1320153fd96a1c2f33">tmrCOMMAND_DELETE</a>&#160;&#160;&#160;3</td></tr>
<tr class="separator:a5a5586339a9dbc1320153fd96a1c2f33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5feb6cc52c2bccc594aceaf51068c255"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255">xTimerStart</a>(xTimer,  xBlockTime)&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#afc38af63403775cc4ced3995f920343a">tmrCOMMAND_START</a>, ( <a class="el" href="tasks_8c.xhtml#a50ca04677e139ae017188939edc33144">xTaskGetTickCount</a>() ), NULL, ( xBlockTime ) )</td></tr>
<tr class="memdesc:a5feb6cc52c2bccc594aceaf51068c255"><td class="mdescLeft">&#160;</td><td class="mdescRight">portBASE_TYPE <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart( xTimerHandle xTimer, portTickType xBlockTime )</a>;  <a href="#a5feb6cc52c2bccc594aceaf51068c255">More...</a><br /></td></tr>
<tr class="separator:a5feb6cc52c2bccc594aceaf51068c255"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75dce0296021f582935a78e34a4e6b0e"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a75dce0296021f582935a78e34a4e6b0e">xTimerStop</a>(xTimer,  xBlockTime)&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#a0cd6f6a41dcd52d2fc06c350f43516c0">tmrCOMMAND_STOP</a>, 0U, NULL, ( xBlockTime ) )</td></tr>
<tr class="memdesc:a75dce0296021f582935a78e34a4e6b0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">portBASE_TYPE <a class="el" href="timers_8h.xhtml#a75dce0296021f582935a78e34a4e6b0e" title="portBASE_TYPE xTimerStop( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStop( xTimerHandle xTimer, portTickType xBlockTime )</a>;  <a href="#a75dce0296021f582935a78e34a4e6b0e">More...</a><br /></td></tr>
<tr class="separator:a75dce0296021f582935a78e34a4e6b0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd45ce938d7dd35bd826e6e7633379bb"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb">xTimerChangePeriod</a>(xTimer,  xNewPeriod,  xBlockTime)&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#adb27881a1a1118b9cc4d711391c89414">tmrCOMMAND_CHANGE_PERIOD</a>, ( xNewPeriod ), NULL, ( xBlockTime ) )</td></tr>
<tr class="memdesc:acd45ce938d7dd35bd826e6e7633379bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTime );  <a href="#acd45ce938d7dd35bd826e6e7633379bb">More...</a><br /></td></tr>
<tr class="separator:acd45ce938d7dd35bd826e6e7633379bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc41da15f41a5686e3927e293153ddd3"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#adc41da15f41a5686e3927e293153ddd3">xTimerDelete</a>(xTimer,  xBlockTime)&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#a5a5586339a9dbc1320153fd96a1c2f33">tmrCOMMAND_DELETE</a>, 0U, NULL, ( xBlockTime ) )</td></tr>
<tr class="memdesc:adc41da15f41a5686e3927e293153ddd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">portBASE_TYPE <a class="el" href="timers_8h.xhtml#adc41da15f41a5686e3927e293153ddd3" title="portBASE_TYPE xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime )</a>;  <a href="#adc41da15f41a5686e3927e293153ddd3">More...</a><br /></td></tr>
<tr class="separator:adc41da15f41a5686e3927e293153ddd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ff57759f5b50640901243c9e7ab1773"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773">xTimerReset</a>(xTimer,  xBlockTime)&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#afc38af63403775cc4ced3995f920343a">tmrCOMMAND_START</a>, ( <a class="el" href="tasks_8c.xhtml#a50ca04677e139ae017188939edc33144">xTaskGetTickCount</a>() ), NULL, ( xBlockTime ) )</td></tr>
<tr class="memdesc:a5ff57759f5b50640901243c9e7ab1773"><td class="mdescLeft">&#160;</td><td class="mdescRight">portBASE_TYPE <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset( xTimerHandle xTimer, portTickType xBlockTime )</a>;  <a href="#a5ff57759f5b50640901243c9e7ab1773">More...</a><br /></td></tr>
<tr class="separator:a5ff57759f5b50640901243c9e7ab1773"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adab5809f9679e44a343b8dbb8fb7c67f"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#adab5809f9679e44a343b8dbb8fb7c67f">xTimerStartFromISR</a>(xTimer,  pxHigherPriorityTaskWoken)&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#afc38af63403775cc4ced3995f920343a">tmrCOMMAND_START</a>, ( <a class="el" href="tasks_8c.xhtml#aa1ecfd8dd05e4f5d0b825ce1b45cb388">xTaskGetTickCountFromISR</a>() ), ( pxHigherPriorityTaskWoken ), 0U )</td></tr>
<tr class="memdesc:adab5809f9679e44a343b8dbb8fb7c67f"><td class="mdescLeft">&#160;</td><td class="mdescRight">portBASE_TYPE xTimerStartFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken );  <a href="#adab5809f9679e44a343b8dbb8fb7c67f">More...</a><br /></td></tr>
<tr class="separator:adab5809f9679e44a343b8dbb8fb7c67f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef0f53e7ecfaa881621da83d61072db7"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#aef0f53e7ecfaa881621da83d61072db7">xTimerStopFromISR</a>(xTimer,  pxHigherPriorityTaskWoken)&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#a0cd6f6a41dcd52d2fc06c350f43516c0">tmrCOMMAND_STOP</a>, 0, ( pxHigherPriorityTaskWoken ), 0U )</td></tr>
<tr class="memdesc:aef0f53e7ecfaa881621da83d61072db7"><td class="mdescLeft">&#160;</td><td class="mdescRight">portBASE_TYPE xTimerStopFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken );  <a href="#aef0f53e7ecfaa881621da83d61072db7">More...</a><br /></td></tr>
<tr class="separator:aef0f53e7ecfaa881621da83d61072db7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d89ca6afb6e692e98932b5038c9e14a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a6d89ca6afb6e692e98932b5038c9e14a">xTimerChangePeriodFromISR</a>(xTimer,  xNewPeriod,  pxHigherPriorityTaskWoken)&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#adb27881a1a1118b9cc4d711391c89414">tmrCOMMAND_CHANGE_PERIOD</a>, ( xNewPeriod ), ( pxHigherPriorityTaskWoken ), 0U )</td></tr>
<tr class="memdesc:a6d89ca6afb6e692e98932b5038c9e14a"><td class="mdescLeft">&#160;</td><td class="mdescRight">portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer, portTickType xNewPeriod, portBASE_TYPE *pxHigherPriorityTaskWoken );  <a href="#a6d89ca6afb6e692e98932b5038c9e14a">More...</a><br /></td></tr>
<tr class="separator:a6d89ca6afb6e692e98932b5038c9e14a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a448138d0cebf76044f107ca56c842230"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a448138d0cebf76044f107ca56c842230">xTimerResetFromISR</a>(xTimer,  pxHigherPriorityTaskWoken)&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#afc38af63403775cc4ced3995f920343a">tmrCOMMAND_START</a>, ( <a class="el" href="tasks_8c.xhtml#aa1ecfd8dd05e4f5d0b825ce1b45cb388">xTaskGetTickCountFromISR</a>() ), ( pxHigherPriorityTaskWoken ), 0U )</td></tr>
<tr class="memdesc:a448138d0cebf76044f107ca56c842230"><td class="mdescLeft">&#160;</td><td class="mdescRight">portBASE_TYPE xTimerResetFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken );  <a href="#a448138d0cebf76044f107ca56c842230">More...</a><br /></td></tr>
<tr class="separator:a448138d0cebf76044f107ca56c842230"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ae889cfa94652a8294a73125af5d69846"><td class="memItemLeft" align="right" valign="top">typedef void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a></td></tr>
<tr class="memdesc:ae889cfa94652a8294a73125af5d69846"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type by which software timers are referenced.  <a href="#ae889cfa94652a8294a73125af5d69846">More...</a><br /></td></tr>
<tr class="separator:ae889cfa94652a8294a73125af5d69846"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefcffa8b942fb82e3f29e2e59c42203f"><td class="memItemLeft" align="right" valign="top">typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#aefcffa8b942fb82e3f29e2e59c42203f">tmrTIMER_CALLBACK</a>) (<a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a> xTimer)</td></tr>
<tr class="separator:aefcffa8b942fb82e3f29e2e59c42203f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a359de9e997a89ba931efa0c434583c00"><td class="memItemLeft" align="right" valign="top"><a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a359de9e997a89ba931efa0c434583c00">xTimerCreate</a> (const signed char *pcTimerName, <a class="el" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a> xTimerPeriodInTicks, unsigned <a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a> uxAutoReload, void *pvTimerID, <a class="el" href="timers_8h.xhtml#aefcffa8b942fb82e3f29e2e59c42203f">tmrTIMER_CALLBACK</a> pxCallbackFunction) <a class="el" href="mpu__wrappers_8h.xhtml#a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</a></td></tr>
<tr class="memdesc:a359de9e997a89ba931efa0c434583c00"><td class="mdescLeft">&#160;</td><td class="mdescRight">xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriod, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction );  <a href="#a359de9e997a89ba931efa0c434583c00">More...</a><br /></td></tr>
<tr class="separator:a359de9e997a89ba931efa0c434583c00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47e3d71fedaec6a50dda06c1769213ee"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a47e3d71fedaec6a50dda06c1769213ee">pvTimerGetTimerID</a> (<a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a> xTimer) <a class="el" href="mpu__wrappers_8h.xhtml#a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</a></td></tr>
<tr class="memdesc:a47e3d71fedaec6a50dda06c1769213ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">void *pvTimerGetTimerID( xTimerHandle xTimer );  <a href="#a47e3d71fedaec6a50dda06c1769213ee">More...</a><br /></td></tr>
<tr class="separator:a47e3d71fedaec6a50dda06c1769213ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33c2c89c4c1abd2af94d0a8f3eed34e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a33c2c89c4c1abd2af94d0a8f3eed34e6">xTimerIsTimerActive</a> (<a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a> xTimer) <a class="el" href="mpu__wrappers_8h.xhtml#a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</a></td></tr>
<tr class="memdesc:a33c2c89c4c1abd2af94d0a8f3eed34e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">portBASE_TYPE <a class="el" href="timers_8h.xhtml#a33c2c89c4c1abd2af94d0a8f3eed34e6" title="portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer ); ">xTimerIsTimerActive( xTimerHandle xTimer )</a>;  <a href="#a33c2c89c4c1abd2af94d0a8f3eed34e6">More...</a><br /></td></tr>
<tr class="separator:a33c2c89c4c1abd2af94d0a8f3eed34e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa1839b93b802bf35d83a517c28a7ddb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#afa1839b93b802bf35d83a517c28a7ddb">xTimerCreateTimerTask</a> (void) <a class="el" href="mpu__wrappers_8h.xhtml#a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</a></td></tr>
<tr class="separator:afa1839b93b802bf35d83a517c28a7ddb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a279e5c3ccec018dcedbd9c0d0d692e70"><td class="memItemLeft" align="right" valign="top"><a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a> (<a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a> xTimer, <a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a> xCommandID, <a class="el" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a> xOptionalValue, <a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a> *pxHigherPriorityTaskWoken, <a class="el" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a> xBlockTime) <a class="el" href="mpu__wrappers_8h.xhtml#a4785c4f4a8c04b835139dcc2a6682078">PRIVILEGED_FUNCTION</a></td></tr>
<tr class="separator:a279e5c3ccec018dcedbd9c0d0d692e70"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="adb27881a1a1118b9cc4d711391c89414"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb27881a1a1118b9cc4d711391c89414">&sect;&nbsp;</a></span>tmrCOMMAND_CHANGE_PERIOD</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define tmrCOMMAND_CHANGE_PERIOD&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5a5586339a9dbc1320153fd96a1c2f33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a5586339a9dbc1320153fd96a1c2f33">&sect;&nbsp;</a></span>tmrCOMMAND_DELETE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define tmrCOMMAND_DELETE&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afc38af63403775cc4ced3995f920343a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc38af63403775cc4ced3995f920343a">&sect;&nbsp;</a></span>tmrCOMMAND_START</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define tmrCOMMAND_START&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0cd6f6a41dcd52d2fc06c350f43516c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cd6f6a41dcd52d2fc06c350f43516c0">&sect;&nbsp;</a></span>tmrCOMMAND_STOP</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define tmrCOMMAND_STOP&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acd45ce938d7dd35bd826e6e7633379bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd45ce938d7dd35bd826e6e7633379bb">&sect;&nbsp;</a></span>xTimerChangePeriod</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define xTimerChangePeriod</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xTimer, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xNewPeriod, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xBlockTime&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#adb27881a1a1118b9cc4d711391c89414">tmrCOMMAND_CHANGE_PERIOD</a>, ( xNewPeriod ), NULL, ( xBlockTime ) )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTime ); </p>
<p>Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task though a queue called the timer command queue. The timer command queue is private to the kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.</p>
<p><a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb" title="portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTi...">xTimerChangePeriod()</a> changes the period of a timer that was previously created using the <a class="el" href="timers_8h.xhtml#a359de9e997a89ba931efa0c434583c00" title="xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriod, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ); ">xTimerCreate()</a> API function.</p>
<p><a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb" title="portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTi...">xTimerChangePeriod()</a> can be called to change the period of an active or dormant state timer.</p>
<p>The configUSE_TIMERS configuration constant must be set to 1 for <a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb" title="portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTi...">xTimerChangePeriod()</a> to be available.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The handle of the timer that is having its period changed.</td></tr>
    <tr><td class="paramname">xNewPeriod</td><td>The new period for xTimer. Timer periods are specified in tick periods, so the constant portTICK_RATE_MS can be used to convert a time that has been specified in milliseconds. For example, if the timer must expire after 100 ticks, then xNewPeriod should be set to 100. Alternatively, if the timer must expire after 500ms, then xNewPeriod can be set to ( 500 / portTICK_RATE_MS ) provided configTICK_RATE_HZ is less than or equal to 1000.</td></tr>
    <tr><td class="paramname">xBlockTime</td><td>Specifies the time, in ticks, that the calling task should be held in the Blocked state to wait for the change period command to be successfully sent to the timer command queue, should the queue already be full when <a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb" title="portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTi...">xTimerChangePeriod()</a> was called. xBlockTime is ignored if <a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb" title="portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTi...">xTimerChangePeriod()</a> is called before the scheduler is started.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdFAIL will be returned if the change period command could not be sent to the timer command queue even after xBlockTime ticks had passed. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</dd></dl>
<p>Example usage:</p>
<p>// This function assumes xTimer has already been created. If the timer // referenced by xTimer is already active when it is called, then the timer // is deleted. If the timer referenced by xTimer is not active when it is // called, then the period of the timer is set to 500ms and the timer is // started. void vAFunction( xTimerHandle xTimer ) { if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently "if( xTimerIsTimerActive( xTimer ) )" { // xTimer is already active - delete it. <a class="el" href="timers_8h.xhtml#adc41da15f41a5686e3927e293153ddd3" title="portBASE_TYPE xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerDelete( xTimer )</a>; } else { // xTimer is not active, change its period to 500ms. This will also // cause the timer to start. Block for a maximum of 100 ticks if the // change period command cannot immediately be sent to the timer // command queue. if( xTimerChangePeriod( xTimer, 500 / portTICK_RATE_MS, 100 ) == pdPASS ) { // The command was successfully sent. } else { // The command could not be sent, even after waiting for 100 ticks // to pass. Take appropriate action here. } } } </p>

</div>
</div>
<a id="a6d89ca6afb6e692e98932b5038c9e14a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d89ca6afb6e692e98932b5038c9e14a">&sect;&nbsp;</a></span>xTimerChangePeriodFromISR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define xTimerChangePeriodFromISR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xTimer, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xNewPeriod, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">pxHigherPriorityTaskWoken&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#adb27881a1a1118b9cc4d711391c89414">tmrCOMMAND_CHANGE_PERIOD</a>, ( xNewPeriod ), ( pxHigherPriorityTaskWoken ), 0U )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer, portTickType xNewPeriod, portBASE_TYPE *pxHigherPriorityTaskWoken ); </p>
<p>A version of <a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb" title="portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTi...">xTimerChangePeriod()</a> that can be called from an interrupt service routine.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The handle of the timer that is having its period changed.</td></tr>
    <tr><td class="paramname">xNewPeriod</td><td>The new period for xTimer. Timer periods are specified in tick periods, so the constant portTICK_RATE_MS can be used to convert a time that has been specified in milliseconds. For example, if the timer must expire after 100 ticks, then xNewPeriod should be set to 100. Alternatively, if the timer must expire after 500ms, then xNewPeriod can be set to ( 500 / portTICK_RATE_MS ) provided configTICK_RATE_HZ is less than or equal to 1000.</td></tr>
    <tr><td class="paramname">pxHigherPriorityTaskWoken</td><td>The timer service/daemon task spends most of its time in the Blocked state, waiting for messages to arrive on the timer command queue. Calling <a class="el" href="timers_8h.xhtml#a6d89ca6afb6e692e98932b5038c9e14a" title="portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer, portTickType xNewPeriod, portBASE_TYPE *pxHigherPriorityTaskWoken ); ">xTimerChangePeriodFromISR()</a> writes a message to the timer command queue, so has the potential to transition the timer service/ daemon task out of the Blocked state. If calling <a class="el" href="timers_8h.xhtml#a6d89ca6afb6e692e98932b5038c9e14a" title="portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer, portTickType xNewPeriod, portBASE_TYPE *pxHigherPriorityTaskWoken ); ">xTimerChangePeriodFromISR()</a> causes the timer service/daemon task to leave the Blocked state, and the timer service/daemon task has a priority equal to or greater than the currently executing task (the task that was interrupted), then *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the <a class="el" href="timers_8h.xhtml#a6d89ca6afb6e692e98932b5038c9e14a" title="portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer, portTickType xNewPeriod, portBASE_TYPE *pxHigherPriorityTaskWoken ); ">xTimerChangePeriodFromISR()</a> function. If <a class="el" href="timers_8h.xhtml#a6d89ca6afb6e692e98932b5038c9e14a" title="portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer, portTickType xNewPeriod, portBASE_TYPE *pxHigherPriorityTaskWoken ); ">xTimerChangePeriodFromISR()</a> sets this value to pdTRUE then a context switch should be performed before the interrupt exits.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdFAIL will be returned if the command to change the timers period could not be sent to the timer command queue. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</dd></dl>
<p>Example usage:</p>
<p>// This scenario assumes xTimer has already been created and started. When // an interrupt occurs, the period of xTimer should be changed to 500ms.</p>
<p>// The interrupt service routine that changes the period of xTimer. void vAnExampleInterruptServiceRoutine( void ) { portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE; </p><pre class="fragment">// The interrupt has occurred - change the period of xTimer to 500ms.
// xHigherPriorityTaskWoken was set to pdFALSE where it was defined
// (within this function).  As this is an interrupt service routine, only
// FreeRTOS API functions that end in "FromISR" can be used.
if( xTimerChangePeriodFromISR( xTimer, &amp;xHigherPriorityTaskWoken ) != pdPASS )
{
    // The command to change the timers period was not executed
    // successfully.  Take appropriate action here.
}

// If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
// should be performed.  The syntax required to perform a context switch
// from inside an ISR varies from port to port, and from compiler to
// compiler.  Inspect the demos for the port you are using to find the
// actual syntax required.
if( xHigherPriorityTaskWoken != pdFALSE )
{
    // Call the interrupt safe yield function here (actual function
    // depends on the FreeRTOS port being used.
}
</pre><p> } </p>

</div>
</div>
<a id="adc41da15f41a5686e3927e293153ddd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc41da15f41a5686e3927e293153ddd3">&sect;&nbsp;</a></span>xTimerDelete</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define xTimerDelete</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xTimer, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xBlockTime&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#a5a5586339a9dbc1320153fd96a1c2f33">tmrCOMMAND_DELETE</a>, 0U, NULL, ( xBlockTime ) )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>portBASE_TYPE <a class="el" href="timers_8h.xhtml#adc41da15f41a5686e3927e293153ddd3" title="portBASE_TYPE xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime )</a>; </p>
<p>Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task though a queue called the timer command queue. The timer command queue is private to the kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.</p>
<p><a class="el" href="timers_8h.xhtml#adc41da15f41a5686e3927e293153ddd3" title="portBASE_TYPE xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerDelete()</a> deletes a timer that was previously created using the <a class="el" href="timers_8h.xhtml#a359de9e997a89ba931efa0c434583c00" title="xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriod, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ); ">xTimerCreate()</a> API function.</p>
<p>The configUSE_TIMERS configuration constant must be set to 1 for <a class="el" href="timers_8h.xhtml#adc41da15f41a5686e3927e293153ddd3" title="portBASE_TYPE xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerDelete()</a> to be available.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The handle of the timer being deleted.</td></tr>
    <tr><td class="paramname">xBlockTime</td><td>Specifies the time, in ticks, that the calling task should be held in the Blocked state to wait for the delete command to be successfully sent to the timer command queue, should the queue already be full when <a class="el" href="timers_8h.xhtml#adc41da15f41a5686e3927e293153ddd3" title="portBASE_TYPE xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerDelete()</a> was called. xBlockTime is ignored if <a class="el" href="timers_8h.xhtml#adc41da15f41a5686e3927e293153ddd3" title="portBASE_TYPE xTimerDelete( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerDelete()</a> is called before the scheduler is started.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdFAIL will be returned if the delete command could not be sent to the timer command queue even after xBlockTime ticks had passed. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</dd></dl>
<p>Example usage:</p>
<p>See the <a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb" title="portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTi...">xTimerChangePeriod()</a> API function example usage scenario. </p>

</div>
</div>
<a id="a5ff57759f5b50640901243c9e7ab1773"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ff57759f5b50640901243c9e7ab1773">&sect;&nbsp;</a></span>xTimerReset</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define xTimerReset</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xTimer, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xBlockTime&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#afc38af63403775cc4ced3995f920343a">tmrCOMMAND_START</a>, ( <a class="el" href="tasks_8c.xhtml#a50ca04677e139ae017188939edc33144">xTaskGetTickCount</a>() ), NULL, ( xBlockTime ) )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>portBASE_TYPE <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset( xTimerHandle xTimer, portTickType xBlockTime )</a>; </p>
<p>Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task though a queue called the timer command queue. The timer command queue is private to the kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.</p>
<p><a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> re-starts a timer that was previously created using the <a class="el" href="timers_8h.xhtml#a359de9e997a89ba931efa0c434583c00" title="xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriod, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ); ">xTimerCreate()</a> API function. If the timer had already been started and was already in the active state, then <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> will cause the timer to re-evaluate its expiry time so that it is relative to when <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> was called. If the timer was in the dormant state then <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> has equivalent functionality to the <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> API function.</p>
<p>Resetting a timer ensures the timer is in the active state. If the timer is not stopped, deleted, or reset in the mean time, the callback function associated with the timer will get called 'n' ticks after <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> was called, where 'n' is the timers defined period.</p>
<p>It is valid to call <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> before the scheduler has been started, but when this is done the timer will not actually start until the scheduler is started, and the timers expiry time will be relative to when the scheduler is started, not relative to when <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> was called.</p>
<p>The configUSE_TIMERS configuration constant must be set to 1 for <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> to be available.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The handle of the timer being reset/started/restarted.</td></tr>
    <tr><td class="paramname">xBlockTime</td><td>Specifies the time, in ticks, that the calling task should be held in the Blocked state to wait for the reset command to be successfully sent to the timer command queue, should the queue already be full when <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> was called. xBlockTime is ignored if <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> is called before the scheduler is started.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdFAIL will be returned if the reset command could not be sent to the timer command queue even after xBlockTime ticks had passed. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system, although the timers expiry time is relative to when <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> is actually called. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</dd></dl>
<p>Example usage:</p>
<p>// When a key is pressed, an LCD back-light is switched on. If 5 seconds pass // without a key being pressed, then the LCD back-light is switched off. In // this case, the timer is a one-shot timer.</p>
<p>xTimerHandle xBacklightTimer = NULL;</p>
<p>// The callback function assigned to the one-shot timer. In this case the // parameter is not used. void vBacklightTimerCallback( xTIMER *pxTimer ) { // The timer expired, therefore 5 seconds must have passed since a key // was pressed. Switch off the LCD back-light. vSetBacklightState( BACKLIGHT_OFF ); }</p>
<p>// The key press event handler. void vKeyPressEventHandler( char cKey ) { // Ensure the LCD back-light is on, then reset the timer that is // responsible for turning the back-light off after 5 seconds of // key inactivity. Wait 10 ticks for the command to be successfully sent // if it cannot be sent immediately. vSetBacklightState( BACKLIGHT_ON ); if( <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset( xBacklightTimer, 100 )</a> != pdPASS ) { // The reset command was not executed successfully. Take appropriate // action here. }</p>
<p>// Perform the rest of the key processing here. }</p>
<p>void <a class="el" href="main_8c.xhtml#a840291bc02cba5474a4cb46a9b9566fe" title="FreeRTOS Real Time Kernel example entry point. ">main( void )</a> { long x; </p><pre class="fragment">// Create then start the one-shot timer that is responsible for turning
// the back-light off if no keys are pressed within a 5 second period.
xBacklightTimer = xTimerCreate( "BacklightTimer",           // Just a text name, not used by the kernel.
                                ( 5000 / portTICK_RATE_MS), // The timer period in ticks.
                                pdFALSE,                    // The timer is a one-shot timer.
                                0,                          // The id is not used by the callback so can take any value.
                                vBacklightTimerCallback     // The callback function that switches the LCD back-light off.
                              );

if( xBacklightTimer == NULL )
{
    // The timer was not created.
}
else
{
    // Start the timer.  No block time is specified, and even if one was
    // it would be ignored because the scheduler has not yet been
    // started.
    if( xTimerStart( xBacklightTimer, 0 ) != pdPASS )
    {
        // The timer could not be set into the Active state.
    }
}

// ...
// Create tasks here.
// ...

// Starting the scheduler will start the timer running as it has already
// been set into the active state.
xTaskStartScheduler();

// Should not reach here.
for( ;; );
</pre><p> } </p>

</div>
</div>
<a id="a448138d0cebf76044f107ca56c842230"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a448138d0cebf76044f107ca56c842230">&sect;&nbsp;</a></span>xTimerResetFromISR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define xTimerResetFromISR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xTimer, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">pxHigherPriorityTaskWoken&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#afc38af63403775cc4ced3995f920343a">tmrCOMMAND_START</a>, ( <a class="el" href="tasks_8c.xhtml#aa1ecfd8dd05e4f5d0b825ce1b45cb388">xTaskGetTickCountFromISR</a>() ), ( pxHigherPriorityTaskWoken ), 0U )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>portBASE_TYPE xTimerResetFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); </p>
<p>A version of <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> that can be called from an interrupt service routine.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The handle of the timer that is to be started, reset, or restarted.</td></tr>
    <tr><td class="paramname">pxHigherPriorityTaskWoken</td><td>The timer service/daemon task spends most of its time in the Blocked state, waiting for messages to arrive on the timer command queue. Calling <a class="el" href="timers_8h.xhtml#a448138d0cebf76044f107ca56c842230" title="portBASE_TYPE xTimerResetFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerResetFromISR()</a> writes a message to the timer command queue, so has the potential to transition the timer service/daemon task out of the Blocked state. If calling <a class="el" href="timers_8h.xhtml#a448138d0cebf76044f107ca56c842230" title="portBASE_TYPE xTimerResetFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerResetFromISR()</a> causes the timer service/daemon task to leave the Blocked state, and the timer service/ daemon task has a priority equal to or greater than the currently executing task (the task that was interrupted), then *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the <a class="el" href="timers_8h.xhtml#a448138d0cebf76044f107ca56c842230" title="portBASE_TYPE xTimerResetFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerResetFromISR()</a> function. If <a class="el" href="timers_8h.xhtml#a448138d0cebf76044f107ca56c842230" title="portBASE_TYPE xTimerResetFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerResetFromISR()</a> sets this value to pdTRUE then a context switch should be performed before the interrupt exits.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdFAIL will be returned if the reset command could not be sent to the timer command queue. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system, although the timers expiry time is relative to when <a class="el" href="timers_8h.xhtml#a448138d0cebf76044f107ca56c842230" title="portBASE_TYPE xTimerResetFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerResetFromISR()</a> is actually called. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</dd></dl>
<p>Example usage:</p>
<p>// This scenario assumes xBacklightTimer has already been created. When a // key is pressed, an LCD back-light is switched on. If 5 seconds pass // without a key being pressed, then the LCD back-light is switched off. In // this case, the timer is a one-shot timer, and unlike the example given for // the <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> function, the key press event handler is an interrupt // service routine.</p>
<p>// The callback function assigned to the one-shot timer. In this case the // parameter is not used. void vBacklightTimerCallback( xTIMER *pxTimer ) { // The timer expired, therefore 5 seconds must have passed since a key // was pressed. Switch off the LCD back-light. vSetBacklightState( BACKLIGHT_OFF ); }</p>
<p>// The key press interrupt service routine. void vKeyPressEventInterruptHandler( void ) { portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE; </p><pre class="fragment">// Ensure the LCD back-light is on, then reset the timer that is
// responsible for turning the back-light off after 5 seconds of
// key inactivity.  This is an interrupt service routine so can only
// call FreeRTOS API functions that end in "FromISR".
vSetBacklightState( BACKLIGHT_ON );

// xTimerStartFromISR() or xTimerResetFromISR() could be called here
// as both cause the timer to re-calculate its expiry time.
// xHigherPriorityTaskWoken was initialised to pdFALSE when it was
// declared (in this function).
if( xTimerResetFromISR( xBacklightTimer, &amp;xHigherPriorityTaskWoken ) != pdPASS )
{
    // The reset command was not executed successfully.  Take appropriate
    // action here.
}

// Perform the rest of the key processing here.

// If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
// should be performed.  The syntax required to perform a context switch
// from inside an ISR varies from port to port, and from compiler to
// compiler.  Inspect the demos for the port you are using to find the
// actual syntax required.
if( xHigherPriorityTaskWoken != pdFALSE )
{
    // Call the interrupt safe yield function here (actual function
    // depends on the FreeRTOS port being used.
}
</pre><p> } </p>

</div>
</div>
<a id="a5feb6cc52c2bccc594aceaf51068c255"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5feb6cc52c2bccc594aceaf51068c255">&sect;&nbsp;</a></span>xTimerStart</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define xTimerStart</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xTimer, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xBlockTime&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#afc38af63403775cc4ced3995f920343a">tmrCOMMAND_START</a>, ( <a class="el" href="tasks_8c.xhtml#a50ca04677e139ae017188939edc33144">xTaskGetTickCount</a>() ), NULL, ( xBlockTime ) )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>portBASE_TYPE <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart( xTimerHandle xTimer, portTickType xBlockTime )</a>; </p>
<p>Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task though a queue called the timer command queue. The timer command queue is private to the kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.</p>
<p><a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> starts a timer that was previously created using the <a class="el" href="timers_8h.xhtml#a359de9e997a89ba931efa0c434583c00" title="xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriod, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ); ">xTimerCreate()</a> API function. If the timer had already been started and was already in the active state, then <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> has equivalent functionality to the <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> API function.</p>
<p>Starting a timer ensures the timer is in the active state. If the timer is not stopped, deleted, or reset in the mean time, the callback function associated with the timer will get called 'n' ticks after <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> was called, where 'n' is the timers defined period.</p>
<p>It is valid to call <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> before the scheduler has been started, but when this is done the timer will not actually start until the scheduler is started, and the timers expiry time will be relative to when the scheduler is started, not relative to when <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> was called.</p>
<p>The configUSE_TIMERS configuration constant must be set to 1 for <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> to be available.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The handle of the timer being started/restarted.</td></tr>
    <tr><td class="paramname">xBlockTime</td><td>Specifies the time, in ticks, that the calling task should be held in the Blocked state to wait for the start command to be successfully sent to the timer command queue, should the queue already be full when <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> was called. xBlockTime is ignored if <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> is called before the scheduler is started.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdFAIL will be returned if the start command could not be sent to the timer command queue even after xBlockTime ticks had passed. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system, although the timers expiry time is relative to when <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> is actually called. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</dd></dl>
<p>Example usage:</p>
<p>See the <a class="el" href="timers_8h.xhtml#a359de9e997a89ba931efa0c434583c00" title="xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriod, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ); ">xTimerCreate()</a> API function example usage scenario. </p>

</div>
</div>
<a id="adab5809f9679e44a343b8dbb8fb7c67f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adab5809f9679e44a343b8dbb8fb7c67f">&sect;&nbsp;</a></span>xTimerStartFromISR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define xTimerStartFromISR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xTimer, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">pxHigherPriorityTaskWoken&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#afc38af63403775cc4ced3995f920343a">tmrCOMMAND_START</a>, ( <a class="el" href="tasks_8c.xhtml#aa1ecfd8dd05e4f5d0b825ce1b45cb388">xTaskGetTickCountFromISR</a>() ), ( pxHigherPriorityTaskWoken ), 0U )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>portBASE_TYPE xTimerStartFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); </p>
<p>A version of <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a> that can be called from an interrupt service routine.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The handle of the timer being started/restarted.</td></tr>
    <tr><td class="paramname">pxHigherPriorityTaskWoken</td><td>The timer service/daemon task spends most of its time in the Blocked state, waiting for messages to arrive on the timer command queue. Calling <a class="el" href="timers_8h.xhtml#adab5809f9679e44a343b8dbb8fb7c67f" title="portBASE_TYPE xTimerStartFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStartFromISR()</a> writes a message to the timer command queue, so has the potential to transition the timer service/daemon task out of the Blocked state. If calling <a class="el" href="timers_8h.xhtml#adab5809f9679e44a343b8dbb8fb7c67f" title="portBASE_TYPE xTimerStartFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStartFromISR()</a> causes the timer service/daemon task to leave the Blocked state, and the timer service/ daemon task has a priority equal to or greater than the currently executing task (the task that was interrupted), then *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the <a class="el" href="timers_8h.xhtml#adab5809f9679e44a343b8dbb8fb7c67f" title="portBASE_TYPE xTimerStartFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStartFromISR()</a> function. If <a class="el" href="timers_8h.xhtml#adab5809f9679e44a343b8dbb8fb7c67f" title="portBASE_TYPE xTimerStartFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStartFromISR()</a> sets this value to pdTRUE then a context switch should be performed before the interrupt exits.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdFAIL will be returned if the start command could not be sent to the timer command queue. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system, although the timers expiry time is relative to when <a class="el" href="timers_8h.xhtml#adab5809f9679e44a343b8dbb8fb7c67f" title="portBASE_TYPE xTimerStartFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStartFromISR()</a> is actually called. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</dd></dl>
<p>Example usage:</p>
<p>// This scenario assumes xBacklightTimer has already been created. When a // key is pressed, an LCD back-light is switched on. If 5 seconds pass // without a key being pressed, then the LCD back-light is switched off. In // this case, the timer is a one-shot timer, and unlike the example given for // the <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a> function, the key press event handler is an interrupt // service routine.</p>
<p>// The callback function assigned to the one-shot timer. In this case the // parameter is not used. void vBacklightTimerCallback( xTIMER *pxTimer ) { // The timer expired, therefore 5 seconds must have passed since a key // was pressed. Switch off the LCD back-light. vSetBacklightState( BACKLIGHT_OFF ); }</p>
<p>// The key press interrupt service routine. void vKeyPressEventInterruptHandler( void ) { portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE; </p><pre class="fragment">// Ensure the LCD back-light is on, then restart the timer that is
// responsible for turning the back-light off after 5 seconds of
// key inactivity.  This is an interrupt service routine so can only
// call FreeRTOS API functions that end in "FromISR".
vSetBacklightState( BACKLIGHT_ON );

// xTimerStartFromISR() or xTimerResetFromISR() could be called here
// as both cause the timer to re-calculate its expiry time.
// xHigherPriorityTaskWoken was initialised to pdFALSE when it was
// declared (in this function).
if( xTimerStartFromISR( xBacklightTimer, &amp;xHigherPriorityTaskWoken ) != pdPASS )
{
    // The start command was not executed successfully.  Take appropriate
    // action here.
}

// Perform the rest of the key processing here.

// If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
// should be performed.  The syntax required to perform a context switch
// from inside an ISR varies from port to port, and from compiler to
// compiler.  Inspect the demos for the port you are using to find the
// actual syntax required.
if( xHigherPriorityTaskWoken != pdFALSE )
{
    // Call the interrupt safe yield function here (actual function
    // depends on the FreeRTOS port being used.
}
</pre><p> } </p>

</div>
</div>
<a id="a75dce0296021f582935a78e34a4e6b0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75dce0296021f582935a78e34a4e6b0e">&sect;&nbsp;</a></span>xTimerStop</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define xTimerStop</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xTimer, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xBlockTime&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#a0cd6f6a41dcd52d2fc06c350f43516c0">tmrCOMMAND_STOP</a>, 0U, NULL, ( xBlockTime ) )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>portBASE_TYPE <a class="el" href="timers_8h.xhtml#a75dce0296021f582935a78e34a4e6b0e" title="portBASE_TYPE xTimerStop( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStop( xTimerHandle xTimer, portTickType xBlockTime )</a>; </p>
<p>Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task though a queue called the timer command queue. The timer command queue is private to the kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.</p>
<p><a class="el" href="timers_8h.xhtml#a75dce0296021f582935a78e34a4e6b0e" title="portBASE_TYPE xTimerStop( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStop()</a> stops a timer that was previously started using either of the The <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a>, <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a>, <a class="el" href="timers_8h.xhtml#adab5809f9679e44a343b8dbb8fb7c67f" title="portBASE_TYPE xTimerStartFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStartFromISR()</a>, <a class="el" href="timers_8h.xhtml#a448138d0cebf76044f107ca56c842230" title="portBASE_TYPE xTimerResetFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerResetFromISR()</a>, <a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb" title="portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTi...">xTimerChangePeriod()</a> or <a class="el" href="timers_8h.xhtml#a6d89ca6afb6e692e98932b5038c9e14a" title="portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer, portTickType xNewPeriod, portBASE_TYPE *pxHigherPriorityTaskWoken ); ">xTimerChangePeriodFromISR()</a> API functions.</p>
<p>Stopping a timer ensures the timer is not in the active state.</p>
<p>The configUSE_TIMERS configuration constant must be set to 1 for <a class="el" href="timers_8h.xhtml#a75dce0296021f582935a78e34a4e6b0e" title="portBASE_TYPE xTimerStop( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStop()</a> to be available.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The handle of the timer being stopped.</td></tr>
    <tr><td class="paramname">xBlockTime</td><td>Specifies the time, in ticks, that the calling task should be held in the Blocked state to wait for the stop command to be successfully sent to the timer command queue, should the queue already be full when <a class="el" href="timers_8h.xhtml#a75dce0296021f582935a78e34a4e6b0e" title="portBASE_TYPE xTimerStop( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStop()</a> was called. xBlockTime is ignored if <a class="el" href="timers_8h.xhtml#a75dce0296021f582935a78e34a4e6b0e" title="portBASE_TYPE xTimerStop( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStop()</a> is called before the scheduler is started.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdFAIL will be returned if the stop command could not be sent to the timer command queue even after xBlockTime ticks had passed. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</dd></dl>
<p>Example usage:</p>
<p>See the <a class="el" href="timers_8h.xhtml#a359de9e997a89ba931efa0c434583c00" title="xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriod, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ); ">xTimerCreate()</a> API function example usage scenario. </p>

</div>
</div>
<a id="aef0f53e7ecfaa881621da83d61072db7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef0f53e7ecfaa881621da83d61072db7">&sect;&nbsp;</a></span>xTimerStopFromISR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define xTimerStopFromISR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">xTimer, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">pxHigherPriorityTaskWoken&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;<a class="el" href="timers_8h.xhtml#a279e5c3ccec018dcedbd9c0d0d692e70">xTimerGenericCommand</a>( ( xTimer ), <a class="el" href="timers_8h.xhtml#a0cd6f6a41dcd52d2fc06c350f43516c0">tmrCOMMAND_STOP</a>, 0, ( pxHigherPriorityTaskWoken ), 0U )</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>portBASE_TYPE xTimerStopFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); </p>
<p>A version of <a class="el" href="timers_8h.xhtml#a75dce0296021f582935a78e34a4e6b0e" title="portBASE_TYPE xTimerStop( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStop()</a> that can be called from an interrupt service routine.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The handle of the timer being stopped.</td></tr>
    <tr><td class="paramname">pxHigherPriorityTaskWoken</td><td>The timer service/daemon task spends most of its time in the Blocked state, waiting for messages to arrive on the timer command queue. Calling <a class="el" href="timers_8h.xhtml#aef0f53e7ecfaa881621da83d61072db7" title="portBASE_TYPE xTimerStopFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStopFromISR()</a> writes a message to the timer command queue, so has the potential to transition the timer service/daemon task out of the Blocked state. If calling <a class="el" href="timers_8h.xhtml#aef0f53e7ecfaa881621da83d61072db7" title="portBASE_TYPE xTimerStopFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStopFromISR()</a> causes the timer service/daemon task to leave the Blocked state, and the timer service/ daemon task has a priority equal to or greater than the currently executing task (the task that was interrupted), then *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the <a class="el" href="timers_8h.xhtml#aef0f53e7ecfaa881621da83d61072db7" title="portBASE_TYPE xTimerStopFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStopFromISR()</a> function. If <a class="el" href="timers_8h.xhtml#aef0f53e7ecfaa881621da83d61072db7" title="portBASE_TYPE xTimerStopFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStopFromISR()</a> sets this value to pdTRUE then a context switch should be performed before the interrupt exits.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdFAIL will be returned if the stop command could not be sent to the timer command queue. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</dd></dl>
<p>Example usage:</p>
<p>// This scenario assumes xTimer has already been created and started. When // an interrupt occurs, the timer should be simply stopped.</p>
<p>// The interrupt service routine that stops the timer. void vAnExampleInterruptServiceRoutine( void ) { portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE; </p><pre class="fragment">// The interrupt has occurred - simply stop the timer.
// xHigherPriorityTaskWoken was set to pdFALSE where it was defined
// (within this function).  As this is an interrupt service routine, only
// FreeRTOS API functions that end in "FromISR" can be used.
if( xTimerStopFromISR( xTimer, &amp;xHigherPriorityTaskWoken ) != pdPASS )
{
    // The stop command was not executed successfully.  Take appropriate
    // action here.
}

// If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
// should be performed.  The syntax required to perform a context switch
// from inside an ISR varies from port to port, and from compiler to
// compiler.  Inspect the demos for the port you are using to find the
// actual syntax required.
if( xHigherPriorityTaskWoken != pdFALSE )
{
    // Call the interrupt safe yield function here (actual function
    // depends on the FreeRTOS port being used.
}
</pre><p> } </p>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="aefcffa8b942fb82e3f29e2e59c42203f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefcffa8b942fb82e3f29e2e59c42203f">&sect;&nbsp;</a></span>tmrTIMER_CALLBACK</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(* tmrTIMER_CALLBACK) (<a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a> xTimer)</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae889cfa94652a8294a73125af5d69846"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae889cfa94652a8294a73125af5d69846">&sect;&nbsp;</a></span>xTimerHandle</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void* <a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type by which software timers are referenced. </p>
<p>For example, a call to <a class="el" href="timers_8h.xhtml#a359de9e997a89ba931efa0c434583c00" title="xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriod, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ); ">xTimerCreate()</a> returns an xTimerHandle variable that can then be used to reference the subject timer in calls to other software timer API functions (for example, <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a>, <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a>, etc.). </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a47e3d71fedaec6a50dda06c1769213ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47e3d71fedaec6a50dda06c1769213ee">&sect;&nbsp;</a></span>pvTimerGetTimerID()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* pvTimerGetTimerID </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a>&#160;</td>
          <td class="paramname"><em>xTimer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>void *pvTimerGetTimerID( xTimerHandle xTimer ); </p>
<p>Returns the ID assigned to the timer.</p>
<p>IDs are assigned to timers using the pvTimerID parameter of the call to xTimerCreated() that was used to create the timer.</p>
<p>If the same callback function is assigned to multiple timers then the timer ID can be used within the callback function to identify which timer actually expired.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The timer being queried.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The ID assigned to the timer being queried.</dd></dl>
<p>Example usage:</p>
<p>See the <a class="el" href="timers_8h.xhtml#a359de9e997a89ba931efa0c434583c00" title="xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriod, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ); ">xTimerCreate()</a> API function example usage scenario. </p>

</div>
</div>
<a id="a359de9e997a89ba931efa0c434583c00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a359de9e997a89ba931efa0c434583c00">&sect;&nbsp;</a></span>xTimerCreate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a> xTimerCreate </td>
          <td>(</td>
          <td class="paramtype">const signed char *&#160;</td>
          <td class="paramname"><em>pcTimerName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a>&#160;</td>
          <td class="paramname"><em>xTimerPeriodInTicks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned <a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a>&#160;</td>
          <td class="paramname"><em>uxAutoReload</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>pvTimerID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="timers_8h.xhtml#aefcffa8b942fb82e3f29e2e59c42203f">tmrTIMER_CALLBACK</a>&#160;</td>
          <td class="paramname"><em>pxCallbackFunction</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriod, unsigned portBASE_TYPE uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ); </p>
<p>Creates a new software timer instance. This allocates the storage required by the new timer, initialises the new timers internal state, and returns a handle by which the new timer can be referenced.</p>
<p>Timers are created in the dormant state. The <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a>, <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a>, <a class="el" href="timers_8h.xhtml#adab5809f9679e44a343b8dbb8fb7c67f" title="portBASE_TYPE xTimerStartFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStartFromISR()</a>, <a class="el" href="timers_8h.xhtml#a448138d0cebf76044f107ca56c842230" title="portBASE_TYPE xTimerResetFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerResetFromISR()</a>, <a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb" title="portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTi...">xTimerChangePeriod()</a> and <a class="el" href="timers_8h.xhtml#a6d89ca6afb6e692e98932b5038c9e14a" title="portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer, portTickType xNewPeriod, portBASE_TYPE *pxHigherPriorityTaskWoken ); ">xTimerChangePeriodFromISR()</a> API functions can all be used to transition a timer into the active state.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pcTimerName</td><td>A text name that is assigned to the timer. This is done purely to assist debugging. The kernel itself only ever references a timer by its handle, and never by its name.</td></tr>
    <tr><td class="paramname">xTimerPeriod</td><td>The timer period. The time is defined in tick periods so the constant portTICK_RATE_MS can be used to convert a time that has been specified in milliseconds. For example, if the timer must expire after 100 ticks, then xTimerPeriod should be set to 100. Alternatively, if the timer must expire after 500ms, then xPeriod can be set to ( 500 / portTICK_RATE_MS ) provided configTICK_RATE_HZ is less than or equal to 1000.</td></tr>
    <tr><td class="paramname">uxAutoReload</td><td>If uxAutoReload is set to pdTRUE then the timer will expire repeatedly with a frequency set by the xTimerPeriod parameter. If uxAutoReload is set to pdFALSE then the timer will be a one-shot timer and enter the dormant state after it expires.</td></tr>
    <tr><td class="paramname">pvTimerID</td><td>An identifier that is assigned to the timer being created. Typically this would be used in the timer callback function to identify which timer expired when the same callback function is assigned to more than one timer.</td></tr>
    <tr><td class="paramname">pxCallbackFunction</td><td>The function to call when the timer expires. Callback functions must have the prototype defined by tmrTIMER_CALLBACK, which is "void vCallbackFunction( xTIMER *xTimer );".</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>If the timer is successfully create then a handle to the newly created timer is returned. If the timer cannot be created (because either there is insufficient FreeRTOS heap remaining to allocate the timer structures, or the timer period was set to 0) then 0 is returned.</dd></dl>
<p>Example usage:</p>
<p>#define NUM_TIMERS 5</p>
<p>// An array to hold handles to the created timers. xTimerHandle xTimers[ NUM_TIMERS ];</p>
<p>// An array to hold a count of the number of times each timer expires. long lExpireCounters[ NUM_TIMERS ] = { 0 };</p>
<p>// Define a callback function that will be used by multiple timer instances. // The callback function does nothing but count the number of times the // associated timer expires, and stop the timer once the timer has expired // 10 times. void vTimerCallback( xTIMER *pxTimer ) { long lArrayIndex; const long xMaxExpiryCountBeforeStopping = 10; </p><pre class="fragment">   // Optionally do something if the pxTimer parameter is NULL.
   configASSERT( pxTimer );

// Which timer expired?
lArrayIndex = ( long ) pvTimerGetTimerID( pxTimer );

// Increment the number of times that pxTimer has expired.
lExpireCounters[ lArrayIndex ] += 1;

// If the timer has expired 10 times then stop it from running.
if( lExpireCounters[ lArrayIndex ] == xMaxExpiryCountBeforeStopping )
{
    // Do not use a block time if calling a timer API function from a
    // timer callback function, as doing so could cause a deadlock!
    xTimerStop( pxTimer, 0 );
}
</pre><p> }</p>
<p>void <a class="el" href="main_8c.xhtml#a840291bc02cba5474a4cb46a9b9566fe" title="FreeRTOS Real Time Kernel example entry point. ">main( void )</a> { long x; </p><pre class="fragment">// Create then start some timers.  Starting the timers before the scheduler
// has been started means the timers will start running immediately that
// the scheduler starts.
for( x = 0; x &lt; NUM_TIMERS; x++ )
{
    xTimers[ x ] = xTimerCreate(     "Timer",         // Just a text name, not used by the kernel.
                                    ( 100 * x ),     // The timer period in ticks.
                                    pdTRUE,         // The timers will auto-reload themselves when they expire.
                                    ( void * ) x,     // Assign each timer a unique id equal to its array index.
                                    vTimerCallback     // Each timer calls the same callback when it expires.
                                );

    if( xTimers[ x ] == NULL )
    {
        // The timer was not created.
    }
    else
    {
        // Start the timer.  No block time is specified, and even if one was
        // it would be ignored because the scheduler has not yet been
        // started.
        if( xTimerStart( xTimers[ x ], 0 ) != pdPASS )
        {
            // The timer could not be set into the Active state.
        }
    }
}

// ...
// Create tasks here.
// ...

// Starting the scheduler will start the timers running as they have already
// been set into the active state.
xTaskStartScheduler();

// Should not reach here.
for( ;; );
</pre><p> } </p>

</div>
</div>
<a id="afa1839b93b802bf35d83a517c28a7ddb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa1839b93b802bf35d83a517c28a7ddb">&sect;&nbsp;</a></span>xTimerCreateTimerTask()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a> xTimerCreateTimerTask </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="timers_8h_afa1839b93b802bf35d83a517c28a7ddb_icgraph.svg" width="359" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a279e5c3ccec018dcedbd9c0d0d692e70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a279e5c3ccec018dcedbd9c0d0d692e70">&sect;&nbsp;</a></span>xTimerGenericCommand()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a> xTimerGenericCommand </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a>&#160;</td>
          <td class="paramname"><em>xTimer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a>&#160;</td>
          <td class="paramname"><em>xCommandID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a>&#160;</td>
          <td class="paramname"><em>xOptionalValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a> *&#160;</td>
          <td class="paramname"><em>pxHigherPriorityTaskWoken</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a>&#160;</td>
          <td class="paramname"><em>xBlockTime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a33c2c89c4c1abd2af94d0a8f3eed34e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33c2c89c4c1abd2af94d0a8f3eed34e6">&sect;&nbsp;</a></span>xTimerIsTimerActive()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a> xTimerIsTimerActive </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="timers_8h.xhtml#ae889cfa94652a8294a73125af5d69846">xTimerHandle</a>&#160;</td>
          <td class="paramname"><em>xTimer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>portBASE_TYPE <a class="el" href="timers_8h.xhtml#a33c2c89c4c1abd2af94d0a8f3eed34e6" title="portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer ); ">xTimerIsTimerActive( xTimerHandle xTimer )</a>; </p>
<p>Queries a timer to see if it is active or dormant.</p>
<p>A timer will be dormant if: 1) It has been created but not started, or 2) It is an expired on-shot timer that has not been restarted.</p>
<p>Timers are created in the dormant state. The <a class="el" href="timers_8h.xhtml#a5feb6cc52c2bccc594aceaf51068c255" title="portBASE_TYPE xTimerStart( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerStart()</a>, <a class="el" href="timers_8h.xhtml#a5ff57759f5b50640901243c9e7ab1773" title="portBASE_TYPE xTimerReset( xTimerHandle xTimer, portTickType xBlockTime ); ">xTimerReset()</a>, <a class="el" href="timers_8h.xhtml#adab5809f9679e44a343b8dbb8fb7c67f" title="portBASE_TYPE xTimerStartFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerStartFromISR()</a>, <a class="el" href="timers_8h.xhtml#a448138d0cebf76044f107ca56c842230" title="portBASE_TYPE xTimerResetFromISR( xTimerHandle xTimer, portBASE_TYPE *pxHigherPriorityTaskWoken ); ...">xTimerResetFromISR()</a>, <a class="el" href="timers_8h.xhtml#acd45ce938d7dd35bd826e6e7633379bb" title="portBASE_TYPE xTimerChangePeriod( xTimerHandle xTimer, portTickType xNewPeriod, portTickType xBlockTi...">xTimerChangePeriod()</a> and <a class="el" href="timers_8h.xhtml#a6d89ca6afb6e692e98932b5038c9e14a" title="portBASE_TYPE xTimerChangePeriodFromISR( xTimerHandle xTimer, portTickType xNewPeriod, portBASE_TYPE *pxHigherPriorityTaskWoken ); ">xTimerChangePeriodFromISR()</a> API functions can all be used to transition a timer into the active state.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xTimer</td><td>The timer being queried.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdFALSE will be returned if the timer is dormant. A value other than pdFALSE will be returned if the timer is active.</dd></dl>
<p>Example usage:</p>
<p>// This function assumes xTimer has already been created. void vAFunction( xTimerHandle xTimer ) { if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently "if( xTimerIsTimerActive( xTimer ) )" { // xTimer is active, do something. } else { // xTimer is not active, do something else. } } </p>

</div>
</div>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
