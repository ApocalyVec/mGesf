<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: xSemaphoreTakeRecursive</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">xSemaphoreTakeRecursive</div>  </div>
</div><!--header-->
<div class="contents">

<p>semphr.  
<a href="#details">More...</a></p>
<p>semphr. </p>
<p>h xSemaphoreTakeRecursive( xSemaphoreHandle xMutex, portTickType xBlockTime )</p>
<p><em>Macro</em> to recursively obtain, or 'take', a mutex type semaphore. The mutex must have previously been created using a call to <a class="el" href="semphr_8h.xhtml#a1bbc843be5a41ea83d2693b2189fc0f8">xSemaphoreCreateRecursiveMutex()</a>;</p>
<p>configUSE_RECURSIVE_MUTEXES must be set to 1 in <a class="el" href="_free_r_t_o_s_config_8h.xhtml">FreeRTOSConfig.h</a> for this macro to be available.</p>
<p>This macro must not be used on mutexes created using <a class="el" href="semphr_8h.xhtml#aa6a00aa9b91a9e5b3ebe4ae1c3f115c6">xSemaphoreCreateMutex()</a>.</p>
<p>A mutex used recursively can be 'taken' repeatedly by the owner. The mutex doesn't become available again until the owner has called <a class="el" href="semphr_8h.xhtml#a398d66b17856c22dd49d39aaac42f105">xSemaphoreGiveRecursive()</a> for each successful 'take' request. For example, if a task successfully 'takes' the same mutex 5 times then the mutex will not be available to any other task until it has also 'given' the mutex back exactly five times.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xMutex</td><td>A handle to the mutex being obtained. This is the handle returned by <a class="el" href="semphr_8h.xhtml#a1bbc843be5a41ea83d2693b2189fc0f8">xSemaphoreCreateRecursiveMutex()</a>;</td></tr>
    <tr><td class="paramname">xBlockTime</td><td>The time in ticks to wait for the semaphore to become available. The macro portTICK_RATE_MS can be used to convert this to a real time. A block time of zero can be used to poll the semaphore. If the task already owns the semaphore then <a class="el" href="semphr_8h.xhtml#ad395f4bba51eea6af3397d72bc079e4d">xSemaphoreTakeRecursive()</a> will return immediately no matter what the value of xBlockTime.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdTRUE if the semaphore was obtained. pdFALSE if xBlockTime expired without the semaphore becoming available.</dd></dl>
<p>Example usage: </p><pre>
xSemaphoreHandle xMutex = NULL;</pre><pre>// A task that creates a mutex.
void vATask( void * pvParameters )
{
   // Create the mutex to guard a shared resource.
   xMutex = <a class="el" href="semphr_8h.xhtml#a1bbc843be5a41ea83d2693b2189fc0f8">xSemaphoreCreateRecursiveMutex()</a>;
}</pre><pre>// A task that uses the mutex.
void vAnotherTask( void * pvParameters )
{
   // ... Do other things.</pre><pre>   if( xMutex != NULL )
   {
       // See if we can obtain the mutex.  If the mutex is not available
       // wait 10 ticks to see if it becomes free.
       if( <a class="el" href="semphr_8h.xhtml#ad395f4bba51eea6af3397d72bc079e4d">xSemaphoreTakeRecursive( xSemaphore, ( portTickType ) 10 )</a> == pdTRUE )
       {
           // We were able to obtain the mutex and can now access the
           // shared resource.</pre><pre>           // ...
           // For some reason due to the nature of the code further calls to
        // <a class="el" href="semphr_8h.xhtml#ad395f4bba51eea6af3397d72bc079e4d">xSemaphoreTakeRecursive()</a> are made on the same mutex.  In real
        // code these would not be just sequential calls as this would make
        // no sense.  Instead the calls are likely to be buried inside
        // a more complex call structure.
           <a class="el" href="semphr_8h.xhtml#ad395f4bba51eea6af3397d72bc079e4d">xSemaphoreTakeRecursive( xMutex, ( portTickType ) 10 )</a>;
           <a class="el" href="semphr_8h.xhtml#ad395f4bba51eea6af3397d72bc079e4d">xSemaphoreTakeRecursive( xMutex, ( portTickType ) 10 )</a>;</pre><pre>           // The mutex has now been 'taken' three times, so will not be
        // available to another task until it has also been given back
        // three times.  Again it is unlikely that real code would have
        // these calls sequentially, but instead buried in a more complex
        // call structure.  This is just for illustrative purposes.
           <a class="el" href="semphr_8h.xhtml#a398d66b17856c22dd49d39aaac42f105">xSemaphoreGiveRecursive( xMutex )</a>;
        <a class="el" href="semphr_8h.xhtml#a398d66b17856c22dd49d39aaac42f105">xSemaphoreGiveRecursive( xMutex )</a>;
        <a class="el" href="semphr_8h.xhtml#a398d66b17856c22dd49d39aaac42f105">xSemaphoreGiveRecursive( xMutex )</a>;</pre><pre>        // Now the mutex can be taken by other tasks.
       }
       else
       {
           // We could not obtain the mutex and can therefore not access
           // the shared resource safely.
       }
   }
}
</pre> </div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
