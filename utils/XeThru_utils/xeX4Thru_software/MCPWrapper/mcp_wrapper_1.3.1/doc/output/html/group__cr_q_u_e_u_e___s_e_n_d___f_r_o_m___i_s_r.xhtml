<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: crQUEUE_SEND_FROM_ISR</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">crQUEUE_SEND_FROM_ISR</div>  </div>
</div><!--header-->
<div class="contents">

<p>croutine.  
<a href="#details">More...</a></p>
<p>croutine. </p>
<p>h </p><pre>
 crQUEUE_SEND_FROM_ISR(
                           xQueueHandle pxQueue,
                           void *pvItemToQueue,
                           portBASE_TYPE xCoRoutinePreviouslyWoken
                      )</pre><p>The macro's <a class="el" href="croutine_8h.xhtml#ac8eb0a81c5cf69de7e4edd73ce44a3be">crQUEUE_SEND_FROM_ISR()</a> and <a class="el" href="croutine_8h.xhtml#a9c0fa977ca69adbddb4811affa2a71f7">crQUEUE_RECEIVE_FROM_ISR()</a> are the co-routine equivalent to the <a class="el" href="queue_8h.xhtml#a2e8236e9af01eedcbc8b67a9cb56b1db">xQueueSendFromISR()</a> and <a class="el" href="queue_8h.xhtml#a38afa09a1f9a629cbf0f7d6929984fe3">xQueueReceiveFromISR()</a> functions used by tasks.</p>
<p><a class="el" href="croutine_8h.xhtml#ac8eb0a81c5cf69de7e4edd73ce44a3be">crQUEUE_SEND_FROM_ISR()</a> and <a class="el" href="croutine_8h.xhtml#a9c0fa977ca69adbddb4811affa2a71f7">crQUEUE_RECEIVE_FROM_ISR()</a> can only be used to pass data between a co-routine and and ISR, whereas <a class="el" href="queue_8h.xhtml#a2e8236e9af01eedcbc8b67a9cb56b1db">xQueueSendFromISR()</a> and <a class="el" href="queue_8h.xhtml#a38afa09a1f9a629cbf0f7d6929984fe3">xQueueReceiveFromISR()</a> can only be used to pass data between a task and and ISR.</p>
<p>crQUEUE_SEND_FROM_ISR can only be called from an ISR to send data to a queue that is being used from within a co-routine.</p>
<p>See the co-routine section of the WEB documentation for information on passing data between tasks and co-routines and between ISR's and co-routines.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">xQueue</td><td>The handle to the queue on which the item is to be posted.</td></tr>
    <tr><td class="paramname">pvItemToQueue</td><td>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</td></tr>
    <tr><td class="paramname">xCoRoutinePreviouslyWoken</td><td>This is included so an ISR can post onto the same queue multiple times from a single interrupt. The first call should always pass in pdFALSE. Subsequent calls should pass in the value returned from the previous call.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pdTRUE if a co-routine was woken by posting onto the queue. This is used by the ISR to determine if a context switch may be required following the ISR.</dd></dl>
<p>Example usage: </p><pre>
// A co-routine that blocks on a queue waiting for characters to be received.
static void vReceivingCoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
{
char cRxedChar;
portBASE_TYPE xResult;
<pre class="fragment">// All co-routines must start with a call to crSTART().
crSTART( xHandle );

for( ;; )
{
    // Wait for data to become available on the queue.  This assumes the
    // queue xCommsRxQueue has already been created!
    crQUEUE_RECEIVE( xHandle, xCommsRxQueue, &amp;uxLEDToFlash, portMAX_DELAY, &amp;xResult );

    // Was a character received?
    if( xResult == pdPASS )
    {
        // Process the character here.
    }
}

// All co-routines must end with a call to crEND().
crEND();
</pre>
}</pre><pre>// An ISR that uses a queue to send characters received on a serial port to
// a co-routine.
void vUART_ISR( void )
{
char cRxedChar;
portBASE_TYPE xCRWokenByPost = pdFALSE;
<pre class="fragment">// We loop around reading characters until there are none left in the UART.
while( UART_RX_REG_NOT_EMPTY() )
{
    // Obtain the character from the UART.
    cRxedChar = UART_RX_REG;

    // Post the character onto a queue.  xCRWokenByPost will be pdFALSE
    // the first time around the loop.  If the post causes a co-routine
    // to be woken (unblocked) then xCRWokenByPost will be set to pdTRUE.
    // In this manner we can ensure that if more than one co-routine is
    // blocked on the queue only one is woken by this ISR no matter how
    // many characters are posted to the queue.
    xCRWokenByPost = crQUEUE_SEND_FROM_ISR( xCommsRxQueue, &amp;cRxedChar, xCRWokenByPost );
}
</pre>
}</pre> </div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
