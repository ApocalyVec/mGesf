<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: Universal Synchronous Asynchronous</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Universal Synchronous Asynchronous</div>  </div>
</div><!--header-->
<div class="contents">

<p>Receiver Transmitter (USART)  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga5bcadc89cde78bdf6b072773956e7e29"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga5bcadc89cde78bdf6b072773956e7e29">US_WPMR_WPKEY_PASSWD</a>&#160;&#160;&#160;US_WPMR_WPKEY(0x555341U)</td></tr>
<tr class="separator:ga5bcadc89cde78bdf6b072773956e7e29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga967c1d77b088addb87a10e37a9e152f5"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga967c1d77b088addb87a10e37a9e152f5">MIN_CD_VALUE</a>&#160;&#160;&#160;0x01</td></tr>
<tr class="separator:ga967c1d77b088addb87a10e37a9e152f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4511c9483910ae81f28937bf1907dd1b"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga4511c9483910ae81f28937bf1907dd1b">MIN_CD_VALUE_SPI</a>&#160;&#160;&#160;0x04</td></tr>
<tr class="separator:ga4511c9483910ae81f28937bf1907dd1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaffb0be54a0e5aa710dfb17b3ede74a70"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaffb0be54a0e5aa710dfb17b3ede74a70">MAX_CD_VALUE</a>&#160;&#160;&#160;<a class="el" href="group___s_a_m_g55___u_s_a_r_t.xhtml#ga0b17f9efd8463ee64487114c44cf06dd">US_BRGR_CD_Msk</a></td></tr>
<tr class="separator:gaffb0be54a0e5aa710dfb17b3ede74a70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga421fe847f1b9d8ade1bf955ab1a2dea6"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga421fe847f1b9d8ade1bf955ab1a2dea6">HIGH_FRQ_SAMPLE_DIV</a>&#160;&#160;&#160;16</td></tr>
<tr class="separator:ga421fe847f1b9d8ade1bf955ab1a2dea6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafe512b69f3ab7ad2cdae5b2defd00eac"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gafe512b69f3ab7ad2cdae5b2defd00eac">LOW_FRQ_SAMPLE_DIV</a>&#160;&#160;&#160;8</td></tr>
<tr class="separator:gafe512b69f3ab7ad2cdae5b2defd00eac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga38be032d093b5478ab8d279ff1f8befe"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga38be032d093b5478ab8d279ff1f8befe">MAX_TRAN_GUARD_TIME</a>&#160;&#160;&#160;<a class="el" href="group___s_a_m_g55___u_s_a_r_t.xhtml#gaa008f1e11bc961b0f56ca7f6a6def9cf">US_TTGR_TG_Msk</a></td></tr>
<tr class="separator:ga38be032d093b5478ab8d279ff1f8befe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa8e49570158748728a0f717eac1261d9"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaa8e49570158748728a0f717eac1261d9">USART_PARITY_ERROR</a>&#160;&#160;&#160;5</td></tr>
<tr class="separator:gaa8e49570158748728a0f717eac1261d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga134a57d20403fa19f14072690909a018"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga134a57d20403fa19f14072690909a018">ISO7816_T_0</a>&#160;&#160;&#160;0</td></tr>
<tr class="separator:ga134a57d20403fa19f14072690909a018"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2466ec97f8257c58024fb21d634d65be"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga2466ec97f8257c58024fb21d634d65be">ISO7816_T_1</a>&#160;&#160;&#160;1</td></tr>
<tr class="separator:ga2466ec97f8257c58024fb21d634d65be"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gaafe097c01c082b270c1057722d524f5b"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaafe097c01c082b270c1057722d524f5b">usart_set_async_baudrate</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t baudrate, uint32_t ul_mck)</td></tr>
<tr class="memdesc:gaafe097c01c082b270c1057722d524f5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a clock divider(CD) and a fractional part (FP) for the USART asynchronous modes to generate a baudrate as close as possible to the baudrate set point.  <a href="#gaafe097c01c082b270c1057722d524f5b">More...</a><br /></td></tr>
<tr class="separator:gaafe097c01c082b270c1057722d524f5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6c9d28298b3db2195c7fb3ffe999678"><td class="memItemLeft" align="right" valign="top">static uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gac6c9d28298b3db2195c7fb3ffe999678">usart_set_sync_master_baudrate</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t baudrate, uint32_t ul_mck)</td></tr>
<tr class="memdesc:gac6c9d28298b3db2195c7fb3ffe999678"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a clock divider for the USART synchronous master modes to generate a baudrate as close as possible to the baudrate set point.  <a href="#gac6c9d28298b3db2195c7fb3ffe999678">More...</a><br /></td></tr>
<tr class="separator:gac6c9d28298b3db2195c7fb3ffe999678"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d4739357149c140c2e283a287158608"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga6d4739357149c140c2e283a287158608">usart_set_sync_slave_baudrate</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga6d4739357149c140c2e283a287158608"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select the SCK pin as the source of baud rate for the USART synchronous slave modes.  <a href="#ga6d4739357149c140c2e283a287158608">More...</a><br /></td></tr>
<tr class="separator:ga6d4739357149c140c2e283a287158608"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaae31ff0122d054b1a03f9adfba47995e"><td class="memItemLeft" align="right" valign="top">static uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaae31ff0122d054b1a03f9adfba47995e">usart_set_spi_master_baudrate</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t baudrate, uint32_t ul_mck)</td></tr>
<tr class="memdesc:gaae31ff0122d054b1a03f9adfba47995e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a clock divider (<em>CD</em>) for the USART SPI master mode to generate a baud rate as close as possible to the baud rate set point.  <a href="#gaae31ff0122d054b1a03f9adfba47995e">More...</a><br /></td></tr>
<tr class="separator:gaae31ff0122d054b1a03f9adfba47995e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4740fd3e308857e7d074802e08db1cbe"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga4740fd3e308857e7d074802e08db1cbe">usart_set_spi_slave_baudrate</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga4740fd3e308857e7d074802e08db1cbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select the SCK pin as the source of baudrate for the USART SPI slave mode.  <a href="#ga4740fd3e308857e7d074802e08db1cbe">More...</a><br /></td></tr>
<tr class="separator:ga4740fd3e308857e7d074802e08db1cbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6cb84f0297ddca62d4077f616efa5c5b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga6cb84f0297ddca62d4077f616efa5c5b">usart_reset</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga6cb84f0297ddca62d4077f616efa5c5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset the USART and disable TX and RX.  <a href="#ga6cb84f0297ddca62d4077f616efa5c5b">More...</a><br /></td></tr>
<tr class="separator:ga6cb84f0297ddca62d4077f616efa5c5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeef2121bcab41f9850e58c59fdc34d10"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaeef2121bcab41f9850e58c59fdc34d10">usart_init_rs232</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:gaeef2121bcab41f9850e58c59fdc34d10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in RS232 mode.  <a href="#gaeef2121bcab41f9850e58c59fdc34d10">More...</a><br /></td></tr>
<tr class="separator:gaeef2121bcab41f9850e58c59fdc34d10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8ea87f1c2b00747e7a5de5b36aa0cc71"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga8ea87f1c2b00747e7a5de5b36aa0cc71">usart_init_hw_handshaking</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga8ea87f1c2b00747e7a5de5b36aa0cc71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in hardware handshaking mode.  <a href="#ga8ea87f1c2b00747e7a5de5b36aa0cc71">More...</a><br /></td></tr>
<tr class="separator:ga8ea87f1c2b00747e7a5de5b36aa0cc71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6bd028774207fe19e370e77f0fdf820f"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga6bd028774207fe19e370e77f0fdf820f">usart_init_sync_master</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga6bd028774207fe19e370e77f0fdf820f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in SYNC mode and act as a master.  <a href="#ga6bd028774207fe19e370e77f0fdf820f">More...</a><br /></td></tr>
<tr class="separator:ga6bd028774207fe19e370e77f0fdf820f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7379a739d799d82f34da103d32757c1"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gad7379a739d799d82f34da103d32757c1">usart_init_sync_slave</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt)</td></tr>
<tr class="memdesc:gad7379a739d799d82f34da103d32757c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in SYNC mode and act as a slave.  <a href="#gad7379a739d799d82f34da103d32757c1">More...</a><br /></td></tr>
<tr class="separator:gad7379a739d799d82f34da103d32757c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7265d736a562d24e880c0c5e10c41a48"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga7265d736a562d24e880c0c5e10c41a48">usart_init_rs485</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga7265d736a562d24e880c0c5e10c41a48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in RS485 mode.  <a href="#ga7265d736a562d24e880c0c5e10c41a48">More...</a><br /></td></tr>
<tr class="separator:ga7265d736a562d24e880c0c5e10c41a48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga952a5fffe9547e48e5d1c74230786d78"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga952a5fffe9547e48e5d1c74230786d78">usart_init_irda</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga952a5fffe9547e48e5d1c74230786d78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in IrDA mode.  <a href="#ga952a5fffe9547e48e5d1c74230786d78">More...</a><br /></td></tr>
<tr class="separator:ga952a5fffe9547e48e5d1c74230786d78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga70edd599706d258d5a263181930619ae"><td class="memItemLeft" align="right" valign="top">static uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga70edd599706d258d5a263181930619ae">usart_set_iso7816_clock</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t clock, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga70edd599706d258d5a263181930619ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a clock divider (<em>CD</em>) for the USART ISO7816 mode to generate an ISO7816 clock as close as possible to the clock set point.  <a href="#ga70edd599706d258d5a263181930619ae">More...</a><br /></td></tr>
<tr class="separator:ga70edd599706d258d5a263181930619ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32c4c057c3d5961bb3d6977b8e72483b"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga32c4c057c3d5961bb3d6977b8e72483b">usart_init_iso7816</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structusart__iso7816__opt__t.xhtml">usart_iso7816_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga32c4c057c3d5961bb3d6977b8e72483b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in ISO7816 mode.  <a href="#ga32c4c057c3d5961bb3d6977b8e72483b">More...</a><br /></td></tr>
<tr class="separator:ga32c4c057c3d5961bb3d6977b8e72483b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7c516011cb7f9a4d59d173a8be206d19"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga7c516011cb7f9a4d59d173a8be206d19">usart_reset_iterations</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga7c516011cb7f9a4d59d173a8be206d19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset the ITERATION in US_CSR when the ISO7816 mode is enabled.  <a href="#ga7c516011cb7f9a4d59d173a8be206d19">More...</a><br /></td></tr>
<tr class="separator:ga7c516011cb7f9a4d59d173a8be206d19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad4bb30861c72801f19bb8fb0ac19362e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gad4bb30861c72801f19bb8fb0ac19362e">usart_reset_nack</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gad4bb30861c72801f19bb8fb0ac19362e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset NACK in US_CSR.  <a href="#gad4bb30861c72801f19bb8fb0ac19362e">More...</a><br /></td></tr>
<tr class="separator:gad4bb30861c72801f19bb8fb0ac19362e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab39cc4289bde563c4d58ecd22765319c"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gab39cc4289bde563c4d58ecd22765319c">usart_is_rx_buf_end</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gab39cc4289bde563c4d58ecd22765319c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if one receive buffer is filled.  <a href="#gab39cc4289bde563c4d58ecd22765319c">More...</a><br /></td></tr>
<tr class="separator:gab39cc4289bde563c4d58ecd22765319c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e7df5c46585d438d8886b4461d15d62"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga3e7df5c46585d438d8886b4461d15d62">usart_is_tx_buf_end</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga3e7df5c46585d438d8886b4461d15d62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if one transmit buffer is empty.  <a href="#ga3e7df5c46585d438d8886b4461d15d62">More...</a><br /></td></tr>
<tr class="separator:ga3e7df5c46585d438d8886b4461d15d62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga212169bdb555142fa879a1f3ed7b0fd7"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga212169bdb555142fa879a1f3ed7b0fd7">usart_is_rx_buf_full</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga212169bdb555142fa879a1f3ed7b0fd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if both receive buffers are full.  <a href="#ga212169bdb555142fa879a1f3ed7b0fd7">More...</a><br /></td></tr>
<tr class="separator:ga212169bdb555142fa879a1f3ed7b0fd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga911274fe177ba10bbd156ac1a212ae23"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga911274fe177ba10bbd156ac1a212ae23">usart_is_tx_buf_empty</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga911274fe177ba10bbd156ac1a212ae23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if both transmit buffers are empty.  <a href="#ga911274fe177ba10bbd156ac1a212ae23">More...</a><br /></td></tr>
<tr class="separator:ga911274fe177ba10bbd156ac1a212ae23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaddb54159a61d5b777ffcf99cd3914ca1"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaddb54159a61d5b777ffcf99cd3914ca1">usart_get_error_number</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaddb54159a61d5b777ffcf99cd3914ca1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the total number of errors that occur during an ISO7816 transfer.  <a href="#gaddb54159a61d5b777ffcf99cd3914ca1">More...</a><br /></td></tr>
<tr class="separator:gaddb54159a61d5b777ffcf99cd3914ca1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3725cfa2de4be9eceab8b0c36a2080a"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf3725cfa2de4be9eceab8b0c36a2080a">usart_init_spi_master</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structusart__spi__opt__t.xhtml">usart_spi_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:gaf3725cfa2de4be9eceab8b0c36a2080a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in SPI mode and act as a master.  <a href="#gaf3725cfa2de4be9eceab8b0c36a2080a">More...</a><br /></td></tr>
<tr class="separator:gaf3725cfa2de4be9eceab8b0c36a2080a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf42f05f73f1095fc7a2b28ebbf97bf4b"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf42f05f73f1095fc7a2b28ebbf97bf4b">usart_init_spi_slave</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structusart__spi__opt__t.xhtml">usart_spi_opt_t</a> *p_usart_opt)</td></tr>
<tr class="memdesc:gaf42f05f73f1095fc7a2b28ebbf97bf4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in SPI mode and act as a slave.  <a href="#gaf42f05f73f1095fc7a2b28ebbf97bf4b">More...</a><br /></td></tr>
<tr class="separator:gaf42f05f73f1095fc7a2b28ebbf97bf4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c3a4036f8b9b21f833a641b07b84f6c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga1c3a4036f8b9b21f833a641b07b84f6c">usart_enable_tx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga1c3a4036f8b9b21f833a641b07b84f6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable USART transmitter.  <a href="#ga1c3a4036f8b9b21f833a641b07b84f6c">More...</a><br /></td></tr>
<tr class="separator:ga1c3a4036f8b9b21f833a641b07b84f6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf12c50dd99d9b0e3e3719e840e05aaf6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf12c50dd99d9b0e3e3719e840e05aaf6">usart_disable_tx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaf12c50dd99d9b0e3e3719e840e05aaf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable USART transmitter.  <a href="#gaf12c50dd99d9b0e3e3719e840e05aaf6">More...</a><br /></td></tr>
<tr class="separator:gaf12c50dd99d9b0e3e3719e840e05aaf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga123b84a0d5be1cbf1a3c5bac4af3d27d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga123b84a0d5be1cbf1a3c5bac4af3d27d">usart_reset_tx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga123b84a0d5be1cbf1a3c5bac4af3d27d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Immediately stop and disable USART transmitter.  <a href="#ga123b84a0d5be1cbf1a3c5bac4af3d27d">More...</a><br /></td></tr>
<tr class="separator:ga123b84a0d5be1cbf1a3c5bac4af3d27d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga75f8c53d5b4c51d302970f94ec296115"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga75f8c53d5b4c51d302970f94ec296115">usart_set_tx_timeguard</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t timeguard)</td></tr>
<tr class="memdesc:ga75f8c53d5b4c51d302970f94ec296115"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure the transmit timeguard register.  <a href="#ga75f8c53d5b4c51d302970f94ec296115">More...</a><br /></td></tr>
<tr class="separator:ga75f8c53d5b4c51d302970f94ec296115"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fd617322d666621fee15501ae0de7c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga7fd617322d666621fee15501ae0de7c7">usart_enable_rx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga7fd617322d666621fee15501ae0de7c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable USART receiver.  <a href="#ga7fd617322d666621fee15501ae0de7c7">More...</a><br /></td></tr>
<tr class="separator:ga7fd617322d666621fee15501ae0de7c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad9c333a3706f3bfad6f9b74f30495879"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gad9c333a3706f3bfad6f9b74f30495879">usart_disable_rx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gad9c333a3706f3bfad6f9b74f30495879"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable USART receiver.  <a href="#gad9c333a3706f3bfad6f9b74f30495879">More...</a><br /></td></tr>
<tr class="separator:gad9c333a3706f3bfad6f9b74f30495879"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga86ad3a57b19fb497ef2271d6dc87c359"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga86ad3a57b19fb497ef2271d6dc87c359">usart_reset_rx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga86ad3a57b19fb497ef2271d6dc87c359"><td class="mdescLeft">&#160;</td><td class="mdescRight">Immediately stop and disable USART receiver.  <a href="#ga86ad3a57b19fb497ef2271d6dc87c359">More...</a><br /></td></tr>
<tr class="separator:ga86ad3a57b19fb497ef2271d6dc87c359"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6c93002d564e25a12975a7f0c6c1564b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga6c93002d564e25a12975a7f0c6c1564b">usart_set_rx_timeout</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t timeout)</td></tr>
<tr class="memdesc:ga6c93002d564e25a12975a7f0c6c1564b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure the receive timeout register.  <a href="#ga6c93002d564e25a12975a7f0c6c1564b">More...</a><br /></td></tr>
<tr class="separator:ga6c93002d564e25a12975a7f0c6c1564b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga33c4b214e790bf6b04c8867dd66c3336"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga33c4b214e790bf6b04c8867dd66c3336">usart_enable_interrupt</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_sources)</td></tr>
<tr class="memdesc:ga33c4b214e790bf6b04c8867dd66c3336"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable USART interrupts.  <a href="#ga33c4b214e790bf6b04c8867dd66c3336">More...</a><br /></td></tr>
<tr class="separator:ga33c4b214e790bf6b04c8867dd66c3336"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa3a3c3eb673f70359570302dcf1a5b6a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaa3a3c3eb673f70359570302dcf1a5b6a">usart_disable_interrupt</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_sources)</td></tr>
<tr class="memdesc:gaa3a3c3eb673f70359570302dcf1a5b6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable USART interrupts.  <a href="#gaa3a3c3eb673f70359570302dcf1a5b6a">More...</a><br /></td></tr>
<tr class="separator:gaa3a3c3eb673f70359570302dcf1a5b6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2a63720ac25579075bf9191c601c7ea"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf2a63720ac25579075bf9191c601c7ea">usart_get_interrupt_mask</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaf2a63720ac25579075bf9191c601c7ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read USART interrupt mask.  <a href="#gaf2a63720ac25579075bf9191c601c7ea">More...</a><br /></td></tr>
<tr class="separator:gaf2a63720ac25579075bf9191c601c7ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadedd154647a6401b9feab44a0620fea1"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gadedd154647a6401b9feab44a0620fea1">usart_get_status</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gadedd154647a6401b9feab44a0620fea1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get current status.  <a href="#gadedd154647a6401b9feab44a0620fea1">More...</a><br /></td></tr>
<tr class="separator:gadedd154647a6401b9feab44a0620fea1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e19efeb524c1fba4b962e72283dcc11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga4e19efeb524c1fba4b962e72283dcc11">usart_reset_status</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga4e19efeb524c1fba4b962e72283dcc11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).  <a href="#ga4e19efeb524c1fba4b962e72283dcc11">More...</a><br /></td></tr>
<tr class="separator:ga4e19efeb524c1fba4b962e72283dcc11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac81e3129ca9032294961167a86a1da5f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gac81e3129ca9032294961167a86a1da5f">usart_start_tx_break</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gac81e3129ca9032294961167a86a1da5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start transmission of a break.  <a href="#gac81e3129ca9032294961167a86a1da5f">More...</a><br /></td></tr>
<tr class="separator:gac81e3129ca9032294961167a86a1da5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf581748a222b09334b4e7b963eaccc0c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf581748a222b09334b4e7b963eaccc0c">usart_stop_tx_break</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaf581748a222b09334b4e7b963eaccc0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop transmission of a break.  <a href="#gaf581748a222b09334b4e7b963eaccc0c">More...</a><br /></td></tr>
<tr class="separator:gaf581748a222b09334b4e7b963eaccc0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga21b61657bfa8bc395dd4c5f05f531788"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga21b61657bfa8bc395dd4c5f05f531788">usart_start_rx_timeout</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga21b61657bfa8bc395dd4c5f05f531788"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start waiting for a character before clocking the timeout count.  <a href="#ga21b61657bfa8bc395dd4c5f05f531788">More...</a><br /></td></tr>
<tr class="separator:ga21b61657bfa8bc395dd4c5f05f531788"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga55533226a26ce5279457601bc995b9c5"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga55533226a26ce5279457601bc995b9c5">usart_send_address</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_addr)</td></tr>
<tr class="memdesc:ga55533226a26ce5279457601bc995b9c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">In Multidrop mode only, the next character written to the US_THR is sent with the address bit set.  <a href="#ga55533226a26ce5279457601bc995b9c5">More...</a><br /></td></tr>
<tr class="separator:ga55533226a26ce5279457601bc995b9c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d7a3fc36901ee31049c661066af6553"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga5d7a3fc36901ee31049c661066af6553">usart_restart_rx_timeout</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga5d7a3fc36901ee31049c661066af6553"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restart the receive timeout.  <a href="#ga5d7a3fc36901ee31049c661066af6553">More...</a><br /></td></tr>
<tr class="separator:ga5d7a3fc36901ee31049c661066af6553"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga790d8d33caa3f4d925f1ec143d6305ae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga790d8d33caa3f4d925f1ec143d6305ae">usart_drive_RTS_pin_low</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga790d8d33caa3f4d925f1ec143d6305ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Drive the pin RTS to 0.  <a href="#ga790d8d33caa3f4d925f1ec143d6305ae">More...</a><br /></td></tr>
<tr class="separator:ga790d8d33caa3f4d925f1ec143d6305ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga930438dce6fbe82394c706b775cf2f0a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga930438dce6fbe82394c706b775cf2f0a">usart_drive_RTS_pin_high</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga930438dce6fbe82394c706b775cf2f0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Drive the pin RTS to 1.  <a href="#ga930438dce6fbe82394c706b775cf2f0a">More...</a><br /></td></tr>
<tr class="separator:ga930438dce6fbe82394c706b775cf2f0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf29b2e7c010fb15a137cc647742dd7f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf29b2e7c010fb15a137cc647742dd7f7">usart_spi_force_chip_select</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaf29b2e7c010fb15a137cc647742dd7f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.  <a href="#gaf29b2e7c010fb15a137cc647742dd7f7">More...</a><br /></td></tr>
<tr class="separator:gaf29b2e7c010fb15a137cc647742dd7f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab5ecc0dc1577f065fda6afaaaa069a57"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gab5ecc0dc1577f065fda6afaaaa069a57">usart_spi_release_chip_select</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gab5ecc0dc1577f065fda6afaaaa069a57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.  <a href="#gab5ecc0dc1577f065fda6afaaaa069a57">More...</a><br /></td></tr>
<tr class="separator:gab5ecc0dc1577f065fda6afaaaa069a57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0b33a2b7a3115c29dd85565984f46b5"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gac0b33a2b7a3115c29dd85565984f46b5">usart_is_tx_ready</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gac0b33a2b7a3115c29dd85565984f46b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if Transmit is Ready.  <a href="#gac0b33a2b7a3115c29dd85565984f46b5">More...</a><br /></td></tr>
<tr class="separator:gac0b33a2b7a3115c29dd85565984f46b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac30ba4e208ac3928d05aa06ef22ac266"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gac30ba4e208ac3928d05aa06ef22ac266">usart_is_tx_empty</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gac30ba4e208ac3928d05aa06ef22ac266"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if Transmit Holding Register is empty.  <a href="#gac30ba4e208ac3928d05aa06ef22ac266">More...</a><br /></td></tr>
<tr class="separator:gac30ba4e208ac3928d05aa06ef22ac266"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f88f9b3e78b92b53016420c3594fcf6"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga9f88f9b3e78b92b53016420c3594fcf6">usart_is_rx_ready</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga9f88f9b3e78b92b53016420c3594fcf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the received data are ready.  <a href="#ga9f88f9b3e78b92b53016420c3594fcf6">More...</a><br /></td></tr>
<tr class="separator:ga9f88f9b3e78b92b53016420c3594fcf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa9593727b910df8c0e9c359c5d7004ec"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaa9593727b910df8c0e9c359c5d7004ec">usart_write</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t c)</td></tr>
<tr class="memdesc:gaa9593727b910df8c0e9c359c5d7004ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write to USART Transmit Holding Register.  <a href="#gaa9593727b910df8c0e9c359c5d7004ec">More...</a><br /></td></tr>
<tr class="separator:gaa9593727b910df8c0e9c359c5d7004ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace816375e1905a329cffd46e3ffd89b1"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gace816375e1905a329cffd46e3ffd89b1">usart_putchar</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t c)</td></tr>
<tr class="memdesc:gace816375e1905a329cffd46e3ffd89b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write to USART Transmit Holding Register.  <a href="#gace816375e1905a329cffd46e3ffd89b1">More...</a><br /></td></tr>
<tr class="separator:gace816375e1905a329cffd46e3ffd89b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafdee4a457c8cefe46e45ec63902a86c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gafdee4a457c8cefe46e45ec63902a86c7">usart_write_line</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const char *string)</td></tr>
<tr class="memdesc:gafdee4a457c8cefe46e45ec63902a86c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write one-line string through USART.  <a href="#gafdee4a457c8cefe46e45ec63902a86c7">More...</a><br /></td></tr>
<tr class="separator:gafdee4a457c8cefe46e45ec63902a86c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae2776f27eb9e4219bbc6245f41662fa9"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gae2776f27eb9e4219bbc6245f41662fa9">usart_read</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t *c)</td></tr>
<tr class="memdesc:gae2776f27eb9e4219bbc6245f41662fa9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read from USART Receive Holding Register.  <a href="#gae2776f27eb9e4219bbc6245f41662fa9">More...</a><br /></td></tr>
<tr class="separator:gae2776f27eb9e4219bbc6245f41662fa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga09984d6dcb9a64117a0a8c2e5c32a8ec"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga09984d6dcb9a64117a0a8c2e5c32a8ec">usart_getchar</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t *c)</td></tr>
<tr class="memdesc:ga09984d6dcb9a64117a0a8c2e5c32a8ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read from USART Receive Holding Register.  <a href="#ga09984d6dcb9a64117a0a8c2e5c32a8ec">More...</a><br /></td></tr>
<tr class="separator:ga09984d6dcb9a64117a0a8c2e5c32a8ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae309dfc5ea5e993434ea031e2ac616c4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_pdc.xhtml">Pdc</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gae309dfc5ea5e993434ea031e2ac616c4">usart_get_pdc_base</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gae309dfc5ea5e993434ea031e2ac616c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get USART PDC base address.  <a href="#gae309dfc5ea5e993434ea031e2ac616c4">More...</a><br /></td></tr>
<tr class="separator:gae309dfc5ea5e993434ea031e2ac616c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa74733b3e78a560568cc22708ac0d1be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaa74733b3e78a560568cc22708ac0d1be">usart_enable_writeprotect</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaa74733b3e78a560568cc22708ac0d1be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable write protect of USART registers.  <a href="#gaa74733b3e78a560568cc22708ac0d1be">More...</a><br /></td></tr>
<tr class="separator:gaa74733b3e78a560568cc22708ac0d1be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabdf1b8bf1b4da95d3a314c4916799e88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gabdf1b8bf1b4da95d3a314c4916799e88">usart_disable_writeprotect</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gabdf1b8bf1b4da95d3a314c4916799e88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable write protect of USART registers.  <a href="#gabdf1b8bf1b4da95d3a314c4916799e88">More...</a><br /></td></tr>
<tr class="separator:gabdf1b8bf1b4da95d3a314c4916799e88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga548d63d04cff612d9b9b628d1fdd98cb"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga548d63d04cff612d9b9b628d1fdd98cb">usart_get_writeprotect_status</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga548d63d04cff612d9b9b628d1fdd98cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get write protect status.  <a href="#ga548d63d04cff612d9b9b628d1fdd98cb">More...</a><br /></td></tr>
<tr class="separator:ga548d63d04cff612d9b9b628d1fdd98cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Receiver Transmitter (USART) </p>
<p>The Universal Synchronous Asynchronous Receiver Transceiver (USART) provides one full duplex universal synchronous asynchronous serial link. Data frame format is widely programmable (data length, parity, number of stop bits) to support a maximum of standards. The receiver implements parity error, framing error and overrun error detection. The receiver time-out enables handling variable-length frames and the transmitter timeguard facilitates communications with slow remote devices. Multidrop communications are also supported through address bit handling in reception and transmission. The driver supports the following modes: RS232, RS485, SPI, IrDA, ISO7816, MODEM, Hardware handshaking and LIN. </p>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="ga421fe847f1b9d8ade1bf955ab1a2dea6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga421fe847f1b9d8ade1bf955ab1a2dea6">&sect;&nbsp;</a></span>HIGH_FRQ_SAMPLE_DIV</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define HIGH_FRQ_SAMPLE_DIV&#160;&#160;&#160;16</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga134a57d20403fa19f14072690909a018"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga134a57d20403fa19f14072690909a018">&sect;&nbsp;</a></span>ISO7816_T_0</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ISO7816_T_0&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga2466ec97f8257c58024fb21d634d65be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2466ec97f8257c58024fb21d634d65be">&sect;&nbsp;</a></span>ISO7816_T_1</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ISO7816_T_1&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="gafe512b69f3ab7ad2cdae5b2defd00eac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafe512b69f3ab7ad2cdae5b2defd00eac">&sect;&nbsp;</a></span>LOW_FRQ_SAMPLE_DIV</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define LOW_FRQ_SAMPLE_DIV&#160;&#160;&#160;8</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="gaffb0be54a0e5aa710dfb17b3ede74a70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaffb0be54a0e5aa710dfb17b3ede74a70">&sect;&nbsp;</a></span>MAX_CD_VALUE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MAX_CD_VALUE&#160;&#160;&#160;<a class="el" href="group___s_a_m_g55___u_s_a_r_t.xhtml#ga0b17f9efd8463ee64487114c44cf06dd">US_BRGR_CD_Msk</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga38be032d093b5478ab8d279ff1f8befe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga38be032d093b5478ab8d279ff1f8befe">&sect;&nbsp;</a></span>MAX_TRAN_GUARD_TIME</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MAX_TRAN_GUARD_TIME&#160;&#160;&#160;<a class="el" href="group___s_a_m_g55___u_s_a_r_t.xhtml#gaa008f1e11bc961b0f56ca7f6a6def9cf">US_TTGR_TG_Msk</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga967c1d77b088addb87a10e37a9e152f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga967c1d77b088addb87a10e37a9e152f5">&sect;&nbsp;</a></span>MIN_CD_VALUE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MIN_CD_VALUE&#160;&#160;&#160;0x01</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga4511c9483910ae81f28937bf1907dd1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4511c9483910ae81f28937bf1907dd1b">&sect;&nbsp;</a></span>MIN_CD_VALUE_SPI</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MIN_CD_VALUE_SPI&#160;&#160;&#160;0x04</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga5bcadc89cde78bdf6b072773956e7e29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5bcadc89cde78bdf6b072773956e7e29">&sect;&nbsp;</a></span>US_WPMR_WPKEY_PASSWD</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define US_WPMR_WPKEY_PASSWD&#160;&#160;&#160;US_WPMR_WPKEY(0x555341U)</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="gaa8e49570158748728a0f717eac1261d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa8e49570158748728a0f717eac1261d9">&sect;&nbsp;</a></span>USART_PARITY_ERROR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define USART_PARITY_ERROR&#160;&#160;&#160;5</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="gaa3a3c3eb673f70359570302dcf1a5b6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa3a3c3eb673f70359570302dcf1a5b6a">&sect;&nbsp;</a></span>usart_disable_interrupt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_disable_interrupt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_sources</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable USART interrupts. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART peripheral. </td></tr>
    <tr><td class="paramname">ul_sources</td><td>Interrupt sources bit map. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gaa3a3c3eb673f70359570302dcf1a5b6a_icgraph.svg" width="558" height="114"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gad9c333a3706f3bfad6f9b74f30495879"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad9c333a3706f3bfad6f9b74f30495879">&sect;&nbsp;</a></span>usart_disable_rx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_disable_rx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable USART receiver. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gad9c333a3706f3bfad6f9b74f30495879_icgraph.svg" width="339" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gaf12c50dd99d9b0e3e3719e840e05aaf6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf12c50dd99d9b0e3e3719e840e05aaf6">&sect;&nbsp;</a></span>usart_disable_tx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_disable_tx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable USART transmitter. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gaf12c50dd99d9b0e3e3719e840e05aaf6_icgraph.svg" width="339" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gabdf1b8bf1b4da95d3a314c4916799e88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabdf1b8bf1b4da95d3a314c4916799e88">&sect;&nbsp;</a></span>usart_disable_writeprotect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_disable_writeprotect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable write protect of USART registers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gabdf1b8bf1b4da95d3a314c4916799e88_icgraph.svg" width="319" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga930438dce6fbe82394c706b775cf2f0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga930438dce6fbe82394c706b775cf2f0a">&sect;&nbsp;</a></span>usart_drive_RTS_pin_high()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_drive_RTS_pin_high </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Drive the pin RTS to 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga930438dce6fbe82394c706b775cf2f0a_icgraph.svg" width="316" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga790d8d33caa3f4d925f1ec143d6305ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga790d8d33caa3f4d925f1ec143d6305ae">&sect;&nbsp;</a></span>usart_drive_RTS_pin_low()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_drive_RTS_pin_low </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Drive the pin RTS to 0. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga33c4b214e790bf6b04c8867dd66c3336"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga33c4b214e790bf6b04c8867dd66c3336">&sect;&nbsp;</a></span>usart_enable_interrupt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_enable_interrupt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_sources</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable USART interrupts. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART peripheral. </td></tr>
    <tr><td class="paramname">ul_sources</td><td>Interrupt sources bit map. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga33c4b214e790bf6b04c8867dd66c3336_icgraph.svg" width="372" height="155"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga7fd617322d666621fee15501ae0de7c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7fd617322d666621fee15501ae0de7c7">&sect;&nbsp;</a></span>usart_enable_rx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_enable_rx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable USART receiver. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga7fd617322d666621fee15501ae0de7c7_icgraph.svg" width="336" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga1c3a4036f8b9b21f833a641b07b84f6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1c3a4036f8b9b21f833a641b07b84f6c">&sect;&nbsp;</a></span>usart_enable_tx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_enable_tx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable USART transmitter. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga1c3a4036f8b9b21f833a641b07b84f6c_icgraph.svg" width="336" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gaa74733b3e78a560568cc22708ac0d1be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa74733b3e78a560568cc22708ac0d1be">&sect;&nbsp;</a></span>usart_enable_writeprotect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_enable_writeprotect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable write protect of USART registers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaddb54159a61d5b777ffcf99cd3914ca1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaddb54159a61d5b777ffcf99cd3914ca1">&sect;&nbsp;</a></span>usart_get_error_number()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t usart_get_error_number </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the total number of errors that occur during an ISO7816 transfer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of errors that occurred. </dd></dl>

</div>
</div>
<a id="gaf2a63720ac25579075bf9191c601c7ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf2a63720ac25579075bf9191c601c7ea">&sect;&nbsp;</a></span>usart_get_interrupt_mask()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_get_interrupt_mask </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read USART interrupt mask. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART peripheral.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The interrupt mask value. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gaf2a63720ac25579075bf9191c601c7ea_icgraph.svg" width="363" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gae309dfc5ea5e993434ea031e2ac616c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae309dfc5ea5e993434ea031e2ac616c4">&sect;&nbsp;</a></span>usart_get_pdc_base()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_pdc.xhtml">Pdc</a>* usart_get_pdc_base </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get USART PDC base address. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a UART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>USART PDC registers base for PDC driver to access. </dd></dl>

</div>
</div>
<a id="gadedd154647a6401b9feab44a0620fea1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadedd154647a6401b9feab44a0620fea1">&sect;&nbsp;</a></span>usart_get_status()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_get_status </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get current status. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The current USART status. </dd></dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gadedd154647a6401b9feab44a0620fea1_icgraph.svg" width="312" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga548d63d04cff612d9b9b628d1fdd98cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga548d63d04cff612d9b9b628d1fdd98cb">&sect;&nbsp;</a></span>usart_get_writeprotect_status()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_get_writeprotect_status </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get write protect status. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>0 if no write protect violation occurred, or 16-bit write protect violation source. </dd></dl>

</div>
</div>
<a id="ga09984d6dcb9a64117a0a8c2e5c32a8ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga09984d6dcb9a64117a0a8c2e5c32a8ec">&sect;&nbsp;</a></span>usart_getchar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_getchar </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read from USART Receive Holding Register. </p>
<p>Before reading user should check if rx is ready.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">c</td><td>Pointer where the one-byte received data will be stored.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>Data has been received. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga8ea87f1c2b00747e7a5de5b36aa0cc71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8ea87f1c2b00747e7a5de5b36aa0cc71">&sect;&nbsp;</a></span>usart_init_hw_handshaking()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_init_hw_handshaking </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *&#160;</td>
          <td class="paramname"><em>p_usart_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure USART to work in hardware handshaking mode. </p>
<dl class="section note"><dt>Note</dt><dd>By default, the transmitter and receiver aren't enabled.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">p_usart_opt</td><td>Pointer to <a class="el" href="structsam__usart__opt__t.xhtml" title="micro definition for LIN mode of SAMV71 ">sam_usart_opt_t</a> instance. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga8ea87f1c2b00747e7a5de5b36aa0cc71_cgraph.svg" width="352" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga952a5fffe9547e48e5d1c74230786d78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga952a5fffe9547e48e5d1c74230786d78">&sect;&nbsp;</a></span>usart_init_irda()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_init_irda </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *&#160;</td>
          <td class="paramname"><em>p_usart_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure USART to work in IrDA mode. </p>
<dl class="section note"><dt>Note</dt><dd>By default, the transmitter and receiver aren't enabled.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">p_usart_opt</td><td>Pointer to <a class="el" href="structsam__usart__opt__t.xhtml" title="micro definition for LIN mode of SAMV71 ">sam_usart_opt_t</a> instance. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga952a5fffe9547e48e5d1c74230786d78_cgraph.svg" width="276" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga32c4c057c3d5961bb3d6977b8e72483b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga32c4c057c3d5961bb3d6977b8e72483b">&sect;&nbsp;</a></span>usart_init_iso7816()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_init_iso7816 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structusart__iso7816__opt__t.xhtml">usart_iso7816_opt_t</a> *&#160;</td>
          <td class="paramname"><em>p_usart_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure USART to work in ISO7816 mode. </p>
<dl class="section note"><dt>Note</dt><dd>By default, the transmitter and receiver aren't enabled.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">p_usart_opt</td><td>Pointer to <a class="el" href="structsam__usart__opt__t.xhtml" title="micro definition for LIN mode of SAMV71 ">sam_usart_opt_t</a> instance. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga32c4c057c3d5961bb3d6977b8e72483b_cgraph.svg" width="352" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gaeef2121bcab41f9850e58c59fdc34d10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaeef2121bcab41f9850e58c59fdc34d10">&sect;&nbsp;</a></span>usart_init_rs232()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_init_rs232 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *&#160;</td>
          <td class="paramname"><em>p_usart_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure USART to work in RS232 mode. </p>
<dl class="section note"><dt>Note</dt><dd>By default, the transmitter and receiver aren't enabled.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">p_usart_opt</td><td>Pointer to <a class="el" href="structsam__usart__opt__t.xhtml" title="micro definition for LIN mode of SAMV71 ">sam_usart_opt_t</a> instance. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gaeef2121bcab41f9850e58c59fdc34d10_cgraph.svg" width="348" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gaeef2121bcab41f9850e58c59fdc34d10_icgraph.svg" width="352" height="240"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga7265d736a562d24e880c0c5e10c41a48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7265d736a562d24e880c0c5e10c41a48">&sect;&nbsp;</a></span>usart_init_rs485()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_init_rs485 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *&#160;</td>
          <td class="paramname"><em>p_usart_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure USART to work in RS485 mode. </p>
<dl class="section note"><dt>Note</dt><dd>By default, the transmitter and receiver aren't enabled.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">p_usart_opt</td><td>Pointer to <a class="el" href="structsam__usart__opt__t.xhtml" title="micro definition for LIN mode of SAMV71 ">sam_usart_opt_t</a> instance. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga7265d736a562d24e880c0c5e10c41a48_cgraph.svg" width="288" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gaf3725cfa2de4be9eceab8b0c36a2080a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf3725cfa2de4be9eceab8b0c36a2080a">&sect;&nbsp;</a></span>usart_init_spi_master()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_init_spi_master </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structusart__spi__opt__t.xhtml">usart_spi_opt_t</a> *&#160;</td>
          <td class="paramname"><em>p_usart_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure USART to work in SPI mode and act as a master. </p>
<dl class="section note"><dt>Note</dt><dd>By default, the transmitter and receiver aren't enabled.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">p_usart_opt</td><td>Pointer to <a class="el" href="structsam__usart__opt__t.xhtml" title="micro definition for LIN mode of SAMV71 ">sam_usart_opt_t</a> instance. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gaf3725cfa2de4be9eceab8b0c36a2080a_cgraph.svg" width="352" height="104"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gaf42f05f73f1095fc7a2b28ebbf97bf4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf42f05f73f1095fc7a2b28ebbf97bf4b">&sect;&nbsp;</a></span>usart_init_spi_slave()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_init_spi_slave </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structusart__spi__opt__t.xhtml">usart_spi_opt_t</a> *&#160;</td>
          <td class="paramname"><em>p_usart_opt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure USART to work in SPI mode and act as a slave. </p>
<dl class="section note"><dt>Note</dt><dd>By default, the transmitter and receiver aren't enabled.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">p_usart_opt</td><td>Pointer to <a class="el" href="structsam__usart__opt__t.xhtml" title="micro definition for LIN mode of SAMV71 ">sam_usart_opt_t</a> instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gaf42f05f73f1095fc7a2b28ebbf97bf4b_cgraph.svg" width="368" height="256"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga6bd028774207fe19e370e77f0fdf820f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6bd028774207fe19e370e77f0fdf820f">&sect;&nbsp;</a></span>usart_init_sync_master()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_init_sync_master </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *&#160;</td>
          <td class="paramname"><em>p_usart_opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure USART to work in SYNC mode and act as a master. </p>
<dl class="section note"><dt>Note</dt><dd>By default, the transmitter and receiver aren't enabled.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">p_usart_opt</td><td>Pointer to <a class="el" href="structsam__usart__opt__t.xhtml" title="micro definition for LIN mode of SAMV71 ">sam_usart_opt_t</a> instance. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga6bd028774207fe19e370e77f0fdf820f_cgraph.svg" width="375" height="104"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gad7379a739d799d82f34da103d32757c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad7379a739d799d82f34da103d32757c1">&sect;&nbsp;</a></span>usart_init_sync_slave()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_init_sync_slave </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *&#160;</td>
          <td class="paramname"><em>p_usart_opt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure USART to work in SYNC mode and act as a slave. </p>
<dl class="section note"><dt>Note</dt><dd>By default, the transmitter and receiver aren't enabled.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">p_usart_opt</td><td>Pointer to <a class="el" href="structsam__usart__opt__t.xhtml" title="micro definition for LIN mode of SAMV71 ">sam_usart_opt_t</a> instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gad7379a739d799d82f34da103d32757c1_cgraph.svg" width="352" height="104"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gab39cc4289bde563c4d58ecd22765319c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab39cc4289bde563c4d58ecd22765319c">&sect;&nbsp;</a></span>usart_is_rx_buf_end()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_is_rx_buf_end </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if one receive buffer is filled. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">1</td><td>Receive is complete. </td></tr>
    <tr><td class="paramname">0</td><td>Receive is still pending. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga212169bdb555142fa879a1f3ed7b0fd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga212169bdb555142fa879a1f3ed7b0fd7">&sect;&nbsp;</a></span>usart_is_rx_buf_full()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_is_rx_buf_full </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if both receive buffers are full. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">1</td><td>Receive buffers are full. </td></tr>
    <tr><td class="paramname">0</td><td>Receive buffers are not full. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga9f88f9b3e78b92b53016420c3594fcf6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9f88f9b3e78b92b53016420c3594fcf6">&sect;&nbsp;</a></span>usart_is_rx_ready()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_is_rx_ready </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the received data are ready. </p>
<p>Check if Data have been received and loaded into USART_RHR.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">1</td><td>Some data has been received. </td></tr>
    <tr><td class="paramname">0</td><td>No data has been received. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga9f88f9b3e78b92b53016420c3594fcf6_icgraph.svg" width="308" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga911274fe177ba10bbd156ac1a212ae23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga911274fe177ba10bbd156ac1a212ae23">&sect;&nbsp;</a></span>usart_is_tx_buf_empty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_is_tx_buf_empty </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if both transmit buffers are empty. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">1</td><td>Transmit buffers are empty. </td></tr>
    <tr><td class="paramname">0</td><td>Transmit buffers are not empty. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga3e7df5c46585d438d8886b4461d15d62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3e7df5c46585d438d8886b4461d15d62">&sect;&nbsp;</a></span>usart_is_tx_buf_end()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_is_tx_buf_end </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if one transmit buffer is empty. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">1</td><td>Transmit is complete. </td></tr>
    <tr><td class="paramname">0</td><td>Transmit is still pending. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gac30ba4e208ac3928d05aa06ef22ac266"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac30ba4e208ac3928d05aa06ef22ac266">&sect;&nbsp;</a></span>usart_is_tx_empty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_is_tx_empty </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if Transmit Holding Register is empty. </p>
<p>Check if the last data written in USART_THR have been loaded in TSR and the last data loaded in TSR have been transmitted.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">1</td><td>Transmitter is empty. </td></tr>
    <tr><td class="paramname">0</td><td>Transmitter is not empty. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gac0b33a2b7a3115c29dd85565984f46b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac0b33a2b7a3115c29dd85565984f46b5">&sect;&nbsp;</a></span>usart_is_tx_ready()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_is_tx_ready </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if Transmit is Ready. </p>
<p>Check if data have been loaded in USART_THR and are waiting to be loaded into the Transmit Shift Register (TSR).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">1</td><td>No data is in the Transmit Holding Register. </td></tr>
    <tr><td class="paramname">0</td><td>There is data in the Transmit Holding Register. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gace816375e1905a329cffd46e3ffd89b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gace816375e1905a329cffd46e3ffd89b1">&sect;&nbsp;</a></span>usart_putchar()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_putchar </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write to USART Transmit Holding Register. </p>
<dl class="section note"><dt>Note</dt><dd>Before writing user should check if tx is ready (or empty).</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">c</td><td>Data to be sent.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gace816375e1905a329cffd46e3ffd89b1_icgraph.svg" width="272" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gae2776f27eb9e4219bbc6245f41662fa9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae2776f27eb9e4219bbc6245f41662fa9">&sect;&nbsp;</a></span>usart_read()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_read </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read from USART Receive Holding Register. </p>
<dl class="section note"><dt>Note</dt><dd>Before reading user should check if rx is ready.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">c</td><td>Pointer where the one-byte received data will be stored.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>if no data is available or errors. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gae2776f27eb9e4219bbc6245f41662fa9_icgraph.svg" width="280" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga6cb84f0297ddca62d4077f616efa5c5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6cb84f0297ddca62d4077f616efa5c5b">&sect;&nbsp;</a></span>usart_reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_reset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reset the USART and disable TX and RX. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga6cb84f0297ddca62d4077f616efa5c5b_cgraph.svg" width="319" height="240"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga6cb84f0297ddca62d4077f616efa5c5b_icgraph.svg" width="303" height="291"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga7c516011cb7f9a4d59d173a8be206d19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7c516011cb7f9a4d59d173a8be206d19">&sect;&nbsp;</a></span>usart_reset_iterations()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_reset_iterations </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reset the ITERATION in US_CSR when the ISO7816 mode is enabled. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gad4bb30861c72801f19bb8fb0ac19362e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gad4bb30861c72801f19bb8fb0ac19362e">&sect;&nbsp;</a></span>usart_reset_nack()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_reset_nack </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reset NACK in US_CSR. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga86ad3a57b19fb497ef2271d6dc87c359"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga86ad3a57b19fb497ef2271d6dc87c359">&sect;&nbsp;</a></span>usart_reset_rx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_reset_rx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Immediately stop and disable USART receiver. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga86ad3a57b19fb497ef2271d6dc87c359_icgraph.svg" width="251" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga4e19efeb524c1fba4b962e72283dcc11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4e19efeb524c1fba4b962e72283dcc11">&sect;&nbsp;</a></span>usart_reset_status()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_reset_status </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga4e19efeb524c1fba4b962e72283dcc11_icgraph.svg" width="324" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga123b84a0d5be1cbf1a3c5bac4af3d27d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga123b84a0d5be1cbf1a3c5bac4af3d27d">&sect;&nbsp;</a></span>usart_reset_tx()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_reset_tx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Immediately stop and disable USART transmitter. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga123b84a0d5be1cbf1a3c5bac4af3d27d_icgraph.svg" width="251" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga5d7a3fc36901ee31049c661066af6553"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5d7a3fc36901ee31049c661066af6553">&sect;&nbsp;</a></span>usart_restart_rx_timeout()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_restart_rx_timeout </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Restart the receive timeout. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga55533226a26ce5279457601bc995b9c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga55533226a26ce5279457601bc995b9c5">&sect;&nbsp;</a></span>usart_send_address()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_send_address </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_addr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>In Multidrop mode only, the next character written to the US_THR is sent with the address bit set. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">ul_addr</td><td>The address to be sent out.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga55533226a26ce5279457601bc995b9c5_cgraph.svg" width="283" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="gaafe097c01c082b270c1057722d524f5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaafe097c01c082b270c1057722d524f5b">&sect;&nbsp;</a></span>usart_set_async_baudrate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_set_async_baudrate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>baudrate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate a clock divider(CD) and a fractional part (FP) for the USART asynchronous modes to generate a baudrate as close as possible to the baudrate set point. </p>
<dl class="section note"><dt>Note</dt><dd>Baud rate calculation: Baudrate = ul_mck/(Over * (CD + FP/8)) (Over being 16 or 8). The maximal oversampling is selected if it allows to generate a baudrate close to the set point.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">baudrate</td><td>Baud rate set point. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>Baud rate is successfully initialized. </td></tr>
    <tr><td class="paramname">1</td><td>Baud rate set point is out of range for the given input clock frequency. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gaafe097c01c082b270c1057722d524f5b_icgraph.svg" width="578" height="190"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga70edd599706d258d5a263181930619ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga70edd599706d258d5a263181930619ae">&sect;&nbsp;</a></span>usart_set_iso7816_clock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint32_t usart_set_iso7816_clock </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>clock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate a clock divider (<em>CD</em>) for the USART ISO7816 mode to generate an ISO7816 clock as close as possible to the clock set point. </p>
<dl class="section note"><dt>Note</dt><dd>ISO7816 clock calculation: Clock = ul_mck / cd</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">clock</td><td>ISO7816 clock set point. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>ISO7816 clock is successfully initialized. </td></tr>
    <tr><td class="paramname">1</td><td>ISO7816 clock set point is out of range for the given input clock frequency. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga70edd599706d258d5a263181930619ae_icgraph.svg" width="352" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga6c93002d564e25a12975a7f0c6c1564b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6c93002d564e25a12975a7f0c6c1564b">&sect;&nbsp;</a></span>usart_set_rx_timeout()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_set_rx_timeout </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>timeout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure the receive timeout register. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">timeout</td><td>The value of receive timeout. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga6c93002d564e25a12975a7f0c6c1564b_icgraph.svg" width="366" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gaae31ff0122d054b1a03f9adfba47995e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaae31ff0122d054b1a03f9adfba47995e">&sect;&nbsp;</a></span>usart_set_spi_master_baudrate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint32_t usart_set_spi_master_baudrate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>baudrate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate a clock divider (<em>CD</em>) for the USART SPI master mode to generate a baud rate as close as possible to the baud rate set point. </p>
<dl class="section note"><dt>Note</dt><dd>Baud rate calculation: <img class="formulaInl" alt="$ Baudrate = \frac{SelectedClock}{CD} $" src="form_2.png"/>.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">baudrate</td><td>Baud rate set point. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>Baud rate is successfully initialized. </td></tr>
    <tr><td class="paramname">1</td><td>Baud rate set point is out of range for the given input clock frequency. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gaae31ff0122d054b1a03f9adfba47995e_icgraph.svg" width="352" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga4740fd3e308857e7d074802e08db1cbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4740fd3e308857e7d074802e08db1cbe">&sect;&nbsp;</a></span>usart_set_spi_slave_baudrate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void usart_set_spi_slave_baudrate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select the SCK pin as the source of baudrate for the USART SPI slave mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga4740fd3e308857e7d074802e08db1cbe_icgraph.svg" width="330" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gac6c9d28298b3db2195c7fb3ffe999678"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac6c9d28298b3db2195c7fb3ffe999678">&sect;&nbsp;</a></span>usart_set_sync_master_baudrate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static uint32_t usart_set_sync_master_baudrate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>baudrate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculate a clock divider for the USART synchronous master modes to generate a baudrate as close as possible to the baudrate set point. </p>
<dl class="section note"><dt>Note</dt><dd>Synchronous baudrate calculation: baudrate = ul_mck / cd</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">baudrate</td><td>Baud rate set point. </td></tr>
    <tr><td class="paramname">ul_mck</td><td>USART module input clock frequency.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>Baud rate is successfully initialized. </td></tr>
    <tr><td class="paramname">1</td><td>Baud rate set point is out of range for the given input clock frequency. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gac6c9d28298b3db2195c7fb3ffe999678_icgraph.svg" width="375" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga6d4739357149c140c2e283a287158608"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga6d4739357149c140c2e283a287158608">&sect;&nbsp;</a></span>usart_set_sync_slave_baudrate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void usart_set_sync_slave_baudrate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Select the SCK pin as the source of baud rate for the USART synchronous slave modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga6d4739357149c140c2e283a287158608_icgraph.svg" width="352" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ga75f8c53d5b4c51d302970f94ec296115"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga75f8c53d5b4c51d302970f94ec296115">&sect;&nbsp;</a></span>usart_set_tx_timeguard()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_set_tx_timeguard </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>timeguard</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure the transmit timeguard register. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">timeguard</td><td>The value of transmit timeguard. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaf29b2e7c010fb15a137cc647742dd7f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf29b2e7c010fb15a137cc647742dd7f7">&sect;&nbsp;</a></span>usart_spi_force_chip_select()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_spi_force_chip_select </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Drive the slave select line NSS (RTS pin) to 0 in SPI master mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gab5ecc0dc1577f065fda6afaaaa069a57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gab5ecc0dc1577f065fda6afaaaa069a57">&sect;&nbsp;</a></span>usart_spi_release_chip_select()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_spi_release_chip_select </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Drive the slave select line NSS (RTS pin) to 1 in SPI master mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga21b61657bfa8bc395dd4c5f05f531788"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga21b61657bfa8bc395dd4c5f05f531788">&sect;&nbsp;</a></span>usart_start_rx_timeout()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_start_rx_timeout </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Start waiting for a character before clocking the timeout count. </p>
<p>Reset the status bit TIMEOUT in US_CSR.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_ga21b61657bfa8bc395dd4c5f05f531788_icgraph.svg" width="374" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gac81e3129ca9032294961167a86a1da5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac81e3129ca9032294961167a86a1da5f">&sect;&nbsp;</a></span>usart_start_tx_break()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_start_tx_break </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Start transmission of a break. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaf581748a222b09334b4e7b963eaccc0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf581748a222b09334b4e7b963eaccc0c">&sect;&nbsp;</a></span>usart_stop_tx_break()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_stop_tx_break </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stop transmission of a break. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaa9593727b910df8c0e9c359c5d7004ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa9593727b910df8c0e9c359c5d7004ec">&sect;&nbsp;</a></span>usart_write()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t usart_write </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write to USART Transmit Holding Register. </p>
<dl class="section note"><dt>Note</dt><dd>Before writing user should check if tx is ready (or empty).</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">c</td><td>Data to be sent.</td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">0</td><td>on success. </td></tr>
    <tr><td class="paramname">1</td><td>on failure. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gaa9593727b910df8c0e9c359c5d7004ec_icgraph.svg" width="283" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="gafdee4a457c8cefe46e45ec63902a86c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gafdee4a457c8cefe46e45ec63902a86c7">&sect;&nbsp;</a></span>usart_write_line()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void usart_write_line </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_usart.xhtml">Usart</a> *&#160;</td>
          <td class="paramname"><em>p_usart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>string</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write one-line string through USART. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_usart</td><td>Pointer to a USART instance. </td></tr>
    <tr><td class="paramname">string</td><td>Pointer to one-line string to be sent. </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__usart__group_gafdee4a457c8cefe46e45ec63902a86c7_cgraph.svg" width="272" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
