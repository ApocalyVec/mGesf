<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: examples/atmel_samg55/src/ASF/common/utils/stdio/stdio_serial/stdio_serial.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="dir_0e96b936377161858012b6f31c3bd790.xhtml">atmel_samg55</a></li><li class="navelem"><a class="el" href="dir_0ae219bfaa679f3dbaaacda5fb614d9c.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_67951177d7f5e66661a526635115739c.xhtml">ASF</a></li><li class="navelem"><a class="el" href="dir_a10c1905b5eb133c53d9054314a624ae.xhtml">common</a></li><li class="navelem"><a class="el" href="dir_1979e3e37ad559ebf144124a44cbf236.xhtml">utils</a></li><li class="navelem"><a class="el" href="dir_08ebecd2583ee869ad1967eacee99f3f.xhtml">stdio</a></li><li class="navelem"><a class="el" href="dir_f4d5519c1857f85796545d79433f5888.xhtml">stdio_serial</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">stdio_serial.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="stdio__serial_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * Support and FAQ: visit &lt;a href=&quot;http://www.atmel.com/design-support/&quot;&gt;Atmel Support&lt;/a&gt;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#ifndef _STDIO_SERIAL_H_</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#define _STDIO_SERIAL_H_</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="compiler_8h.xhtml">compiler.h</a>&quot;</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#ifndef SAMD20</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor"># include &quot;sysclk.h&quot;</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="serial_8h.xhtml">serial.h</a>&quot;</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#if (XMEGA || MEGA_RF) &amp;&amp; defined(__GNUC__)</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">extern</span> <span class="keywordtype">int</span> _write (<span class="keywordtype">char</span> c, <span class="keywordtype">int</span> *f);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">extern</span> <span class="keywordtype">int</span> _read (<span class="keywordtype">int</span> *f);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="keywordtype">void</span> *<span class="keyword">volatile</span> <a class="code" href="group__group__common__utils__stdio__stdio__serial.xhtml#gad4163ee0eaa09db3b42c367fd768e737">stdio_base</a>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">extern</span> int (*<a class="code" href="group__group__common__utils__stdio__stdio__serial.xhtml#gab88750c764f1e24b95134201373aba70">ptr_put</a>)(<span class="keywordtype">void</span> <span class="keyword">volatile</span>*, char);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">extern</span> void (*<a class="code" href="group__group__common__utils__stdio__stdio__serial.xhtml#ga7332be07af3c0ab09d41a9b0b97efbe8">ptr_get</a>)(<span class="keywordtype">void</span> <span class="keyword">volatile</span>*, <span class="keywordtype">char</span>*);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="group__group__common__utils__stdio__stdio__serial.xhtml#ga69a6d76cd00643343f3839b6c3e68cd9">   92</a></span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="group__group__common__utils__stdio__stdio__serial.xhtml#ga69a6d76cd00643343f3839b6c3e68cd9">stdio_serial_init</a>(<span class="keyword">volatile</span> <span class="keywordtype">void</span> *usart, <span class="keyword">const</span> <a class="code" href="structuart__rs232__options.xhtml">usart_serial_options_t</a> *opt)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="group__group__common__utils__stdio__stdio__serial.xhtml#gad4163ee0eaa09db3b42c367fd768e737">stdio_base</a> = (<span class="keywordtype">void</span> *)usart;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="group__group__common__utils__stdio__stdio__serial.xhtml#gab88750c764f1e24b95134201373aba70">ptr_put</a> = (int (*)(<span class="keywordtype">void</span> <span class="keyword">volatile</span>*,char))&amp;<a class="code" href="uart__serial_8h.xhtml#a0d680ac290784fa93f42838262bd072f">usart_serial_putchar</a>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="group__group__common__utils__stdio__stdio__serial.xhtml#ga7332be07af3c0ab09d41a9b0b97efbe8">ptr_get</a> = (void (*)(<span class="keywordtype">void</span> <span class="keyword">volatile</span>*,<span class="keywordtype">char</span>*))&amp;<a class="code" href="uart__serial_8h.xhtml#ac3d539ff8bb9e9d795a6ac83cf697092">usart_serial_getchar</a>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor"># if (XMEGA || MEGA_RF)</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="uart__serial_8h.xhtml#a9b7530c23e7cf03a4542e50d276f677f">usart_serial_init</a>((USART_t *)usart,opt);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor"># elif UC3</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="uart__serial_8h.xhtml#a9b7530c23e7cf03a4542e50d276f677f">usart_serial_init</a>(usart,(<a class="code" href="structuart__rs232__options.xhtml">usart_serial_options_t</a> *)opt);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor"># elif SAM</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="uart__serial_8h.xhtml#a9b7530c23e7cf03a4542e50d276f677f">usart_serial_init</a>((<a class="code" href="struct_usart.xhtml">Usart</a> *)usart,(<a class="code" href="structuart__rs232__options.xhtml">usart_serial_options_t</a> *)opt);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor"># else</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">#  error Unsupported chip type</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor"># endif</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor"># if defined(__GNUC__)</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#  if (XMEGA || MEGA_RF)</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// For AVR GCC libc print redirection uses fdevopen.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    fdevopen((<span class="keywordtype">int</span> (*)(<span class="keywordtype">char</span>, FILE*))(_write),(<span class="keywordtype">int</span> (*)(FILE*))(_read));</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#  endif</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">#  if UC3 || SAM</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// For AVR32 and SAM GCC</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Specify that stdout and stdin should not be buffered.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    setbuf(stdout, NULL);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    setbuf(stdin, NULL);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Note: Already the case in IAR&#39;s Normal DLIB default configuration</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// and AVR GCC library:</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// - printf() emits one character at a time.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// - getchar() requests only 1 byte to exit.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#  endif</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor"># endif</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">#endif  // _STDIO_SERIAL_H_</span></div><div class="ttc" id="struct_usart_xhtml"><div class="ttname"><a href="struct_usart.xhtml">Usart</a></div><div class="ttdoc">Usart hardware registers. </div><div class="ttdef"><b>Definition:</b> usart.h:56</div></div>
<div class="ttc" id="uart__serial_8h_xhtml_ac3d539ff8bb9e9d795a6ac83cf697092"><div class="ttname"><a href="uart__serial_8h.xhtml#ac3d539ff8bb9e9d795a6ac83cf697092">usart_serial_getchar</a></div><div class="ttdeci">static void usart_serial_getchar(usart_if p_usart, uint8_t *data)</div><div class="ttdoc">Waits until a character is received, and returns it. </div><div class="ttdef"><b>Definition:</b> uart_serial.h:479</div></div>
<div class="ttc" id="uart__serial_8h_xhtml_a9b7530c23e7cf03a4542e50d276f677f"><div class="ttname"><a href="uart__serial_8h.xhtml#a9b7530c23e7cf03a4542e50d276f677f">usart_serial_init</a></div><div class="ttdeci">static void usart_serial_init(usart_if p_usart, usart_serial_options_t *opt)</div><div class="ttdoc">Initializes the Usart in master mode. </div><div class="ttdef"><b>Definition:</b> uart_serial.h:97</div></div>
<div class="ttc" id="group__group__common__utils__stdio__stdio__serial_xhtml_gab88750c764f1e24b95134201373aba70"><div class="ttname"><a href="group__group__common__utils__stdio__stdio__serial.xhtml#gab88750c764f1e24b95134201373aba70">ptr_put</a></div><div class="ttdeci">int(* ptr_put)(void volatile *, char)</div><div class="ttdoc">Pointer to the external low level write function. </div><div class="ttdef"><b>Definition:</b> write.c:57</div></div>
<div class="ttc" id="compiler_8h_xhtml"><div class="ttname"><a href="compiler_8h.xhtml">compiler.h</a></div><div class="ttdoc">Commonly used includes, types and macros. </div></div>
<div class="ttc" id="structuart__rs232__options_xhtml"><div class="ttname"><a href="structuart__rs232__options.xhtml">uart_rs232_options</a></div><div class="ttdoc">Input parameters when initializing RS232 and similar modes. </div><div class="ttdef"><b>Definition:</b> uart_serial.h:68</div></div>
<div class="ttc" id="uart__serial_8h_xhtml_a0d680ac290784fa93f42838262bd072f"><div class="ttname"><a href="uart__serial_8h.xhtml#a0d680ac290784fa93f42838262bd072f">usart_serial_putchar</a></div><div class="ttdeci">static int usart_serial_putchar(usart_if p_usart, const uint8_t c)</div><div class="ttdoc">Sends a character with the USART. </div><div class="ttdef"><b>Definition:</b> uart_serial.h:379</div></div>
<div class="ttc" id="group__group__common__utils__stdio__stdio__serial_xhtml_gad4163ee0eaa09db3b42c367fd768e737"><div class="ttname"><a href="group__group__common__utils__stdio__stdio__serial.xhtml#gad4163ee0eaa09db3b42c367fd768e737">stdio_base</a></div><div class="ttdeci">volatile void *volatile stdio_base</div><div class="ttdoc">Pointer to the base of the USART module instance to use for stdio. </div><div class="ttdef"><b>Definition:</b> write.c:56</div></div>
<div class="ttc" id="group__group__common__utils__stdio__stdio__serial_xhtml_ga69a6d76cd00643343f3839b6c3e68cd9"><div class="ttname"><a href="group__group__common__utils__stdio__stdio__serial.xhtml#ga69a6d76cd00643343f3839b6c3e68cd9">stdio_serial_init</a></div><div class="ttdeci">static void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)</div><div class="ttdoc">Initializes the stdio in Serial Mode. </div><div class="ttdef"><b>Definition:</b> stdio_serial.h:92</div></div>
<div class="ttc" id="group__group__common__utils__stdio__stdio__serial_xhtml_ga7332be07af3c0ab09d41a9b0b97efbe8"><div class="ttname"><a href="group__group__common__utils__stdio__stdio__serial.xhtml#ga7332be07af3c0ab09d41a9b0b97efbe8">ptr_get</a></div><div class="ttdeci">void(* ptr_get)(void volatile *, char *)</div><div class="ttdoc">Pointer to the external low level read function. </div><div class="ttdef"><b>Definition:</b> read.c:60</div></div>
<div class="ttc" id="serial_8h_xhtml"><div class="ttname"><a href="serial_8h.xhtml">serial.h</a></div><div class="ttdoc">Serial Mode management. </div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
