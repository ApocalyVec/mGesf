<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: XeThru Module Communication Protocol</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">XeThru Module Communication Protocol </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>This document describes the serial protocol used by the XeThru sensor modules.</p>
<p>Version:</p><ul>
<li>Firmware version 1.1.4.</li>
<li>Document revision: A</li>
</ul>
<h2>Notation</h2>
<p>The following notation is used in this document:</p>
<div class="fragment"><div class="line">&lt;X&gt; = Single byte</div><div class="line">[X] = Multiple bytes</div><div class="line">[“abc”] = [0x61,0x62,0x63] = Ascii text</div><div class="line">[X(i)] = 32 bit Integer, 4 bytes</div><div class="line">[X(f)] = 32 bit Float, 4 bytes</div></div><!-- fragment --><h2>Protocol format</h2>
<p>Binary protocol using flag bytes and escaping.</p>
<p>Example: <code>&lt;Start&gt; + [Data] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<table class="doxtable">
<tr>
<th>Flag </th><th>bytes  </th></tr>
<tr>
<td><code>&lt;Start&gt;</code> </td><td>0x7D </td></tr>
<tr>
<td><code>&lt;End&gt;</code> </td><td>0x7E </td></tr>
<tr>
<td><code>&lt;Esc&gt;</code> </td><td>0x7F </td></tr>
</table>
<h3>Byte ordering</h3>
<p>The XeThru serial protocol assumes litle-endian byte order.</p>
<h3>Data escaping</h3>
<p>Escaping means that if the escape byte occurs in data, the next byte is not <code>&lt;Start&gt;</code>, <code>&lt;End&gt;</code> or <code>&lt;Esc&gt;</code>, but intended byte with same value as flags.</p>
<p>Example: <code>0x7D + 0x10 + 0x7F + 0x7E + 0x04 + 0xFF + 0x7E</code></p>
<p>Here the byte 0x7E in the middle is intended, and should not be read as a &lt;Start&gt; flag. The 0x7E byte is prepended with the escape byte 0x7F. After parsing for escape bytes, the data becomes:</p>
<p><code>0x7D + 0x10 + 0x7E + 0x04 + 0xFF + 0x7E</code></p>
<h3>Checksum</h3>
<p>Calculated by XOR’ing all bytes from <code>&lt;Start&gt; + [Data]</code>. Note that the CRC is done after escape bytes is removed. This means that CRC is also calculated before adding escape bytes.</p>
<h2>How it works</h2>
<p>When powering up the sensor module for the first time, it enters an idle mode. In this mode, the user can choose module behaviour by loading the desired application. After loading the application, it can be configured by sending application level commands. Finally, after configuring the application, the user can send a command to start it.</p>
<p>Next time the module is powered, it will automatically load previous configuration and resume operation.</p>
<p>If you want to change sensor module behaviour, reset the module and start again. Once the application is running, it is not possible to change parameters or application without performing a reset first.</p>
<p>Typical configuration workflow:</p>
<p><code>Reset module --&gt; Idle mode --&gt; Load application --&gt; Load parameters --&gt; Run application</code></p>
<h4>USB connection</h4>
<p>When connecting to the module directly using USB, use the following procedure to ensure proper behaviour:</p>
<ol type="1">
<li>Reset module. Wait for ACK and immediately disconnect from the virtual serial port provided by the USB.</li>
<li>Module enters Idle mode</li>
<li>Load application</li>
<li>Load parameters</li>
<li>Run application</li>
</ol>
<p>See sections on <code>Reset module</code> and <code>Ping</code> for more information.</p>
<h2>Module level</h2>
<p>Commands that control the module at a top level.</p>
<h3>Reset module</h3>
<p>Use this command to completely reset the sensor module. After the module has responded with ACK, it will wait for 0.5 seconds before it actually starts the reset procedure. This gives the host time to disconnect from the serial connection prior to the module reset, which is necessary when the USB interface is used.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_MOD_RESET&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_MOD_RESET </td><td>0x22 </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<p>After the module resets, it sends a set of system messages to inform the host about the bootup status. At first startup, the XTS_SPRS_BOOTING message is sent. Then, after the module booting sequence is completed and the module is ready to accept further commands, the XTS_SPRS_READY command is issued.</p>
<p>Message: <code>&lt;Start&gt; + &lt;XTS_SPR_SYSTEM&gt; + [Responsecode(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPR_SYSTEM </td><td>0x30 </td></tr>
</table>
<table class="doxtable">
<tr>
<th>Responsecode </th><th>Value  </th></tr>
<tr>
<td>XTS_SPRS_BOOTING </td><td>0x10 </td></tr>
<tr>
<td>XTS_SPRS_READY </td><td>0x11 </td></tr>
</table>
<h3>Ping</h3>
<p>The ping command can be used to check connection to the module, and verify module readyness.</p>
<p>During the module boot procedure, when connecting using USB, it can be difficult to make sure you are able to receive the system status messages saying that the module is ready. In that case, the PING command comes in handy, where you can ask the module if it is ready to receive commands.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_PING&gt; + [<a class="el" href="xtserial__definitions_8h.xhtml#acecf2daf06edd4ba0d6516d9d09f9eb0">XTS_DEF_PINGVAL(i)</a>] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_PONG&gt; + [Pongval(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value </th><th>Description  </th></tr>
<tr>
<td>XTS_SPC_PING </td><td>0x01 </td><td>Ping command code </td></tr>
<tr>
<td>XTS_DEF_PINGVAL </td><td>0xeeaaeaae </td><td>Ping seed value </td></tr>
<tr>
<td>XTS_SPR_PONG </td><td>0x01 </td><td>Pong responce code </td></tr>
<tr>
<td>XTS_DEF_PONGVAL_READY </td><td>0xaaeeaeea </td><td>Module is ready </td></tr>
<tr>
<td>XTS_DEF_PONGVAL_NOTREADY </td><td>0xaeeaeeaa </td><td>Module is not ready </td></tr>
</table>
<h3>Load application</h3>
<p>Loads the desired sensor module application.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_MOD_LOADAPP&gt; + [AppID(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_MOD_LOADAPP </td><td>0x21 </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<p>AppID values can be found in the Application section (XTS_ID_APP_x).</p>
<h3>Execute application</h3>
<p>After the application is loaded, it can be configured using 'Application level' commands (see below). Then the application is executed by setting the module mode.</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value </th><th>Description  </th></tr>
<tr>
<td>XTS_SM_RUN </td><td>0x01 </td><td>Sensor module in running mode. </td></tr>
<tr>
<td>XTS_SM_IDLE </td><td>0x11 </td><td>Idle mode. Sensor module ready but not active. </td></tr>
</table>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_MOD_SETMODE&gt; + &lt;XTS_SM_RUN&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_MOD_SETMODE </td><td>0x20 </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<h3>LED control</h3>
<p>Use this command to choose the behaviour of the sensor LED. There are three levels of LED operations, Off, Simple and Full. Different applications may use the LED differently, but in general the three levels will behave like this:</p><ul>
<li>Off: Very simple LED indicator during startup and initialization. LED is always off in operating mode.</li>
<li>Simple: More indication during startup and initialization. Simple indication during operation, e.g. fixed indication or subtle blinking.</li>
<li>Full: Full indication during startup and initialization. Extensive use of blinking and colors to indicate sensor state and if possible values.</li>
</ul>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_MOD_SETLEDCONTROL&gt; + &lt;Mode&gt; + &lt;Reserved&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_MOD_SETLEDCONTROL </td><td>0x24 </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<table class="doxtable">
<tr>
<th>Mode </th><th>Value  </th></tr>
<tr>
<td>XT_UI_LED_MODE_OFF </td><td>0 </td></tr>
<tr>
<td>XT_UI_LED_MODE_SIMPLE </td><td>1 </td></tr>
<tr>
<td>XT_UI_LED_MODE_FULL </td><td>2 </td></tr>
</table>
<h3><a class="el" href="struct_error.xhtml">Error</a> handling</h3>
<p>If the module receives a command it does not understand, it will send an error message.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_ERROR&gt; + [Errorcode(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPR_ERROR </td><td>0x20 </td></tr>
</table>
<table class="doxtable">
<tr>
<th>Errorcode </th><th>Value </th><th>Description  </th></tr>
<tr>
<td>XTS_SPRE_NOT_RECOGNIZED </td><td>0x01 </td><td>Command not recognized </td></tr>
<tr>
<td>XTS_SPRE_CRC_FAILED </td><td>0x02 </td><td>Checksum failed </td></tr>
<tr>
<td>XTS_SPRE_APP_INVALID </td><td>0x20 </td><td>Command recognized, but invalid </td></tr>
</table>
<h2>Application level</h2>
<h3>Generic application commands</h3>
<h4>Set Detection Zone</h4>
<p>Set the desired detection zone.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_APPCOMMAND&gt; + &lt;XTS_SPCA_SET&gt; + [<a class="el" href="xtid_8h.xhtml#a0c33b52d81892d329bd9be596c94386b">XTS_ID_DETECTION_ZONE(i)</a>] + [Start(f)] + [End(f)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_APPCOMMAND </td><td>0x10 </td></tr>
<tr>
<td>XTS_SPCA_SET </td><td>0x10 </td></tr>
<tr>
<td>XTS_ID_DETECTION_ZONE </td><td>0x96a10a1c </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<h4>Set Sensitivity</h4>
<p>Set the desired sensitivity.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_APPCOMMAND&gt; + &lt;XTS_SPCA_SET&gt; + [<a class="el" href="xtid_8h.xhtml#aa4be334c619df069644a62497f1b4088">XTS_ID_SENSITIVITY(i)</a>] + [Sensitivity(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Sensitivity value must be between 0 (low sensitivity) and 9 (high sensitivity).</p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_APPCOMMAND </td><td>0x10 </td></tr>
<tr>
<td>XTS_SPCA_SET </td><td>0x10 </td></tr>
<tr>
<td>XTS_ID_SENSITIVITY </td><td>0x10a5112b </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<h3>Sleep application (Sleep)</h3>
<h4>Sleep status</h4>
<p>Outputs the status of the Sleep application, with data when available. Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#a46fd395d23fbc564b94fc964e0e2a11b">XTS_ID_SLEEP_STATUS(i)</a>] + [Counter(i)] + [StateCode(i)] + [StateData(f)] + [Distance(f)] [SignalQuality(i)] + [MovementSlow(f)] + [MovementFast(f)] &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>StateCode values:</p>
<table class="doxtable">
<tr>
<th>StateCode </th><th>Value </th><th>Description </th><th>StateData  </th></tr>
<tr>
<td>XTS_VAL_RESP_STATE_BREATHING </td><td>0 </td><td>Valid RPM detected </td><td>Current RPM value </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT </td><td>1 </td><td>Detects motion, but can not identify breath </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT_TRACKING </td><td>2 </td><td>Detects motion, possible breathing </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_NO_MOVEMENT </td><td>3 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_INITIALIZING </td><td>4 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>Reserved </td><td>5 </td><td></td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_UNKNOWN </td><td>6 </td><td>Undefined state. </td><td>0 </td></tr>
</table>
<p>Output:</p>
<ul>
<li>StateData: RPM, respirations per minute (Breathing state only).</li>
<li>Distance: Distance to where respiration is detected (Breathing state only).</li>
<li>SignalQuality: A measure of the signal quality giving respiration. Typically used to identify if the sensor is positioned correctly. Value from 0 to 10 where 0=low and 10=high. (Breathing state only).</li>
<li>MovementSlow: A measure of movement with long integration time.</li>
<li>MovementFast: A measure of movement with short integration time.</li>
</ul>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_SLEEP </td><td>0x00f17b17 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_SLEEP_STATUS </td><td>0x2375a16c </td></tr>
</table>
<h3>True presence (TruePresence)</h3>
<h4>TruePresence status</h4>
<p>Outputs the status of the True Presence application, with data when available. Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [XTS_ID_TRUEPRESENCE_SINGLE(i)] + [Counter(i)] + [PresenceState(i)] + [Distance(f)] + [SignalQuality(i)] &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>PresenceState values:</p>
<table class="doxtable">
<tr>
<th>PresenceState </th><th>Value </th><th>Description  </th></tr>
<tr>
<td>XTS_VAL_TRUEPRESENCE_NO_PRESENCE </td><td>0 </td><td>No presence detected </td></tr>
<tr>
<td>XTS_VAL_TRUEPRESENCE_PRESENCE </td><td>1 </td><td>Presence detected </td></tr>
<tr>
<td>XTS_VAL_TRUEPRESENCE_INITIALIZING </td><td>2 </td><td>The sensor initializes after the True Presence Profile is executed </td></tr>
<tr>
<td>XTS_VAL_TRUEPRESENCE_UNKNOWN </td><td>3 </td><td>The sensor is in an unknown state and requires a Profile and User Settings to be loaded </td></tr>
</table>
<p>Output:</p>
<ul>
<li>Counter: Frame counter as basis for sensor.</li>
<li>PresenceState: Sensor state output. See table above.</li>
<li>Distance: Distance to where presence is detected.</li>
<li>SignalQuality: A measure of the signal quality giving presence detection. Typically used to identify if the sensor is positioned correctly. Value from 0 to 10 where 0=low and 10=high. (Presence state only).</li>
</ul>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_TRUEPRESENCE </td><td>0x1f629ba3 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_TRUEPRESENCE_SINGLE </td><td>0x723bfa1e </td></tr>
</table>
<h3>Respiration application (RESP)</h3>
<h4>RESP status</h4>
<p>Outputs the status of the RESP application, with data when available.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#a359380692b7ba2a43a03bf16ddf57270">XTS_ID_RESP_STATUS(i)</a>] + [Counter(i)] + [StateCode(i)] + [StateData(i)] + [Distance(f)] + [Movement(f)] + [SignalQuality(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>StateCode values:</p>
<table class="doxtable">
<tr>
<th>StateCode </th><th>Value </th><th>Description </th><th>StateData  </th></tr>
<tr>
<td>XTS_VAL_RESP_STATE_BREATHING </td><td>0 </td><td>Valid RPM detected </td><td>Current RPM value </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT </td><td>1 </td><td>Detects motion, but can not identify breath </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_MOVEMENT_TRACKING </td><td>2 </td><td>Detects motion, possible breathing </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_NO_MOVEMENT </td><td>3 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_INITIALIZING </td><td>4 </td><td>No movement detected </td><td>0 </td></tr>
<tr>
<td>Reserved </td><td>5 </td><td></td><td>0 </td></tr>
<tr>
<td>XTS_VAL_RESP_STATE_UNKNOWN </td><td>6 </td><td>Undefined state. </td><td>0 </td></tr>
</table>
<p>Output:</p>
<ul>
<li>StateData: RPM, respirations per minute (Breathing state only).</li>
<li>Distance: Distance to where respiration is detected (Breathing state only).</li>
<li>Movement: Relative movement of the respiration, in mm (Breathing state only).</li>
<li>SignalQuality: A measure of the signal quality giving respiration. Typically used to identify if the sensor is positioned correctly. Value from 0 to 10 where 0=low and 10=high. (Breathing state only).</li>
</ul>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_ID_APP_RESP </td><td>0x1423a2d6 </td></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_RESP_STATUS </td><td>0x2375fe26 </td></tr>
</table>
<h4>Baseband Amplitude/Phase output</h4>
<p>Outputs the baseband amplitude and phase data of the application.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#a75b0d53ccf255f29ec83c3cd1d647411">XTS_ID_BASEBAND_AMPLITUDE_PHASE(i)</a>] + [Counter(i)] + [NumOfBins(i)] + [BinLength(f)] + [SamplingFrequency(f)] + [CarrierFrequency(f)] + [RangeOffset(f)] + [Amplitude(f)] + ... + [Phase(f)] + ... + &lt;CRC&gt; + &lt;End&gt;</code></p>
<table class="doxtable">
<tr>
<th>Name </th><th>Description  </th></tr>
<tr>
<td>Counter </td><td>Incremental frame counter </td></tr>
<tr>
<td>NumOfBins </td><td>Number of bins in dataset </td></tr>
<tr>
<td>BinLength </td><td>Length in meters between each bin </td></tr>
<tr>
<td>SamplingFrequency </td><td>Chip sampling frequency in Hz </td></tr>
<tr>
<td>CarrierFrequency </td><td>Chip carrier frequency in Hz </td></tr>
<tr>
<td>RangeOffset </td><td>First range bin start in meters </td></tr>
<tr>
<td>Power </td><td>Array of NumOfBins float values of the signal power </td></tr>
<tr>
<td>Phase </td><td>Array of NumOfBins float values of the signal phase </td></tr>
</table>
<p><em>Power</em> is calculated using: <code>power(n) = i(n)^2 + q(n)^2 for n=[0..NumOfBins-1]</code></p>
<p><em>Phase</em> is calculated using: <code>phase(n) = atan2( q(n) / i(n) ) for n=[0..NumOfBins-1]</code></p>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_BASEBAND_AMPLITUDE_PHASE </td><td>0x0D </td></tr>
</table>
<h5>Enable message</h5>
<p>The output of baseband amplitude and phase can be turned on and off using the enable message.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_DIR_COMMAND&gt; + &lt;XTS_SDC_APP_SETINT&gt; + [XTS_SACR_OUTPUTBASEBAND(i)] + [Length(i)] + [EnableCode(i)] + &lt;CRC&gt; + &lt;End&gt;</code> Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>EnableCode:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SACR_ID_BASEBAND_OUTPUT_OFF </td><td>0x00 </td></tr>
<tr>
<td>XTS_SACR_ID_BASEBAND_OUTPUT_AMPLITUDE_PHASE </td><td>0x02 </td></tr>
</table>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_DIR_COMMAND </td><td>0x90 </td></tr>
<tr>
<td>XTS_SDC_APP_SETINT </td><td>0x71 </td></tr>
<tr>
<td>XTS_SACR_OUTPUTBASEBAND </td><td>0x10 </td></tr>
<tr>
<td>Length </td><td>1 </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
<h4>Baseband IQ output</h4>
<p>Outputs the baseband I and Q data of the application.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPR_APPDATA&gt; + [<a class="el" href="xtid_8h.xhtml#a10264f5887b49d5ebba1e7af068619a5">XTS_ID_BASEBAND_IQ(i)</a>] + [Counter(i)] + [NumOfBins(i)] + [BinLength(f)] + [SamplingFrequency(f)] + [CarrierFrequency(f)] + [RangeOffset(f)] + [SigI(f)] + ... + [SigQ(f)] + ... + &lt;CRC&gt; + &lt;End&gt;</code></p>
<table class="doxtable">
<tr>
<th>Name </th><th>Description  </th></tr>
<tr>
<td>Counter </td><td>Incremental frame counter </td></tr>
<tr>
<td>NumOfBins </td><td>Number of bins in dataset </td></tr>
<tr>
<td>BinLength </td><td>Length in meters between each bin </td></tr>
<tr>
<td>SamplingFrequency </td><td>Chip sampling frequency in Hz </td></tr>
<tr>
<td>CarrierFrequency </td><td>Chip carrier frequency in Hz </td></tr>
<tr>
<td>RangeOffset </td><td>First range bin start in meters </td></tr>
<tr>
<td>SigI </td><td>Array of NumOfBins float values of the signal I-channel </td></tr>
<tr>
<td>SigQ </td><td>Array of NumOfBins float values of the signal Q-channel </td></tr>
</table>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPR_APPDATA </td><td>0x50 </td></tr>
<tr>
<td>XTS_ID_BASEBAND_IQ </td><td>0x0C </td></tr>
</table>
<h5>Enable message</h5>
<p>The output of baseband IQ can be turned on and off using the enable message.</p>
<p>Example: <code>&lt;Start&gt; + &lt;XTS_SPC_DIR_COMMAND&gt; + &lt;XTS_SDC_APP_SETINT&gt; + [XTS_SACR_OUTPUTBASEBAND(i)] + [Length(i)] + [EnableCode(i)] + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>Response: <code>&lt;Start&gt; + &lt;XTS_SPR_ACK&gt; + &lt;CRC&gt; + &lt;End&gt;</code></p>
<p>EnableCode:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SACR_ID_BASEBAND_OUTPUT_OFF </td><td>0x00 </td></tr>
<tr>
<td>XTS_SACR_ID_BASEBAND_OUTPUT_IQ </td><td>0x01 </td></tr>
</table>
<p>Protocol codes:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Value  </th></tr>
<tr>
<td>XTS_SPC_DIR_COMMAND </td><td>0x90 </td></tr>
<tr>
<td>XTS_SDC_APP_SETINT </td><td>0x71 </td></tr>
<tr>
<td>XTS_SACR_OUTPUTBASEBAND </td><td>0x10 </td></tr>
<tr>
<td>Length </td><td>1 </td></tr>
<tr>
<td>XTS_SPR_ACK </td><td>0x10 </td></tr>
</table>
</div></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
