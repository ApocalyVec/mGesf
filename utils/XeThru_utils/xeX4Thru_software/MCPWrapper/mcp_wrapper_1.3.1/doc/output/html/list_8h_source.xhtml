<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: examples/atmel_samg55/src/ASF/thirdparty/freertos/freertos-7.0.0/source/include/list.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="dir_0e96b936377161858012b6f31c3bd790.xhtml">atmel_samg55</a></li><li class="navelem"><a class="el" href="dir_0ae219bfaa679f3dbaaacda5fb614d9c.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_67951177d7f5e66661a526635115739c.xhtml">ASF</a></li><li class="navelem"><a class="el" href="dir_2ebaa83b9a80a062a45c97b62e911ab2.xhtml">thirdparty</a></li><li class="navelem"><a class="el" href="dir_d4fc68e8089e8b200ed8404bd11d9cbc.xhtml">freertos</a></li><li class="navelem"><a class="el" href="dir_dc107d22e5a3efad33abbabba5eee61e.xhtml">freertos-7.0.0</a></li><li class="navelem"><a class="el" href="dir_7676a97cf995c7f6012a96736129d95f.xhtml">source</a></li><li class="navelem"><a class="el" href="dir_63f54b98461c1e9b6e74b1aecf4fc76e.xhtml">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">list.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="list_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">    FreeRTOS V7.0.0 - Copyright (C) 2011 Real Time Engineers Ltd.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    FreeRTOS supports many tools and architectures. V7.0.0 is sponsored by:</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    Atollic AB - Atollic provides professional embedded systems development</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    tools for C/C++ development, code analysis and test automation.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">    See http://www.atollic.com</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    ***************************************************************************</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">     *                                                                       *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">     *    FreeRTOS tutorial books are available in pdf and paperback.        *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">     *    Complete, revised, and edited pdf reference manuals are also       *</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">     *    available.                                                         *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">     *                                                                       *</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">     *    Purchasing FreeRTOS documentation will not only help you, by       *</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">     *    ensuring you get running as quickly as possible and with an        *</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">     *    in-depth knowledge of how to use FreeRTOS, it will also help       *</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">     *    the FreeRTOS project to continue with its mission of providing     *</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">     *    professional grade, cross platform, de facto standard solutions    *</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">     *    for microcontrollers - completely free of charge!                  *</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">     *                                                                       *</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">     *    &gt;&gt;&gt; See http://www.FreeRTOS.org/Documentation for details. &lt;&lt;&lt;     *</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">     *                                                                       *</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">     *    Thank you for using FreeRTOS, and thank you for your support!      *</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">     *                                                                       *</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    ***************************************************************************</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">    This file is part of the FreeRTOS distribution.</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">    FreeRTOS is free software; you can redistribute it and/or modify it under</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">    the terms of the GNU General Public License (version 2) as published by the</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">    &gt;&gt;&gt;NOTE&lt;&lt;&lt; The modification to the GPL is included to allow you to</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">    distribute a combined work that includes FreeRTOS without being obliged to</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">    provide the source code for proprietary components outside of the FreeRTOS</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">    kernel.  FreeRTOS is distributed in the hope that it will be useful, but</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">    more details. You should have received a copy of the GNU General Public</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">    License and the FreeRTOS license exception along with FreeRTOS; if not it</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    can be viewed here: http://www.freertos.org/a00114.html and also obtained</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    by writing to Richard Barry, contact details for whom are available on the</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">    FreeRTOS WEB site.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    1 tab == 4 spaces!</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">    http://www.FreeRTOS.org - Documentation, latest information, license and</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">    contact details.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">    http://www.SafeRTOS.com - A version that is certified for use in safety</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">    critical systems.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">    http://www.OpenRTOS.com - Commercial support, development, porting,</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    licensing and training services.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">*/</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> * This is the list implementation used by the scheduler.  While it is tailored</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> * heavily for the schedulers needs, it is also available for use by</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> * application code.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> * xLists can only store pointers to xListItems.  Each xListItem contains a</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> * numeric value (xItemValue).  Most of the time the lists are sorted in</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> * descending item value order.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> * Lists are created already containing one list item.  The value of this</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> * item is the maximum possible that can be stored, it is therefore always at</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * the end of the list and acts as a marker.  The list member pxHead always</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * points to this marker - even though it is at the tail of the list.  This</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> * is because the tail contains a wrap back pointer to the true head of</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * the list.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * In addition to it&#39;s value, each list item contains a pointer to the next</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * item in the list (pxNext), a pointer to the list it is in (pxContainer)</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * and a pointer to back to the object that contains it.  These later two</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * pointers are included for efficiency of list manipulation.  There is</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * effectively a two way link between the object containing the list item and</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> * the list item itself.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * \page ListIntroduction List Implementation</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> * \ingroup FreeRTOSIntro</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">#ifndef LIST_H</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">#define LIST_H</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"> * Definition of the only type of object that a list can contain.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="structx_l_i_s_t___i_t_e_m.xhtml">   98</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xLIST_ITEM</a></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="structx_l_i_s_t___i_t_e_m.xhtml#ae405228a5af48347ce8e99d75a3e7f72">  100</a></span>&#160;    <a class="code" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a> <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml#ae405228a5af48347ce8e99d75a3e7f72">xItemValue</a>;                <span class="comment">/*&lt; The value being listed.  In most cases this is used to sort the list in descending order. */</span></div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="structx_l_i_s_t___i_t_e_m.xhtml#a787a81040fd55a14207ac2fe8d63d231">  101</a></span>&#160;    <span class="keyword">volatile</span> <span class="keyword">struct </span><a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xLIST_ITEM</a> * <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml#a787a81040fd55a14207ac2fe8d63d231">pxNext</a>;    <span class="comment">/*&lt; Pointer to the next xListItem in the list. */</span></div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="structx_l_i_s_t___i_t_e_m.xhtml#ac2ca2e783e5df63d71f4fa4b645dc02c">  102</a></span>&#160;    <span class="keyword">volatile</span> <span class="keyword">struct </span><a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xLIST_ITEM</a> * <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml#ac2ca2e783e5df63d71f4fa4b645dc02c">pxPrevious</a>;<span class="comment">/*&lt; Pointer to the previous xListItem in the list. */</span></div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="structx_l_i_s_t___i_t_e_m.xhtml#aeb3110b50fe0dbce826d929b27b5ddb1">  103</a></span>&#160;    <span class="keywordtype">void</span> * <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml#aeb3110b50fe0dbce826d929b27b5ddb1">pvOwner</a>;                         <span class="comment">/*&lt; Pointer to the object (normally a TCB) that contains the list item.  There is therefore a two way link between the object containing the list item and the list item itself. */</span></div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="structx_l_i_s_t___i_t_e_m.xhtml#a5280610585bd9e8e558dacaaf2e100f2">  104</a></span>&#160;    <span class="keywordtype">void</span> * <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml#a5280610585bd9e8e558dacaaf2e100f2">pvContainer</a>;                     <span class="comment">/*&lt; Pointer to the list in which this list item is placed (if any). */</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;};</div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="list_8h.xhtml#abc3e65a10b5c5f39142e64e69311797f">  106</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xLIST_ITEM</a> <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xListItem</a>;        <span class="comment">/* For some reason lint wants this as two separate definitions. */</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml">  108</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml">xMINI_LIST_ITEM</a></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml#a368416ac432b0b4596bd64acfa095b19">  110</a></span>&#160;    <a class="code" href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a> <a class="code" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml#a368416ac432b0b4596bd64acfa095b19">xItemValue</a>;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml#abcbc5b72bf8e2acd6fa48fa1079b4f96">  111</a></span>&#160;    <span class="keyword">volatile</span> <span class="keyword">struct </span><a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xLIST_ITEM</a> *<a class="code" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml#abcbc5b72bf8e2acd6fa48fa1079b4f96">pxNext</a>;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml#a83923c560fc4e7ad21ad0f8626c891fc">  112</a></span>&#160;    <span class="keyword">volatile</span> <span class="keyword">struct </span><a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xLIST_ITEM</a> *<a class="code" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml#a83923c560fc4e7ad21ad0f8626c891fc">pxPrevious</a>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;};</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="list_8h.xhtml#a9fb3b8c76f89efd6b8787f66e94ba04c">  114</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml">xMINI_LIST_ITEM</a> <a class="code" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml">xMiniListItem</a>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * Definition of the type of queue used by the scheduler.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="structx_l_i_s_t.xhtml">  119</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structx_l_i_s_t.xhtml">xLIST</a></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="structx_l_i_s_t.xhtml#a4bcd10c0f3cdeb77ef08dac16bdd6571">  121</a></span>&#160;    <span class="keyword">volatile</span> <span class="keywordtype">unsigned</span> <a class="code" href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a> <a class="code" href="structx_l_i_s_t.xhtml#a4bcd10c0f3cdeb77ef08dac16bdd6571">uxNumberOfItems</a>;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="structx_l_i_s_t.xhtml#af73243d3473954f4394ea00ee5788630">  122</a></span>&#160;    <span class="keyword">volatile</span> <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xListItem</a> * <a class="code" href="structx_l_i_s_t.xhtml#af73243d3473954f4394ea00ee5788630">pxIndex</a>;           <span class="comment">/*&lt; Used to walk through the list.  Points to the last item returned by a call to pvListGetOwnerOfNextEntry (). */</span></div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="structx_l_i_s_t.xhtml#a62e557ea0367c5c644136997a32c94d5">  123</a></span>&#160;    <span class="keyword">volatile</span> <a class="code" href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml">xMiniListItem</a> <a class="code" href="structx_l_i_s_t.xhtml#a62e557ea0367c5c644136997a32c94d5">xListEnd</a>;        <span class="comment">/*&lt; List item that contains the maximum possible item value meaning it is always at the end of the list and is therefore used as a marker. */</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;} <a class="code" href="list_8h.xhtml#a3cee7d8d40380f66ac73b8825b5a0fb0">xList</a>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> * Access macro to set the owner of a list item.  The owner of a list item</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> * is the object (usually a TCB) that contains the list item.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * \page listSET_LIST_ITEM_OWNER listSET_LIST_ITEM_OWNER</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="list_8h.xhtml#acc01a08e534b54fe438847ef02e5060a">  133</a></span>&#160;<span class="preprocessor">#define listSET_LIST_ITEM_OWNER( pxListItem, pxOwner )      ( pxListItem )-&gt;pvOwner = ( void * ) ( pxOwner )</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> * Access macro to set the value of the list item.  In most cases the value is</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> * used to sort the list in descending order.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"> * \page listSET_LIST_ITEM_VALUE listSET_LIST_ITEM_VALUE</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="list_8h.xhtml#a83e95e61652f032fdc26aa622f5e2610">  142</a></span>&#160;<span class="preprocessor">#define listSET_LIST_ITEM_VALUE( pxListItem, xValue )       ( pxListItem )-&gt;xItemValue = ( xValue )</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> * Access macro the retrieve the value of the list item.  The value can</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"> * represent anything - for example a the priority of a task, or the time at</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"> * which a task should be unblocked.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"> * \page listGET_LIST_ITEM_VALUE listGET_LIST_ITEM_VALUE</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="list_8h.xhtml#aa50d09950abc602741d7ebe8387f4e1a">  152</a></span>&#160;<span class="preprocessor">#define listGET_LIST_ITEM_VALUE( pxListItem )               ( ( pxListItem )-&gt;xItemValue )</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> * Access macro the retrieve the value of the list item at the head of a given</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> * list.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> * \page listGET_LIST_ITEM_VALUE listGET_LIST_ITEM_VALUE</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="list_8h.xhtml#a63742b27958b959ac9ab69d8e9aed241">  161</a></span>&#160;<span class="preprocessor">#define listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxList )          ( (&amp;( ( pxList )-&gt;xListEnd ))-&gt;pxNext-&gt;xItemValue )</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"> * Access macro to determine if a list contains any items.  The macro will</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"> * only have the value true if the list is empty.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"> * \page listLIST_IS_EMPTY listLIST_IS_EMPTY</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="list_8h.xhtml#aaba6eb05d67ebc8026bea29193eca28f">  170</a></span>&#160;<span class="preprocessor">#define listLIST_IS_EMPTY( pxList )             ( ( pxList )-&gt;uxNumberOfItems == ( unsigned portBASE_TYPE ) 0 )</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"> * Access macro to return the number of items in the list.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="list_8h.xhtml#a18b4aded515bdc512017ea6e677a13bb">  175</a></span>&#160;<span class="preprocessor">#define listCURRENT_LIST_LENGTH( pxList )       ( ( pxList )-&gt;uxNumberOfItems )</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"> * Access function to obtain the owner of the next entry in a list.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"> * The list member pxIndex is used to walk through a list.  Calling</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"> * listGET_OWNER_OF_NEXT_ENTRY increments pxIndex to the next item in the list</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"> * and returns that entries pxOwner parameter.  Using multiple calls to this</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"> * function it is therefore possible to move through every item contained in</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"> * a list.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"> * The pxOwner parameter of a list item is a pointer to the object that owns</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> * the list item.  In the scheduler this is normally a task control block.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"> * The pxOwner parameter effectively creates a two way link between the list</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"> * item and its owner.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"> * @param pxList The list from which the next item owner is to be returned.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"> * \page listGET_OWNER_OF_NEXT_ENTRY listGET_OWNER_OF_NEXT_ENTRY</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="list_8h.xhtml#a275d9855e9b71652e2b8f6e2ed62aadd">  196</a></span>&#160;<span class="preprocessor">#define listGET_OWNER_OF_NEXT_ENTRY( pxTCB, pxList )                                    \</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">{                                                                                       \</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">xList * const pxConstList = ( pxList );                                                 \</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="preprocessor">    </span><span class="comment">/* Increment the index to the next item and return the item, ensuring */</span><span class="preprocessor">            \</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">    </span><span class="comment">/* we don&#39;t return the marker used at the end of the list.  */</span><span class="preprocessor">                      \</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="preprocessor">    ( pxConstList )-&gt;pxIndex = ( pxConstList )-&gt;pxIndex-&gt;pxNext;                        \</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">    if( ( pxConstList )-&gt;pxIndex == ( xListItem * ) &amp;( ( pxConstList )-&gt;xListEnd ) )    \</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">    {                                                                                   \</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="preprocessor">        ( pxConstList )-&gt;pxIndex = ( pxConstList )-&gt;pxIndex-&gt;pxNext;                    \</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="preprocessor">    }                                                                                   \</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">    ( pxTCB ) = ( pxConstList )-&gt;pxIndex-&gt;pvOwner;                                      \</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">}</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"> * Access function to obtain the owner of the first entry in a list.  Lists</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> * are normally sorted in ascending item value order.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"> * This function returns the pxOwner member of the first item in the list.</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"> * The pxOwner parameter of a list item is a pointer to the object that owns</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"> * the list item.  In the scheduler this is normally a task control block.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"> * The pxOwner parameter effectively creates a two way link between the list</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"> * item and its owner.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> * @param pxList The list from which the owner of the head item is to be</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"> * returned.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * \page listGET_OWNER_OF_HEAD_ENTRY listGET_OWNER_OF_HEAD_ENTRY</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="list_8h.xhtml#a715561302af8cb5b74416b23ce4e999d">  226</a></span>&#160;<span class="preprocessor">#define listGET_OWNER_OF_HEAD_ENTRY( pxList )  ( (&amp;( ( pxList )-&gt;xListEnd ))-&gt;pxNext-&gt;pvOwner )</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> * Check to see if a list item is within a list.  The list item maintains a</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> * &quot;container&quot; pointer that points to the list it is in.  All this macro does</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"> * is check to see if the container and the list match.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"> * @param pxList The list we want to know if the list item is within.</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"> * @param pxListItem The list item we want to know if is in the list.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"> * @return pdTRUE is the list item is in the list, otherwise pdFALSE.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"> * pointer against</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="list_8h.xhtml#a60302b468d21f8c53d13987372acb8fa">  238</a></span>&#160;<span class="preprocessor">#define listIS_CONTAINED_WITHIN( pxList, pxListItem ) ( ( pxListItem )-&gt;pvContainer == ( void * ) ( pxList ) )</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"> * Must be called before a list is used!  This initialises all the members</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"> * of the list structure and inserts the xListEnd item into the list as a</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"> * marker to the back of the list.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment"> * @param pxList Pointer to the list being initialised.</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"> * \page vListInitialise vListInitialise</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keywordtype">void</span> <a class="code" href="list_8h.xhtml#acc831631f04ca3f6fef79b0175f6d6e1">vListInitialise</a>( <a class="code" href="structx_l_i_s_t.xhtml">xList</a> *pxList );</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"> * Must be called before a list item is used.  This sets the list container to</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"> * null so the item does not think that it is already contained in a list.</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"> * @param pxItem Pointer to the list item being initialised.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"> * \page vListInitialiseItem vListInitialiseItem</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keywordtype">void</span> <a class="code" href="list_8h.xhtml#aa0c6c2804f1673b95f781a795ebf96d8">vListInitialiseItem</a>( <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xListItem</a> *pxItem );</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"> * Insert a list item into a list.  The item will be inserted into the list in</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"> * a position determined by its item value (descending item value order).</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"> * @param pxList The list into which the item is to be inserted.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"> * @param pxNewListItem The item to that is to be placed in the list.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"> * \page vListInsert vListInsert</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keywordtype">void</span> <a class="code" href="list_8h.xhtml#ae0c352207d36c7ba3fa1b970b1eadd51">vListInsert</a>( <a class="code" href="structx_l_i_s_t.xhtml">xList</a> *pxList, <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xListItem</a> *pxNewListItem );</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment"> * Insert a list item into a list.  The item will be inserted in a position</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"> * such that it will be the last item within the list returned by multiple</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"> * calls to listGET_OWNER_OF_NEXT_ENTRY.</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"> * The list member pvIndex is used to walk through a list.  Calling</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"> * listGET_OWNER_OF_NEXT_ENTRY increments pvIndex to the next item in the list.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"> * Placing an item in a list using vListInsertEnd effectively places the item</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"> * in the list position pointed to by pvIndex.  This means that every other</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment"> * item within the list will be returned by listGET_OWNER_OF_NEXT_ENTRY before</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"> * the pvIndex parameter again points to the item being inserted.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"> * @param pxList The list into which the item is to be inserted.</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"> * @param pxNewListItem The list item to be inserted into the list.</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"> * \page vListInsertEnd vListInsertEnd</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keywordtype">void</span> <a class="code" href="list_8h.xhtml#aa234bf74629ff34fbd8494a0f0112b42">vListInsertEnd</a>( <a class="code" href="structx_l_i_s_t.xhtml">xList</a> *pxList, <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xListItem</a> *pxNewListItem );</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment"> * Remove an item from a list.  The list item has a pointer to the list that</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment"> * it is in, so only the list item need be passed into the function.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"> * @param vListRemove The item to be removed.  The item will remove itself from</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"> * the list pointed to by it&#39;s pxContainer parameter.</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"> * \page vListRemove vListRemove</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"> * \ingroup LinkedList</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keywordtype">void</span> <a class="code" href="list_8h.xhtml#a6c083a9d7103fca1c9abd0de20839651">vListRemove</a>( <a class="code" href="structx_l_i_s_t___i_t_e_m.xhtml">xListItem</a> *pxItemToRemove );</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="ttc" id="structx_l_i_s_t_xhtml_a62e557ea0367c5c644136997a32c94d5"><div class="ttname"><a href="structx_l_i_s_t.xhtml#a62e557ea0367c5c644136997a32c94d5">xLIST::xListEnd</a></div><div class="ttdeci">volatile xMiniListItem xListEnd</div><div class="ttdef"><b>Definition:</b> list.h:123</div></div>
<div class="ttc" id="list_8h_xhtml_aa0c6c2804f1673b95f781a795ebf96d8"><div class="ttname"><a href="list_8h.xhtml#aa0c6c2804f1673b95f781a795ebf96d8">vListInitialiseItem</a></div><div class="ttdeci">void vListInitialiseItem(xListItem *pxItem)</div><div class="ttdef"><b>Definition:</b> list.c:89</div></div>
<div class="ttc" id="portmacro_8h_xhtml_a1ebe82d24d764ae4e352f7c3a9f92c01"><div class="ttname"><a href="portmacro_8h.xhtml#a1ebe82d24d764ae4e352f7c3a9f92c01">portBASE_TYPE</a></div><div class="ttdeci">#define portBASE_TYPE</div><div class="ttdef"><b>Definition:</b> portmacro.h:134</div></div>
<div class="ttc" id="structx_m_i_n_i___l_i_s_t___i_t_e_m_xhtml"><div class="ttname"><a href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml">xMINI_LIST_ITEM</a></div><div class="ttdef"><b>Definition:</b> list.h:108</div></div>
<div class="ttc" id="structx_l_i_s_t___i_t_e_m_xhtml_a5280610585bd9e8e558dacaaf2e100f2"><div class="ttname"><a href="structx_l_i_s_t___i_t_e_m.xhtml#a5280610585bd9e8e558dacaaf2e100f2">xLIST_ITEM::pvContainer</a></div><div class="ttdeci">void * pvContainer</div><div class="ttdef"><b>Definition:</b> list.h:104</div></div>
<div class="ttc" id="structx_l_i_s_t_xhtml"><div class="ttname"><a href="structx_l_i_s_t.xhtml">xLIST</a></div><div class="ttdef"><b>Definition:</b> list.h:119</div></div>
<div class="ttc" id="structx_l_i_s_t_xhtml_a4bcd10c0f3cdeb77ef08dac16bdd6571"><div class="ttname"><a href="structx_l_i_s_t.xhtml#a4bcd10c0f3cdeb77ef08dac16bdd6571">xLIST::uxNumberOfItems</a></div><div class="ttdeci">volatile unsigned portBASE_TYPE uxNumberOfItems</div><div class="ttdef"><b>Definition:</b> list.h:121</div></div>
<div class="ttc" id="structx_m_i_n_i___l_i_s_t___i_t_e_m_xhtml_abcbc5b72bf8e2acd6fa48fa1079b4f96"><div class="ttname"><a href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml#abcbc5b72bf8e2acd6fa48fa1079b4f96">xMINI_LIST_ITEM::pxNext</a></div><div class="ttdeci">volatile struct xLIST_ITEM * pxNext</div><div class="ttdef"><b>Definition:</b> list.h:111</div></div>
<div class="ttc" id="portmacro_8h_xhtml_a4d746b2ff8fafc490b764c66411ec457"><div class="ttname"><a href="portmacro_8h.xhtml#a4d746b2ff8fafc490b764c66411ec457">portTickType</a></div><div class="ttdeci">unsigned portLONG portTickType</div><div class="ttdef"><b>Definition:</b> portmacro.h:140</div></div>
<div class="ttc" id="structx_l_i_s_t___i_t_e_m_xhtml_aeb3110b50fe0dbce826d929b27b5ddb1"><div class="ttname"><a href="structx_l_i_s_t___i_t_e_m.xhtml#aeb3110b50fe0dbce826d929b27b5ddb1">xLIST_ITEM::pvOwner</a></div><div class="ttdeci">void * pvOwner</div><div class="ttdef"><b>Definition:</b> list.h:103</div></div>
<div class="ttc" id="structx_l_i_s_t___i_t_e_m_xhtml_a787a81040fd55a14207ac2fe8d63d231"><div class="ttname"><a href="structx_l_i_s_t___i_t_e_m.xhtml#a787a81040fd55a14207ac2fe8d63d231">xLIST_ITEM::pxNext</a></div><div class="ttdeci">volatile struct xLIST_ITEM * pxNext</div><div class="ttdef"><b>Definition:</b> list.h:101</div></div>
<div class="ttc" id="structx_l_i_s_t___i_t_e_m_xhtml_ae405228a5af48347ce8e99d75a3e7f72"><div class="ttname"><a href="structx_l_i_s_t___i_t_e_m.xhtml#ae405228a5af48347ce8e99d75a3e7f72">xLIST_ITEM::xItemValue</a></div><div class="ttdeci">portTickType xItemValue</div><div class="ttdef"><b>Definition:</b> list.h:100</div></div>
<div class="ttc" id="list_8h_xhtml_ae0c352207d36c7ba3fa1b970b1eadd51"><div class="ttname"><a href="list_8h.xhtml#ae0c352207d36c7ba3fa1b970b1eadd51">vListInsert</a></div><div class="ttdeci">void vListInsert(xList *pxList, xListItem *pxNewListItem)</div><div class="ttdef"><b>Definition:</b> list.c:119</div></div>
<div class="ttc" id="structx_l_i_s_t___i_t_e_m_xhtml_ac2ca2e783e5df63d71f4fa4b645dc02c"><div class="ttname"><a href="structx_l_i_s_t___i_t_e_m.xhtml#ac2ca2e783e5df63d71f4fa4b645dc02c">xLIST_ITEM::pxPrevious</a></div><div class="ttdeci">volatile struct xLIST_ITEM * pxPrevious</div><div class="ttdef"><b>Definition:</b> list.h:102</div></div>
<div class="ttc" id="structx_l_i_s_t_xhtml_af73243d3473954f4394ea00ee5788630"><div class="ttname"><a href="structx_l_i_s_t.xhtml#af73243d3473954f4394ea00ee5788630">xLIST::pxIndex</a></div><div class="ttdeci">volatile xListItem * pxIndex</div><div class="ttdef"><b>Definition:</b> list.h:122</div></div>
<div class="ttc" id="list_8h_xhtml_aa234bf74629ff34fbd8494a0f0112b42"><div class="ttname"><a href="list_8h.xhtml#aa234bf74629ff34fbd8494a0f0112b42">vListInsertEnd</a></div><div class="ttdeci">void vListInsertEnd(xList *pxList, xListItem *pxNewListItem)</div><div class="ttdef"><b>Definition:</b> list.c:96</div></div>
<div class="ttc" id="structx_m_i_n_i___l_i_s_t___i_t_e_m_xhtml_a83923c560fc4e7ad21ad0f8626c891fc"><div class="ttname"><a href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml#a83923c560fc4e7ad21ad0f8626c891fc">xMINI_LIST_ITEM::pxPrevious</a></div><div class="ttdeci">volatile struct xLIST_ITEM * pxPrevious</div><div class="ttdef"><b>Definition:</b> list.h:112</div></div>
<div class="ttc" id="list_8h_xhtml_a3cee7d8d40380f66ac73b8825b5a0fb0"><div class="ttname"><a href="list_8h.xhtml#a3cee7d8d40380f66ac73b8825b5a0fb0">xList</a></div><div class="ttdeci">struct xLIST xList</div></div>
<div class="ttc" id="list_8h_xhtml_a6c083a9d7103fca1c9abd0de20839651"><div class="ttname"><a href="list_8h.xhtml#a6c083a9d7103fca1c9abd0de20839651">vListRemove</a></div><div class="ttdeci">void vListRemove(xListItem *pxItemToRemove)</div><div class="ttdef"><b>Definition:</b> list.c:176</div></div>
<div class="ttc" id="structx_m_i_n_i___l_i_s_t___i_t_e_m_xhtml_a368416ac432b0b4596bd64acfa095b19"><div class="ttname"><a href="structx_m_i_n_i___l_i_s_t___i_t_e_m.xhtml#a368416ac432b0b4596bd64acfa095b19">xMINI_LIST_ITEM::xItemValue</a></div><div class="ttdeci">portTickType xItemValue</div><div class="ttdef"><b>Definition:</b> list.h:110</div></div>
<div class="ttc" id="structx_l_i_s_t___i_t_e_m_xhtml"><div class="ttname"><a href="structx_l_i_s_t___i_t_e_m.xhtml">xLIST_ITEM</a></div><div class="ttdef"><b>Definition:</b> list.h:98</div></div>
<div class="ttc" id="list_8h_xhtml_acc831631f04ca3f6fef79b0175f6d6e1"><div class="ttname"><a href="list_8h.xhtml#acc831631f04ca3f6fef79b0175f6d6e1">vListInitialise</a></div><div class="ttdeci">void vListInitialise(xList *pxList)</div><div class="ttdef"><b>Definition:</b> list.c:69</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
