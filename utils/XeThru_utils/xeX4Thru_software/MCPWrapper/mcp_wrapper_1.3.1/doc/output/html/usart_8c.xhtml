<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: examples/atmel_samg55/src/ASF/sam/drivers/usart/usart.c File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d28a4824dc47e487b107a5db32ef43c4.xhtml">examples</a></li><li class="navelem"><a class="el" href="dir_0e96b936377161858012b6f31c3bd790.xhtml">atmel_samg55</a></li><li class="navelem"><a class="el" href="dir_0ae219bfaa679f3dbaaacda5fb614d9c.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_67951177d7f5e66661a526635115739c.xhtml">ASF</a></li><li class="navelem"><a class="el" href="dir_48be2503ae6ae6de0698f11fb632640c.xhtml">sam</a></li><li class="navelem"><a class="el" href="dir_e6d561ac73579e0cda4a92437875255b.xhtml">drivers</a></li><li class="navelem"><a class="el" href="dir_81baf62f2db4b23720ab7ecc8517864e.xhtml">usart</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">usart.c File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Universal Synchronous Asynchronous Receiver Transmitter (USART) driver for SAM.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="drivers_2usart_2usart_8h_source.xhtml">usart.h</a>&quot;</code><br />
</div><div class="textblock"><div class="dynheader">
Include dependency graph for usart.c:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="usart_8c__incl.svg" width="178" height="142"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ga5bcadc89cde78bdf6b072773956e7e29"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga5bcadc89cde78bdf6b072773956e7e29">US_WPMR_WPKEY_PASSWD</a>&#160;&#160;&#160;US_WPMR_WPKEY(0x555341U)</td></tr>
<tr class="separator:ga5bcadc89cde78bdf6b072773956e7e29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga967c1d77b088addb87a10e37a9e152f5"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga967c1d77b088addb87a10e37a9e152f5">MIN_CD_VALUE</a>&#160;&#160;&#160;0x01</td></tr>
<tr class="separator:ga967c1d77b088addb87a10e37a9e152f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4511c9483910ae81f28937bf1907dd1b"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga4511c9483910ae81f28937bf1907dd1b">MIN_CD_VALUE_SPI</a>&#160;&#160;&#160;0x04</td></tr>
<tr class="separator:ga4511c9483910ae81f28937bf1907dd1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaffb0be54a0e5aa710dfb17b3ede74a70"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaffb0be54a0e5aa710dfb17b3ede74a70">MAX_CD_VALUE</a>&#160;&#160;&#160;<a class="el" href="group___s_a_m_g55___u_s_a_r_t.xhtml#ga0b17f9efd8463ee64487114c44cf06dd">US_BRGR_CD_Msk</a></td></tr>
<tr class="separator:gaffb0be54a0e5aa710dfb17b3ede74a70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga421fe847f1b9d8ade1bf955ab1a2dea6"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga421fe847f1b9d8ade1bf955ab1a2dea6">HIGH_FRQ_SAMPLE_DIV</a>&#160;&#160;&#160;16</td></tr>
<tr class="separator:ga421fe847f1b9d8ade1bf955ab1a2dea6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafe512b69f3ab7ad2cdae5b2defd00eac"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gafe512b69f3ab7ad2cdae5b2defd00eac">LOW_FRQ_SAMPLE_DIV</a>&#160;&#160;&#160;8</td></tr>
<tr class="separator:gafe512b69f3ab7ad2cdae5b2defd00eac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga38be032d093b5478ab8d279ff1f8befe"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga38be032d093b5478ab8d279ff1f8befe">MAX_TRAN_GUARD_TIME</a>&#160;&#160;&#160;<a class="el" href="group___s_a_m_g55___u_s_a_r_t.xhtml#gaa008f1e11bc961b0f56ca7f6a6def9cf">US_TTGR_TG_Msk</a></td></tr>
<tr class="separator:ga38be032d093b5478ab8d279ff1f8befe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa8e49570158748728a0f717eac1261d9"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaa8e49570158748728a0f717eac1261d9">USART_PARITY_ERROR</a>&#160;&#160;&#160;5</td></tr>
<tr class="separator:gaa8e49570158748728a0f717eac1261d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga134a57d20403fa19f14072690909a018"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga134a57d20403fa19f14072690909a018">ISO7816_T_0</a>&#160;&#160;&#160;0</td></tr>
<tr class="separator:ga134a57d20403fa19f14072690909a018"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2466ec97f8257c58024fb21d634d65be"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga2466ec97f8257c58024fb21d634d65be">ISO7816_T_1</a>&#160;&#160;&#160;1</td></tr>
<tr class="separator:ga2466ec97f8257c58024fb21d634d65be"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:gaafe097c01c082b270c1057722d524f5b"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaafe097c01c082b270c1057722d524f5b">usart_set_async_baudrate</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t baudrate, uint32_t ul_mck)</td></tr>
<tr class="memdesc:gaafe097c01c082b270c1057722d524f5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a clock divider(CD) and a fractional part (FP) for the USART asynchronous modes to generate a baudrate as close as possible to the baudrate set point.  <a href="group__sam__drivers__usart__group.xhtml#gaafe097c01c082b270c1057722d524f5b">More...</a><br /></td></tr>
<tr class="separator:gaafe097c01c082b270c1057722d524f5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac6c9d28298b3db2195c7fb3ffe999678"><td class="memItemLeft" align="right" valign="top">static uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gac6c9d28298b3db2195c7fb3ffe999678">usart_set_sync_master_baudrate</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t baudrate, uint32_t ul_mck)</td></tr>
<tr class="memdesc:gac6c9d28298b3db2195c7fb3ffe999678"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a clock divider for the USART synchronous master modes to generate a baudrate as close as possible to the baudrate set point.  <a href="group__sam__drivers__usart__group.xhtml#gac6c9d28298b3db2195c7fb3ffe999678">More...</a><br /></td></tr>
<tr class="separator:gac6c9d28298b3db2195c7fb3ffe999678"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d4739357149c140c2e283a287158608"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga6d4739357149c140c2e283a287158608">usart_set_sync_slave_baudrate</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga6d4739357149c140c2e283a287158608"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select the SCK pin as the source of baud rate for the USART synchronous slave modes.  <a href="group__sam__drivers__usart__group.xhtml#ga6d4739357149c140c2e283a287158608">More...</a><br /></td></tr>
<tr class="separator:ga6d4739357149c140c2e283a287158608"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaae31ff0122d054b1a03f9adfba47995e"><td class="memItemLeft" align="right" valign="top">static uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaae31ff0122d054b1a03f9adfba47995e">usart_set_spi_master_baudrate</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t baudrate, uint32_t ul_mck)</td></tr>
<tr class="memdesc:gaae31ff0122d054b1a03f9adfba47995e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a clock divider (<em>CD</em>) for the USART SPI master mode to generate a baud rate as close as possible to the baud rate set point.  <a href="group__sam__drivers__usart__group.xhtml#gaae31ff0122d054b1a03f9adfba47995e">More...</a><br /></td></tr>
<tr class="separator:gaae31ff0122d054b1a03f9adfba47995e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4740fd3e308857e7d074802e08db1cbe"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga4740fd3e308857e7d074802e08db1cbe">usart_set_spi_slave_baudrate</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga4740fd3e308857e7d074802e08db1cbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Select the SCK pin as the source of baudrate for the USART SPI slave mode.  <a href="group__sam__drivers__usart__group.xhtml#ga4740fd3e308857e7d074802e08db1cbe">More...</a><br /></td></tr>
<tr class="separator:ga4740fd3e308857e7d074802e08db1cbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6cb84f0297ddca62d4077f616efa5c5b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga6cb84f0297ddca62d4077f616efa5c5b">usart_reset</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga6cb84f0297ddca62d4077f616efa5c5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset the USART and disable TX and RX.  <a href="group__sam__drivers__usart__group.xhtml#ga6cb84f0297ddca62d4077f616efa5c5b">More...</a><br /></td></tr>
<tr class="separator:ga6cb84f0297ddca62d4077f616efa5c5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeef2121bcab41f9850e58c59fdc34d10"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaeef2121bcab41f9850e58c59fdc34d10">usart_init_rs232</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:gaeef2121bcab41f9850e58c59fdc34d10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in RS232 mode.  <a href="group__sam__drivers__usart__group.xhtml#gaeef2121bcab41f9850e58c59fdc34d10">More...</a><br /></td></tr>
<tr class="separator:gaeef2121bcab41f9850e58c59fdc34d10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8ea87f1c2b00747e7a5de5b36aa0cc71"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga8ea87f1c2b00747e7a5de5b36aa0cc71">usart_init_hw_handshaking</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga8ea87f1c2b00747e7a5de5b36aa0cc71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in hardware handshaking mode.  <a href="group__sam__drivers__usart__group.xhtml#ga8ea87f1c2b00747e7a5de5b36aa0cc71">More...</a><br /></td></tr>
<tr class="separator:ga8ea87f1c2b00747e7a5de5b36aa0cc71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6bd028774207fe19e370e77f0fdf820f"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga6bd028774207fe19e370e77f0fdf820f">usart_init_sync_master</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga6bd028774207fe19e370e77f0fdf820f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in SYNC mode and act as a master.  <a href="group__sam__drivers__usart__group.xhtml#ga6bd028774207fe19e370e77f0fdf820f">More...</a><br /></td></tr>
<tr class="separator:ga6bd028774207fe19e370e77f0fdf820f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad7379a739d799d82f34da103d32757c1"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gad7379a739d799d82f34da103d32757c1">usart_init_sync_slave</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt)</td></tr>
<tr class="memdesc:gad7379a739d799d82f34da103d32757c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in SYNC mode and act as a slave.  <a href="group__sam__drivers__usart__group.xhtml#gad7379a739d799d82f34da103d32757c1">More...</a><br /></td></tr>
<tr class="separator:gad7379a739d799d82f34da103d32757c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7265d736a562d24e880c0c5e10c41a48"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga7265d736a562d24e880c0c5e10c41a48">usart_init_rs485</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga7265d736a562d24e880c0c5e10c41a48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in RS485 mode.  <a href="group__sam__drivers__usart__group.xhtml#ga7265d736a562d24e880c0c5e10c41a48">More...</a><br /></td></tr>
<tr class="separator:ga7265d736a562d24e880c0c5e10c41a48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga952a5fffe9547e48e5d1c74230786d78"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga952a5fffe9547e48e5d1c74230786d78">usart_init_irda</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structsam__usart__opt__t.xhtml">sam_usart_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga952a5fffe9547e48e5d1c74230786d78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in IrDA mode.  <a href="group__sam__drivers__usart__group.xhtml#ga952a5fffe9547e48e5d1c74230786d78">More...</a><br /></td></tr>
<tr class="separator:ga952a5fffe9547e48e5d1c74230786d78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga70edd599706d258d5a263181930619ae"><td class="memItemLeft" align="right" valign="top">static uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga70edd599706d258d5a263181930619ae">usart_set_iso7816_clock</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t clock, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga70edd599706d258d5a263181930619ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate a clock divider (<em>CD</em>) for the USART ISO7816 mode to generate an ISO7816 clock as close as possible to the clock set point.  <a href="group__sam__drivers__usart__group.xhtml#ga70edd599706d258d5a263181930619ae">More...</a><br /></td></tr>
<tr class="separator:ga70edd599706d258d5a263181930619ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32c4c057c3d5961bb3d6977b8e72483b"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga32c4c057c3d5961bb3d6977b8e72483b">usart_init_iso7816</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structusart__iso7816__opt__t.xhtml">usart_iso7816_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:ga32c4c057c3d5961bb3d6977b8e72483b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in ISO7816 mode.  <a href="group__sam__drivers__usart__group.xhtml#ga32c4c057c3d5961bb3d6977b8e72483b">More...</a><br /></td></tr>
<tr class="separator:ga32c4c057c3d5961bb3d6977b8e72483b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7c516011cb7f9a4d59d173a8be206d19"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga7c516011cb7f9a4d59d173a8be206d19">usart_reset_iterations</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga7c516011cb7f9a4d59d173a8be206d19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset the ITERATION in US_CSR when the ISO7816 mode is enabled.  <a href="group__sam__drivers__usart__group.xhtml#ga7c516011cb7f9a4d59d173a8be206d19">More...</a><br /></td></tr>
<tr class="separator:ga7c516011cb7f9a4d59d173a8be206d19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad4bb30861c72801f19bb8fb0ac19362e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gad4bb30861c72801f19bb8fb0ac19362e">usart_reset_nack</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gad4bb30861c72801f19bb8fb0ac19362e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset NACK in US_CSR.  <a href="group__sam__drivers__usart__group.xhtml#gad4bb30861c72801f19bb8fb0ac19362e">More...</a><br /></td></tr>
<tr class="separator:gad4bb30861c72801f19bb8fb0ac19362e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab39cc4289bde563c4d58ecd22765319c"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gab39cc4289bde563c4d58ecd22765319c">usart_is_rx_buf_end</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gab39cc4289bde563c4d58ecd22765319c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if one receive buffer is filled.  <a href="group__sam__drivers__usart__group.xhtml#gab39cc4289bde563c4d58ecd22765319c">More...</a><br /></td></tr>
<tr class="separator:gab39cc4289bde563c4d58ecd22765319c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e7df5c46585d438d8886b4461d15d62"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga3e7df5c46585d438d8886b4461d15d62">usart_is_tx_buf_end</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga3e7df5c46585d438d8886b4461d15d62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if one transmit buffer is empty.  <a href="group__sam__drivers__usart__group.xhtml#ga3e7df5c46585d438d8886b4461d15d62">More...</a><br /></td></tr>
<tr class="separator:ga3e7df5c46585d438d8886b4461d15d62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga212169bdb555142fa879a1f3ed7b0fd7"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga212169bdb555142fa879a1f3ed7b0fd7">usart_is_rx_buf_full</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga212169bdb555142fa879a1f3ed7b0fd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if both receive buffers are full.  <a href="group__sam__drivers__usart__group.xhtml#ga212169bdb555142fa879a1f3ed7b0fd7">More...</a><br /></td></tr>
<tr class="separator:ga212169bdb555142fa879a1f3ed7b0fd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga911274fe177ba10bbd156ac1a212ae23"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga911274fe177ba10bbd156ac1a212ae23">usart_is_tx_buf_empty</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga911274fe177ba10bbd156ac1a212ae23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if both transmit buffers are empty.  <a href="group__sam__drivers__usart__group.xhtml#ga911274fe177ba10bbd156ac1a212ae23">More...</a><br /></td></tr>
<tr class="separator:ga911274fe177ba10bbd156ac1a212ae23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaddb54159a61d5b777ffcf99cd3914ca1"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaddb54159a61d5b777ffcf99cd3914ca1">usart_get_error_number</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaddb54159a61d5b777ffcf99cd3914ca1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the total number of errors that occur during an ISO7816 transfer.  <a href="group__sam__drivers__usart__group.xhtml#gaddb54159a61d5b777ffcf99cd3914ca1">More...</a><br /></td></tr>
<tr class="separator:gaddb54159a61d5b777ffcf99cd3914ca1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf3725cfa2de4be9eceab8b0c36a2080a"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf3725cfa2de4be9eceab8b0c36a2080a">usart_init_spi_master</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structusart__spi__opt__t.xhtml">usart_spi_opt_t</a> *p_usart_opt, uint32_t ul_mck)</td></tr>
<tr class="memdesc:gaf3725cfa2de4be9eceab8b0c36a2080a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in SPI mode and act as a master.  <a href="group__sam__drivers__usart__group.xhtml#gaf3725cfa2de4be9eceab8b0c36a2080a">More...</a><br /></td></tr>
<tr class="separator:gaf3725cfa2de4be9eceab8b0c36a2080a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf42f05f73f1095fc7a2b28ebbf97bf4b"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf42f05f73f1095fc7a2b28ebbf97bf4b">usart_init_spi_slave</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const <a class="el" href="structusart__spi__opt__t.xhtml">usart_spi_opt_t</a> *p_usart_opt)</td></tr>
<tr class="memdesc:gaf42f05f73f1095fc7a2b28ebbf97bf4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure USART to work in SPI mode and act as a slave.  <a href="group__sam__drivers__usart__group.xhtml#gaf42f05f73f1095fc7a2b28ebbf97bf4b">More...</a><br /></td></tr>
<tr class="separator:gaf42f05f73f1095fc7a2b28ebbf97bf4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c3a4036f8b9b21f833a641b07b84f6c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga1c3a4036f8b9b21f833a641b07b84f6c">usart_enable_tx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga1c3a4036f8b9b21f833a641b07b84f6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable USART transmitter.  <a href="group__sam__drivers__usart__group.xhtml#ga1c3a4036f8b9b21f833a641b07b84f6c">More...</a><br /></td></tr>
<tr class="separator:ga1c3a4036f8b9b21f833a641b07b84f6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf12c50dd99d9b0e3e3719e840e05aaf6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf12c50dd99d9b0e3e3719e840e05aaf6">usart_disable_tx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaf12c50dd99d9b0e3e3719e840e05aaf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable USART transmitter.  <a href="group__sam__drivers__usart__group.xhtml#gaf12c50dd99d9b0e3e3719e840e05aaf6">More...</a><br /></td></tr>
<tr class="separator:gaf12c50dd99d9b0e3e3719e840e05aaf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga123b84a0d5be1cbf1a3c5bac4af3d27d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga123b84a0d5be1cbf1a3c5bac4af3d27d">usart_reset_tx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga123b84a0d5be1cbf1a3c5bac4af3d27d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Immediately stop and disable USART transmitter.  <a href="group__sam__drivers__usart__group.xhtml#ga123b84a0d5be1cbf1a3c5bac4af3d27d">More...</a><br /></td></tr>
<tr class="separator:ga123b84a0d5be1cbf1a3c5bac4af3d27d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga75f8c53d5b4c51d302970f94ec296115"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga75f8c53d5b4c51d302970f94ec296115">usart_set_tx_timeguard</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t timeguard)</td></tr>
<tr class="memdesc:ga75f8c53d5b4c51d302970f94ec296115"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure the transmit timeguard register.  <a href="group__sam__drivers__usart__group.xhtml#ga75f8c53d5b4c51d302970f94ec296115">More...</a><br /></td></tr>
<tr class="separator:ga75f8c53d5b4c51d302970f94ec296115"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fd617322d666621fee15501ae0de7c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga7fd617322d666621fee15501ae0de7c7">usart_enable_rx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga7fd617322d666621fee15501ae0de7c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable USART receiver.  <a href="group__sam__drivers__usart__group.xhtml#ga7fd617322d666621fee15501ae0de7c7">More...</a><br /></td></tr>
<tr class="separator:ga7fd617322d666621fee15501ae0de7c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad9c333a3706f3bfad6f9b74f30495879"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gad9c333a3706f3bfad6f9b74f30495879">usart_disable_rx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gad9c333a3706f3bfad6f9b74f30495879"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable USART receiver.  <a href="group__sam__drivers__usart__group.xhtml#gad9c333a3706f3bfad6f9b74f30495879">More...</a><br /></td></tr>
<tr class="separator:gad9c333a3706f3bfad6f9b74f30495879"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga86ad3a57b19fb497ef2271d6dc87c359"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga86ad3a57b19fb497ef2271d6dc87c359">usart_reset_rx</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga86ad3a57b19fb497ef2271d6dc87c359"><td class="mdescLeft">&#160;</td><td class="mdescRight">Immediately stop and disable USART receiver.  <a href="group__sam__drivers__usart__group.xhtml#ga86ad3a57b19fb497ef2271d6dc87c359">More...</a><br /></td></tr>
<tr class="separator:ga86ad3a57b19fb497ef2271d6dc87c359"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6c93002d564e25a12975a7f0c6c1564b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga6c93002d564e25a12975a7f0c6c1564b">usart_set_rx_timeout</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t timeout)</td></tr>
<tr class="memdesc:ga6c93002d564e25a12975a7f0c6c1564b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure the receive timeout register.  <a href="group__sam__drivers__usart__group.xhtml#ga6c93002d564e25a12975a7f0c6c1564b">More...</a><br /></td></tr>
<tr class="separator:ga6c93002d564e25a12975a7f0c6c1564b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga33c4b214e790bf6b04c8867dd66c3336"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga33c4b214e790bf6b04c8867dd66c3336">usart_enable_interrupt</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_sources)</td></tr>
<tr class="memdesc:ga33c4b214e790bf6b04c8867dd66c3336"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable USART interrupts.  <a href="group__sam__drivers__usart__group.xhtml#ga33c4b214e790bf6b04c8867dd66c3336">More...</a><br /></td></tr>
<tr class="separator:ga33c4b214e790bf6b04c8867dd66c3336"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa3a3c3eb673f70359570302dcf1a5b6a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaa3a3c3eb673f70359570302dcf1a5b6a">usart_disable_interrupt</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_sources)</td></tr>
<tr class="memdesc:gaa3a3c3eb673f70359570302dcf1a5b6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable USART interrupts.  <a href="group__sam__drivers__usart__group.xhtml#gaa3a3c3eb673f70359570302dcf1a5b6a">More...</a><br /></td></tr>
<tr class="separator:gaa3a3c3eb673f70359570302dcf1a5b6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf2a63720ac25579075bf9191c601c7ea"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf2a63720ac25579075bf9191c601c7ea">usart_get_interrupt_mask</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaf2a63720ac25579075bf9191c601c7ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read USART interrupt mask.  <a href="group__sam__drivers__usart__group.xhtml#gaf2a63720ac25579075bf9191c601c7ea">More...</a><br /></td></tr>
<tr class="separator:gaf2a63720ac25579075bf9191c601c7ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadedd154647a6401b9feab44a0620fea1"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gadedd154647a6401b9feab44a0620fea1">usart_get_status</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gadedd154647a6401b9feab44a0620fea1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get current status.  <a href="group__sam__drivers__usart__group.xhtml#gadedd154647a6401b9feab44a0620fea1">More...</a><br /></td></tr>
<tr class="separator:gadedd154647a6401b9feab44a0620fea1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e19efeb524c1fba4b962e72283dcc11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga4e19efeb524c1fba4b962e72283dcc11">usart_reset_status</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga4e19efeb524c1fba4b962e72283dcc11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).  <a href="group__sam__drivers__usart__group.xhtml#ga4e19efeb524c1fba4b962e72283dcc11">More...</a><br /></td></tr>
<tr class="separator:ga4e19efeb524c1fba4b962e72283dcc11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac81e3129ca9032294961167a86a1da5f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gac81e3129ca9032294961167a86a1da5f">usart_start_tx_break</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gac81e3129ca9032294961167a86a1da5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start transmission of a break.  <a href="group__sam__drivers__usart__group.xhtml#gac81e3129ca9032294961167a86a1da5f">More...</a><br /></td></tr>
<tr class="separator:gac81e3129ca9032294961167a86a1da5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf581748a222b09334b4e7b963eaccc0c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf581748a222b09334b4e7b963eaccc0c">usart_stop_tx_break</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaf581748a222b09334b4e7b963eaccc0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop transmission of a break.  <a href="group__sam__drivers__usart__group.xhtml#gaf581748a222b09334b4e7b963eaccc0c">More...</a><br /></td></tr>
<tr class="separator:gaf581748a222b09334b4e7b963eaccc0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga21b61657bfa8bc395dd4c5f05f531788"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga21b61657bfa8bc395dd4c5f05f531788">usart_start_rx_timeout</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga21b61657bfa8bc395dd4c5f05f531788"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start waiting for a character before clocking the timeout count.  <a href="group__sam__drivers__usart__group.xhtml#ga21b61657bfa8bc395dd4c5f05f531788">More...</a><br /></td></tr>
<tr class="separator:ga21b61657bfa8bc395dd4c5f05f531788"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga55533226a26ce5279457601bc995b9c5"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga55533226a26ce5279457601bc995b9c5">usart_send_address</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t ul_addr)</td></tr>
<tr class="memdesc:ga55533226a26ce5279457601bc995b9c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">In Multidrop mode only, the next character written to the US_THR is sent with the address bit set.  <a href="group__sam__drivers__usart__group.xhtml#ga55533226a26ce5279457601bc995b9c5">More...</a><br /></td></tr>
<tr class="separator:ga55533226a26ce5279457601bc995b9c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5d7a3fc36901ee31049c661066af6553"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga5d7a3fc36901ee31049c661066af6553">usart_restart_rx_timeout</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga5d7a3fc36901ee31049c661066af6553"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restart the receive timeout.  <a href="group__sam__drivers__usart__group.xhtml#ga5d7a3fc36901ee31049c661066af6553">More...</a><br /></td></tr>
<tr class="separator:ga5d7a3fc36901ee31049c661066af6553"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga790d8d33caa3f4d925f1ec143d6305ae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga790d8d33caa3f4d925f1ec143d6305ae">usart_drive_RTS_pin_low</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga790d8d33caa3f4d925f1ec143d6305ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Drive the pin RTS to 0.  <a href="group__sam__drivers__usart__group.xhtml#ga790d8d33caa3f4d925f1ec143d6305ae">More...</a><br /></td></tr>
<tr class="separator:ga790d8d33caa3f4d925f1ec143d6305ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga930438dce6fbe82394c706b775cf2f0a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga930438dce6fbe82394c706b775cf2f0a">usart_drive_RTS_pin_high</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga930438dce6fbe82394c706b775cf2f0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Drive the pin RTS to 1.  <a href="group__sam__drivers__usart__group.xhtml#ga930438dce6fbe82394c706b775cf2f0a">More...</a><br /></td></tr>
<tr class="separator:ga930438dce6fbe82394c706b775cf2f0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf29b2e7c010fb15a137cc647742dd7f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaf29b2e7c010fb15a137cc647742dd7f7">usart_spi_force_chip_select</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaf29b2e7c010fb15a137cc647742dd7f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.  <a href="group__sam__drivers__usart__group.xhtml#gaf29b2e7c010fb15a137cc647742dd7f7">More...</a><br /></td></tr>
<tr class="separator:gaf29b2e7c010fb15a137cc647742dd7f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab5ecc0dc1577f065fda6afaaaa069a57"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gab5ecc0dc1577f065fda6afaaaa069a57">usart_spi_release_chip_select</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gab5ecc0dc1577f065fda6afaaaa069a57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.  <a href="group__sam__drivers__usart__group.xhtml#gab5ecc0dc1577f065fda6afaaaa069a57">More...</a><br /></td></tr>
<tr class="separator:gab5ecc0dc1577f065fda6afaaaa069a57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac0b33a2b7a3115c29dd85565984f46b5"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gac0b33a2b7a3115c29dd85565984f46b5">usart_is_tx_ready</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gac0b33a2b7a3115c29dd85565984f46b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if Transmit is Ready.  <a href="group__sam__drivers__usart__group.xhtml#gac0b33a2b7a3115c29dd85565984f46b5">More...</a><br /></td></tr>
<tr class="separator:gac0b33a2b7a3115c29dd85565984f46b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac30ba4e208ac3928d05aa06ef22ac266"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gac30ba4e208ac3928d05aa06ef22ac266">usart_is_tx_empty</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gac30ba4e208ac3928d05aa06ef22ac266"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if Transmit Holding Register is empty.  <a href="group__sam__drivers__usart__group.xhtml#gac30ba4e208ac3928d05aa06ef22ac266">More...</a><br /></td></tr>
<tr class="separator:gac30ba4e208ac3928d05aa06ef22ac266"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f88f9b3e78b92b53016420c3594fcf6"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga9f88f9b3e78b92b53016420c3594fcf6">usart_is_rx_ready</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga9f88f9b3e78b92b53016420c3594fcf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the received data are ready.  <a href="group__sam__drivers__usart__group.xhtml#ga9f88f9b3e78b92b53016420c3594fcf6">More...</a><br /></td></tr>
<tr class="separator:ga9f88f9b3e78b92b53016420c3594fcf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa9593727b910df8c0e9c359c5d7004ec"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaa9593727b910df8c0e9c359c5d7004ec">usart_write</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t c)</td></tr>
<tr class="memdesc:gaa9593727b910df8c0e9c359c5d7004ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write to USART Transmit Holding Register.  <a href="group__sam__drivers__usart__group.xhtml#gaa9593727b910df8c0e9c359c5d7004ec">More...</a><br /></td></tr>
<tr class="separator:gaa9593727b910df8c0e9c359c5d7004ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gace816375e1905a329cffd46e3ffd89b1"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gace816375e1905a329cffd46e3ffd89b1">usart_putchar</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t c)</td></tr>
<tr class="memdesc:gace816375e1905a329cffd46e3ffd89b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write to USART Transmit Holding Register.  <a href="group__sam__drivers__usart__group.xhtml#gace816375e1905a329cffd46e3ffd89b1">More...</a><br /></td></tr>
<tr class="separator:gace816375e1905a329cffd46e3ffd89b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafdee4a457c8cefe46e45ec63902a86c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gafdee4a457c8cefe46e45ec63902a86c7">usart_write_line</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, const char *string)</td></tr>
<tr class="memdesc:gafdee4a457c8cefe46e45ec63902a86c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write one-line string through USART.  <a href="group__sam__drivers__usart__group.xhtml#gafdee4a457c8cefe46e45ec63902a86c7">More...</a><br /></td></tr>
<tr class="separator:gafdee4a457c8cefe46e45ec63902a86c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae2776f27eb9e4219bbc6245f41662fa9"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gae2776f27eb9e4219bbc6245f41662fa9">usart_read</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t *c)</td></tr>
<tr class="memdesc:gae2776f27eb9e4219bbc6245f41662fa9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read from USART Receive Holding Register.  <a href="group__sam__drivers__usart__group.xhtml#gae2776f27eb9e4219bbc6245f41662fa9">More...</a><br /></td></tr>
<tr class="separator:gae2776f27eb9e4219bbc6245f41662fa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga09984d6dcb9a64117a0a8c2e5c32a8ec"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga09984d6dcb9a64117a0a8c2e5c32a8ec">usart_getchar</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart, uint32_t *c)</td></tr>
<tr class="memdesc:ga09984d6dcb9a64117a0a8c2e5c32a8ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read from USART Receive Holding Register.  <a href="group__sam__drivers__usart__group.xhtml#ga09984d6dcb9a64117a0a8c2e5c32a8ec">More...</a><br /></td></tr>
<tr class="separator:ga09984d6dcb9a64117a0a8c2e5c32a8ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae309dfc5ea5e993434ea031e2ac616c4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_pdc.xhtml">Pdc</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gae309dfc5ea5e993434ea031e2ac616c4">usart_get_pdc_base</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gae309dfc5ea5e993434ea031e2ac616c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get USART PDC base address.  <a href="group__sam__drivers__usart__group.xhtml#gae309dfc5ea5e993434ea031e2ac616c4">More...</a><br /></td></tr>
<tr class="separator:gae309dfc5ea5e993434ea031e2ac616c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa74733b3e78a560568cc22708ac0d1be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gaa74733b3e78a560568cc22708ac0d1be">usart_enable_writeprotect</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gaa74733b3e78a560568cc22708ac0d1be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable write protect of USART registers.  <a href="group__sam__drivers__usart__group.xhtml#gaa74733b3e78a560568cc22708ac0d1be">More...</a><br /></td></tr>
<tr class="separator:gaa74733b3e78a560568cc22708ac0d1be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabdf1b8bf1b4da95d3a314c4916799e88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#gabdf1b8bf1b4da95d3a314c4916799e88">usart_disable_writeprotect</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:gabdf1b8bf1b4da95d3a314c4916799e88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable write protect of USART registers.  <a href="group__sam__drivers__usart__group.xhtml#gabdf1b8bf1b4da95d3a314c4916799e88">More...</a><br /></td></tr>
<tr class="separator:gabdf1b8bf1b4da95d3a314c4916799e88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga548d63d04cff612d9b9b628d1fdd98cb"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__usart__group.xhtml#ga548d63d04cff612d9b9b628d1fdd98cb">usart_get_writeprotect_status</a> (<a class="el" href="struct_usart.xhtml">Usart</a> *p_usart)</td></tr>
<tr class="memdesc:ga548d63d04cff612d9b9b628d1fdd98cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get write protect status.  <a href="group__sam__drivers__usart__group.xhtml#ga548d63d04cff612d9b9b628d1fdd98cb">More...</a><br /></td></tr>
<tr class="separator:ga548d63d04cff612d9b9b628d1fdd98cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Universal Synchronous Asynchronous Receiver Transmitter (USART) driver for SAM. </p>
<p>Copyright (c) 2011-2015 Atmel Corporation. All rights reserved. </p>
</div></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
