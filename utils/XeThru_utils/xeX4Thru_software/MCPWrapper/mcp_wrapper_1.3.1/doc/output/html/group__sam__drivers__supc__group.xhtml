<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Module Communication Protocol Wrapper - MCPW: Supply Controller (SUPC)</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">Module Communication Protocol Wrapper - MCPW
        </div>
        <div id="projectbrief" class="col-sm-12">Host side implementation of MCP</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Supply Controller (SUPC)</div>  </div>
</div><!--header-->
<div class="contents">

<p>Driver for the SUPC (Supply Controller).  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga96f287f9fb31b284af4e12f1323577e1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga96f287f9fb31b284af4e12f1323577e1">supc_enable_backup_mode</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:ga96f287f9fb31b284af4e12f1323577e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Switch off the voltage regulator to put the device in backup mode.  <a href="#ga96f287f9fb31b284af4e12f1323577e1">More...</a><br /></td></tr>
<tr class="separator:ga96f287f9fb31b284af4e12f1323577e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga362e1eeffd7afc90c6f4c40384f4fe83"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga362e1eeffd7afc90c6f4c40384f4fe83">supc_enable_voltage_regulator</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:ga362e1eeffd7afc90c6f4c40384f4fe83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable the internal voltage regulator.  <a href="#ga362e1eeffd7afc90c6f4c40384f4fe83">More...</a><br /></td></tr>
<tr class="separator:ga362e1eeffd7afc90c6f4c40384f4fe83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf0164700019086d51d8c480475cbec78"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#gaf0164700019086d51d8c480475cbec78">supc_disable_voltage_regulator</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:gaf0164700019086d51d8c480475cbec78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable the internal voltage regulator to supply VDDCORE with an external supply.  <a href="#gaf0164700019086d51d8c480475cbec78">More...</a><br /></td></tr>
<tr class="separator:gaf0164700019086d51d8c480475cbec78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1970c9a25b8f8b9d4c7b244c6aa897bd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga1970c9a25b8f8b9d4c7b244c6aa897bd">supc_switch_sclk_to_32kxtal</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc, uint32_t ul_bypass)</td></tr>
<tr class="memdesc:ga1970c9a25b8f8b9d4c7b244c6aa897bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Switch slow clock source selection to external 32k (Xtal or Bypass) oscillator.  <a href="#ga1970c9a25b8f8b9d4c7b244c6aa897bd">More...</a><br /></td></tr>
<tr class="separator:ga1970c9a25b8f8b9d4c7b244c6aa897bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e30359b679b14897339120ffc3b7d92"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga9e30359b679b14897339120ffc3b7d92">supc_enable_brownout_detector</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:ga9e30359b679b14897339120ffc3b7d92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable the core brownout detector.  <a href="#ga9e30359b679b14897339120ffc3b7d92">More...</a><br /></td></tr>
<tr class="separator:ga9e30359b679b14897339120ffc3b7d92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf35e9b0ab6158155145e45164208c799"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#gaf35e9b0ab6158155145e45164208c799">supc_disable_brownout_detector</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:gaf35e9b0ab6158155145e45164208c799"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable the core brownout detector.  <a href="#gaf35e9b0ab6158155145e45164208c799">More...</a><br /></td></tr>
<tr class="separator:gaf35e9b0ab6158155145e45164208c799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf0e0333b0981264d2ee4beb39dfffe7e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#gaf0e0333b0981264d2ee4beb39dfffe7e">supc_enable_brownout_reset</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:gaf0e0333b0981264d2ee4beb39dfffe7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable the assertion of core reset signal when a brownout detection occurs.  <a href="#gaf0e0333b0981264d2ee4beb39dfffe7e">More...</a><br /></td></tr>
<tr class="separator:gaf0e0333b0981264d2ee4beb39dfffe7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga097720c590544fb71432d0c174ce48a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga097720c590544fb71432d0c174ce48a5">supc_disable_brownout_reset</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:ga097720c590544fb71432d0c174ce48a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable the assertion of core reset signal when a brownout detection occurs.  <a href="#ga097720c590544fb71432d0c174ce48a5">More...</a><br /></td></tr>
<tr class="separator:ga097720c590544fb71432d0c174ce48a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga96b3334eb3eb23226f1cb7ed9fc19a24"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga96b3334eb3eb23226f1cb7ed9fc19a24">supc_set_monitor_threshold</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc, uint32_t ul_threshold)</td></tr>
<tr class="memdesc:ga96b3334eb3eb23226f1cb7ed9fc19a24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set Supply monitor threshold.  <a href="#ga96b3334eb3eb23226f1cb7ed9fc19a24">More...</a><br /></td></tr>
<tr class="separator:ga96b3334eb3eb23226f1cb7ed9fc19a24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga46c8d85ecca0d28616403fe1090af6a3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga46c8d85ecca0d28616403fe1090af6a3">supc_set_monitor_sampling_period</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc, uint32_t ul_period)</td></tr>
<tr class="memdesc:ga46c8d85ecca0d28616403fe1090af6a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set Supply monitor sampling period.  <a href="#ga46c8d85ecca0d28616403fe1090af6a3">More...</a><br /></td></tr>
<tr class="separator:ga46c8d85ecca0d28616403fe1090af6a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaab11836ad8db91184f95af7dcb913e6d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#gaab11836ad8db91184f95af7dcb913e6d">supc_enable_monitor_reset</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:gaab11836ad8db91184f95af7dcb913e6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable the assertion of the core reset signal when a supply monitor detection occurs.  <a href="#gaab11836ad8db91184f95af7dcb913e6d">More...</a><br /></td></tr>
<tr class="separator:gaab11836ad8db91184f95af7dcb913e6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2aa5610d2a9f191d543e7b8ee3a26531"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga2aa5610d2a9f191d543e7b8ee3a26531">supc_disable_monitor_reset</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:ga2aa5610d2a9f191d543e7b8ee3a26531"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable the assertion of core reset signal when a supply monitor detection occurs.  <a href="#ga2aa5610d2a9f191d543e7b8ee3a26531">More...</a><br /></td></tr>
<tr class="separator:ga2aa5610d2a9f191d543e7b8ee3a26531"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga880cbc006ebfb8b7842e4fb9363639b0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga880cbc006ebfb8b7842e4fb9363639b0">supc_enable_monitor_interrupt</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:ga880cbc006ebfb8b7842e4fb9363639b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable the assertion of SUPC interrupt signal when a supply monitor detection occurs.  <a href="#ga880cbc006ebfb8b7842e4fb9363639b0">More...</a><br /></td></tr>
<tr class="separator:ga880cbc006ebfb8b7842e4fb9363639b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga479cda286b57ac61d0576d7adaf81430"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga479cda286b57ac61d0576d7adaf81430">supc_disable_monitor_interrupt</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:ga479cda286b57ac61d0576d7adaf81430"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disable the assertion of SUPC interrupt signal when a supply monitor detection occurs.  <a href="#ga479cda286b57ac61d0576d7adaf81430">More...</a><br /></td></tr>
<tr class="separator:ga479cda286b57ac61d0576d7adaf81430"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa53426ae2b622bb225f01d44fde8deb7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#gaa53426ae2b622bb225f01d44fde8deb7">supc_set_wakeup_mode</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc, uint32_t ul_mode)</td></tr>
<tr class="memdesc:gaa53426ae2b622bb225f01d44fde8deb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set system controller wake up mode.  <a href="#gaa53426ae2b622bb225f01d44fde8deb7">More...</a><br /></td></tr>
<tr class="separator:gaa53426ae2b622bb225f01d44fde8deb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2b92b347d6cf7a6c9d4c5b5af91e5d78"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga2b92b347d6cf7a6c9d4c5b5af91e5d78">supc_set_wakeup_inputs</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc, uint32_t ul_inputs, uint32_t ul_transition)</td></tr>
<tr class="memdesc:ga2b92b347d6cf7a6c9d4c5b5af91e5d78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set system controller wake up inputs.  <a href="#ga2b92b347d6cf7a6c9d4c5b5af91e5d78">More...</a><br /></td></tr>
<tr class="separator:ga2b92b347d6cf7a6c9d4c5b5af91e5d78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga544070245321baca4f43b8c49cd24ead"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sam__drivers__supc__group.xhtml#ga544070245321baca4f43b8c49cd24ead">supc_get_status</a> (<a class="el" href="struct_supc.xhtml">Supc</a> *p_supc)</td></tr>
<tr class="memdesc:ga544070245321baca4f43b8c49cd24ead"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get supply controller status.  <a href="#ga544070245321baca4f43b8c49cd24ead">More...</a><br /></td></tr>
<tr class="separator:ga544070245321baca4f43b8c49cd24ead"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Driver for the SUPC (Supply Controller). </p>
<p>This driver provides access to the main features of the Supply Controller. </p>
<h2 class="groupheader">Function Documentation</h2>
<a id="gaf35e9b0ab6158155145e45164208c799"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf35e9b0ab6158155145e45164208c799">&sect;&nbsp;</a></span>supc_disable_brownout_detector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_disable_brownout_detector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable the core brownout detector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga097720c590544fb71432d0c174ce48a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga097720c590544fb71432d0c174ce48a5">&sect;&nbsp;</a></span>supc_disable_brownout_reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_disable_brownout_reset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable the assertion of core reset signal when a brownout detection occurs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga479cda286b57ac61d0576d7adaf81430"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga479cda286b57ac61d0576d7adaf81430">&sect;&nbsp;</a></span>supc_disable_monitor_interrupt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_disable_monitor_interrupt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable the assertion of SUPC interrupt signal when a supply monitor detection occurs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga2aa5610d2a9f191d543e7b8ee3a26531"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2aa5610d2a9f191d543e7b8ee3a26531">&sect;&nbsp;</a></span>supc_disable_monitor_reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_disable_monitor_reset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable the assertion of core reset signal when a supply monitor detection occurs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaf0164700019086d51d8c480475cbec78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf0164700019086d51d8c480475cbec78">&sect;&nbsp;</a></span>supc_disable_voltage_regulator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_disable_voltage_regulator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disable the internal voltage regulator to supply VDDCORE with an external supply. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga96f287f9fb31b284af4e12f1323577e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga96f287f9fb31b284af4e12f1323577e1">&sect;&nbsp;</a></span>supc_enable_backup_mode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_enable_backup_mode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Switch off the voltage regulator to put the device in backup mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga9e30359b679b14897339120ffc3b7d92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9e30359b679b14897339120ffc3b7d92">&sect;&nbsp;</a></span>supc_enable_brownout_detector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_enable_brownout_detector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable the core brownout detector. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaf0e0333b0981264d2ee4beb39dfffe7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf0e0333b0981264d2ee4beb39dfffe7e">&sect;&nbsp;</a></span>supc_enable_brownout_reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_enable_brownout_reset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable the assertion of core reset signal when a brownout detection occurs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga880cbc006ebfb8b7842e4fb9363639b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga880cbc006ebfb8b7842e4fb9363639b0">&sect;&nbsp;</a></span>supc_enable_monitor_interrupt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_enable_monitor_interrupt </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable the assertion of SUPC interrupt signal when a supply monitor detection occurs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaab11836ad8db91184f95af7dcb913e6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaab11836ad8db91184f95af7dcb913e6d">&sect;&nbsp;</a></span>supc_enable_monitor_reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_enable_monitor_reset </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable the assertion of the core reset signal when a supply monitor detection occurs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga362e1eeffd7afc90c6f4c40384f4fe83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga362e1eeffd7afc90c6f4c40384f4fe83">&sect;&nbsp;</a></span>supc_enable_voltage_regulator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_enable_voltage_regulator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable the internal voltage regulator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga544070245321baca4f43b8c49cd24ead"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga544070245321baca4f43b8c49cd24ead">&sect;&nbsp;</a></span>supc_get_status()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t supc_get_status </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get supply controller status. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The status of supply controller. </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__supc__group_ga544070245321baca4f43b8c49cd24ead_cgraph.svg" width="130" height="62"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="group__sam__drivers__supc__group_ga544070245321baca4f43b8c49cd24ead_icgraph.svg" width="130" height="62"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ga46c8d85ecca0d28616403fe1090af6a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga46c8d85ecca0d28616403fe1090af6a3">&sect;&nbsp;</a></span>supc_set_monitor_sampling_period()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_set_monitor_sampling_period </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_period</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set Supply monitor sampling period. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
    <tr><td class="paramname">ul_period</td><td>Supply monitor sampling period. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga96b3334eb3eb23226f1cb7ed9fc19a24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga96b3334eb3eb23226f1cb7ed9fc19a24">&sect;&nbsp;</a></span>supc_set_monitor_threshold()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_set_monitor_threshold </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_threshold</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set Supply monitor threshold. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
    <tr><td class="paramname">ul_threshold</td><td>Supply monitor threshold (between 1.9V and 3.4V). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga2b92b347d6cf7a6c9d4c5b5af91e5d78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2b92b347d6cf7a6c9d4c5b5af91e5d78">&sect;&nbsp;</a></span>supc_set_wakeup_inputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_set_wakeup_inputs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_transition</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set system controller wake up inputs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
    <tr><td class="paramname">ul_inputs</td><td>Bitmask of wake-up inputs that can force wake up of the core power supply. </td></tr>
    <tr><td class="paramname">ul_transition</td><td>Bitmask of level transition of the wake-up inputs. 1 means a high-to-low level transition forces the wake up of core power supply. 0 means a low-to-high level transition forces the wake up of core power supply. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="gaa53426ae2b622bb225f01d44fde8deb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa53426ae2b622bb225f01d44fde8deb7">&sect;&nbsp;</a></span>supc_set_wakeup_mode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_set_wakeup_mode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set system controller wake up mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p_supc</td><td>Pointer to a SUPC instance. </td></tr>
    <tr><td class="paramname">ul_mode</td><td>Bitmask of wake up mode (please refer to datasheet for more details). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ga1970c9a25b8f8b9d4c7b244c6aa897bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1970c9a25b8f8b9d4c7b244c6aa897bd">&sect;&nbsp;</a></span>supc_switch_sclk_to_32kxtal()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void supc_switch_sclk_to_32kxtal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_supc.xhtml">Supc</a> *&#160;</td>
          <td class="paramname"><em>p_supc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>ul_bypass</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Switch slow clock source selection to external 32k (Xtal or Bypass) oscillator. </p>
<p>This function disables the PLLs.</p>
<dl class="section note"><dt>Note</dt><dd>Switching sclk back to 32krc is only possible by shutting down the VDDIO power supply.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ul_bypass</td><td>0 for Xtal, 1 for bypass. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>
